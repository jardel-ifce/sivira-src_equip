import json
from enums.producao.politica_producao import PoliticaProducao
from utils.logs.logger_factory import setup_logger

logger = setup_logger("DebugConversaoEnum")

def debug_conversao_politica_producao(caminho_json: str):
    """
    üîç Script para debugar a convers√£o de pol√≠tica de produ√ß√£o do JSON.
    """
    print("üîç DEBUGGING CONVERS√ÉO DE POL√çTICA DE PRODU√á√ÉO")
    print("=" * 60)
    
    try:
        # 1. Carregar JSON bruto
        with open(caminho_json, "r", encoding="utf-8") as f:
            dados = json.load(f)
        
        print(f"üìÇ Arquivo carregado: {len(dados)} itens")
        
        # 2. Verificar item espec√≠fico do creme de queijo
        creme_queijo = None
        for item in dados:
            if item.get("id_item") == 2010:
                creme_queijo = item
                break
        
        if not creme_queijo:
            print("‚ùå Item creme_de_queijo (ID 2010) n√£o encontrado!")
            return
        
        print("\nüßÄ ITEM CREME DE QUEIJO (ID 2010):")
        print("-" * 40)
        print(f"üìù Nome: {creme_queijo.get('nome')}")
        print(f"üìù Descri√ß√£o: {creme_queijo.get('descricao')}")
        print(f"üìù Pol√≠tica (string do JSON): '{creme_queijo.get('politica_producao')}'")
        print(f"üìù Estoque atual: {creme_queijo.get('estoque_atual')}")
        print(f"üìù Tipo do valor: {type(creme_queijo.get('politica_producao'))}")
        
        # 3. Testar convers√£o para ENUM
        politica_string = creme_queijo.get('politica_producao')
        
        print(f"\nüîÑ TESTANDO CONVERS√ÉO:")
        print("-" * 40)
        
        try:
            # Teste direto da convers√£o
            politica_enum = PoliticaProducao[politica_string]
            print(f"‚úÖ Convers√£o bem-sucedida: {politica_string} ‚Üí {politica_enum}")
            print(f"üìä Valor do ENUM: {politica_enum.value}")
            print(f"üìä Tipo do ENUM: {type(politica_enum)}")
            
            # Verificar se √© realmente ESTOCADO
            if politica_enum == PoliticaProducao.ESTOCADO:
                print("‚úÖ CONFIRMADO: Pol√≠tica √© ESTOCADO")
            else:
                print(f"‚ö†Ô∏è ATEN√á√ÉO: Pol√≠tica n√£o √© ESTOCADO, √© {politica_enum.value}")
                
        except KeyError as e:
            print(f"‚ùå ERRO na convers√£o: {e}")
            print("üí° Poss√≠veis valores v√°lidos:")
            for politica in PoliticaProducao:
                print(f"   - {politica.name} (valor: {politica.value})")
        
        # 4. Verificar todos os valores de pol√≠tica no arquivo
        print(f"\nüìä TODAS AS POL√çTICAS NO ARQUIVO:")
        print("-" * 40)
        
        politicas_encontradas = {}
        for item in dados:
            politica = item.get('politica_producao')
            if politica in politicas_encontradas:
                politicas_encontradas[politica] += 1
            else:
                politicas_encontradas[politica] = 1
        
        for politica, count in politicas_encontradas.items():
            print(f"üìà '{politica}': {count} itens")
            
            # Testar se cada uma √© v√°lida
            try:
                enum_val = PoliticaProducao[politica]
                print(f"   ‚úÖ V√°lida: {enum_val.value}")
            except KeyError:
                print(f"   ‚ùå INV√ÅLIDA: n√£o existe no ENUM")
        
        # 5. Verificar valores poss√≠veis do ENUM
        print(f"\nüéØ VALORES V√ÅLIDOS DO ENUM PoliticaProducao:")
        print("-" * 40)
        for politica in PoliticaProducao:
            print(f"üìå {politica.name} ‚Üí valor: '{politica.value}'")
        
        # 6. Teste espec√≠fico de verifica√ß√£o de estoque
        print(f"\nüß™ SIMULA√á√ÉO DE VERIFICA√á√ÉO DE ESTOQUE:")
        print("-" * 40)
        
        if creme_queijo:
            politica_string = creme_queijo.get('politica_producao')
            estoque_atual = creme_queijo.get('estoque_atual', 0)
            
            print(f"üì¶ Estoque atual: {estoque_atual}")
            print(f"üè∑Ô∏è Pol√≠tica: {politica_string}")
            
            # Simular a l√≥gica do c√≥digo
            if politica_string == "SOB_DEMANDA":
                print("üîÑ Resultado: SEMPRE PRODUZIR (pol√≠tica SOB_DEMANDA)")
            elif politica_string == "ESTOCADO":
                if estoque_atual >= 4600:  # Quantidade aproximada necess√°ria
                    print("‚úÖ Resultado: N√ÉO PRODUZIR (estoque suficiente)")
                else:
                    print("‚ùå Resultado: PRODUZIR (estoque insuficiente)")
            else:
                print(f"‚ö†Ô∏è Pol√≠tica desconhecida: {politica_string}")
    
    except Exception as e:
        print(f"‚ùå ERRO GERAL: {e}")
        import traceback
        traceback.print_exc()

# Fun√ß√£o para uso direto
if __name__ == "__main__":
    debug_conversao_politica_producao("/Users/jardelrodrigues/Desktop/SIVIRA/src_equip/data/almoxarifado/itens_almoxarifado.json")