#!/usr/bin/env python3
"""
Teste Standalone da Corre√ß√£o - Gerador de Janelas Temporais
===========================================================

Teste independente para verificar se a corre√ß√£o resolve o problema
do otimizador PL que n√£o gera janelas para fins obrigat√≥rios.
"""

import sys
import os
from datetime import datetime, timedelta
from typing import List, Dict
from dataclasses import dataclass

# Adiciona o caminho do projeto
sys.path.append("/Users/jardelrodrigues/Desktop/SIVIRA/src_equip")


@dataclass
class DadosPedidoTeste:
    """Classe simplificada para teste"""
    id_pedido: int
    nome_produto: str
    quantidade: int
    inicio_jornada: datetime
    fim_jornada: datetime
    duracao_total: timedelta
    atividades: List = None


def testar_problema_original():
    """
    Testa exatamente o problema encontrado no log de erro.
    """
    print("üîç TESTE: Reproduzindo problema original...")
    print("="*60)
    
    # ‚úÖ DADOS EXATOS DO LOG DE ERRO
    dados_pedido = DadosPedidoTeste(
        id_pedido=1,
        nome_produto="pao_frances",
        quantidade=450,
        inicio_jornada=datetime(2025, 6, 26, 2, 35),  # 26/06 02:35
        fim_jornada=datetime(2025, 6, 26, 7, 0),     # 26/06 07:00
        duracao_total=timedelta(hours=4, minutes=25), # 4:25:00
        atividades=[]
    )
    
    print(f"üìã Dados do teste:")
    print(f"   Pedido: {dados_pedido.nome_produto} (ID {dados_pedido.id_pedido})")
    print(f"   Quantidade: {dados_pedido.quantidade}")
    print(f"   Janela: {dados_pedido.inicio_jornada.strftime('%d/%m %H:%M')} ‚Üí {dados_pedido.fim_jornada.strftime('%d/%m %H:%M')}")
    print(f"   Dura√ß√£o: {dados_pedido.duracao_total}")
    
    # Calcula a janela dispon√≠vel
    janela_disponivel = dados_pedido.fim_jornada - dados_pedido.inicio_jornada
    print(f"   Janela dispon√≠vel: {janela_disponivel}")
    
    # Verifica se teoricamente √© poss√≠vel
    if dados_pedido.duracao_total <= janela_disponivel:
        print(f"   ‚úÖ Teoricamente VI√ÅVEL (dura√ß√£o <= janela)")
        
        # Para fim obrigat√≥rio, calcula o in√≠cio necess√°rio
        inicio_necessario = dados_pedido.fim_jornada - dados_pedido.duracao_total
        print(f"   üéØ Para FIM OBRIGAT√ìRIO √†s {dados_pedido.fim_jornada.strftime('%H:%M')}:")
        print(f"      Deve come√ßar √†s: {inicio_necessario.strftime('%H:%M')}")
        print(f"      In√≠cio m√≠nimo dispon√≠vel: {dados_pedido.inicio_jornada.strftime('%H:%M')}")
        
        if inicio_necessario >= dados_pedido.inicio_jornada:
            print(f"      ‚úÖ PERFEITAMENTE VI√ÅVEL!")
            print(f"      üìä Janela √∫nica poss√≠vel: {inicio_necessario.strftime('%H:%M')} ‚Üí {dados_pedido.fim_jornada.strftime('%H:%M')}")
        else:
            print(f"      ‚ùå IMPOSS√çVEL - in√≠cio necess√°rio anterior ao m√≠nimo")
    else:
        print(f"   ‚ùå Teoricamente IMPOSS√çVEL (dura√ß√£o > janela)")
    
    return dados_pedido


def testar_gerador_corrigido_standalone():
    """
    Testa o gerador com a corre√ß√£o implementada.
    """
    print(f"\nüß™ TESTE: Gerador de Janelas CORRIGIDO")
    print("="*60)
    
    try:
        # Importa a classe corrigida
        from otimizador.gerador_janelas_temporais import GeradorJanelasTemporais
        
        # Usa dados do problema original
        dados_pedido = testar_problema_original()
        dados_lista = [dados_pedido]
        
        # Define que este pedido tem fim obrigat√≥rio
        pedidos_com_fim_obrigatorio = {
            1: datetime(2025, 6, 26, 7, 0)  # Pedido 1 tem fim obrigat√≥rio √†s 07:00
        }
        
        print(f"\nüîß Testando com gerador CORRIGIDO:")
        print(f"   Resolu√ß√£o: 30 minutos (igual ao log original)")
        print(f"   Pedidos com fim obrigat√≥rio: {list(pedidos_com_fim_obrigatorio.keys())}")
        
        # Cria gerador e testa
        gerador = GeradorJanelasTemporais(resolucao_minutos=30)
        
        # ‚úÖ CHAMA M√âTODO CORRIGIDO passando fins obrigat√≥rios
        janelas = gerador.gerar_janelas_todos_pedidos(
            dados_lista,
            pedidos_com_fim_obrigatorio
        )
        
        # Analisa resultado
        print(f"\nüìä RESULTADO:")
        if 1 in janelas:
            janelas_pedido_1 = janelas[1]
            print(f"   Janelas geradas para pedido 1: {len(janelas_pedido_1)}")
            
            if janelas_pedido_1:
                for i, janela in enumerate(janelas_pedido_1):
                    inicio_str = janela.datetime_inicio.strftime('%d/%m %H:%M')
                    fim_str = janela.datetime_fim.strftime('%d/%m %H:%M')
                    viavel_str = "‚úÖ VI√ÅVEL" if janela.viavel else "‚ùå N√ÉO VI√ÅVEL"
                    
                    print(f"   Janela {i+1}: {inicio_str} ‚Üí {fim_str} ({viavel_str})")
                
                # ‚úÖ VALIDA√á√ÉO CR√çTICA
                if len(janelas_pedido_1) >= 1 and janelas_pedido_1[0].viavel:
                    print(f"\nüéâ CORRE√á√ÉO FUNCIONOU!")
                    print(f"   ‚úÖ Gerou {len(janelas_pedido_1)} janela(s) vi√°vel(eis)")
                    print(f"   ‚úÖ Problema do log original foi RESOLVIDO")
                    return True
                else:
                    print(f"\n‚ùå CORRE√á√ÉO FALHOU - janelas n√£o vi√°veis")
                    return False
            else:
                print(f"   ‚ùå NENHUMA janela gerada (problema persiste)")
                return False
        else:
            print(f"   ‚ùå Pedido 1 n√£o encontrado nos resultados")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print(f"   Certifique-se de que o arquivo gerador_janelas_temporais.py foi atualizado")
        return False
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()
        return False


def comparar_antes_depois():
    """
    Compara o comportamento antes e depois da corre√ß√£o.
    """
    print(f"\nüìä COMPARA√á√ÉO: Antes vs Depois da Corre√ß√£o")
    print("="*60)
    
    print(f"‚ùå ANTES (comportamento original que falhou):")
    print(f"   - Tentava gerar janelas com forward scheduling")
    print(f"   - periodo_inicio_max = 8 - 9 = -1")
    print(f"   - while 0 <= -1: NUNCA EXECUTA")
    print(f"   - Resultado: 0 janelas geradas")
    
    print(f"\n‚úÖ DEPOIS (comportamento corrigido):")
    print(f"   - Detecta que √© pedido com fim obrigat√≥rio")
    print(f"   - Calcula √∫nica janela poss√≠vel: fim - dura√ß√£o")
    print(f"   - Valida se in√≠cio calculado >= in√≠cio m√≠nimo")
    print(f"   - Resultado: 1 janela exata gerada")


def main():
    """Executa todos os testes."""
    print("üî¨ TESTE COMPLETO DA CORRE√á√ÉO - GERADOR DE JANELAS")
    print("="*80)
    
    # Teste 1: Reproduz problema original
    dados_teste = testar_problema_original()
    
    # Teste 2: Testa corre√ß√£o
    sucesso = testar_gerador_corrigido_standalone()
    
    # Teste 3: Mostra compara√ß√£o
    comparar_antes_depois()
    
    # Resultado final
    print(f"\n" + "="*80)
    if sucesso:
        print(f"üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print(f"‚úÖ A corre√ß√£o resolve o problema identificado no log")
        print(f"‚úÖ O otimizador PL agora deve funcionar para fins obrigat√≥rios")
    else:
        print(f"‚ùå TESTE FALHOU!")
        print(f"‚ùå A corre√ß√£o precisa de ajustes adicionais")
    
    print(f"="*80)
    return sucesso


if __name__ == "__main__":
    main()