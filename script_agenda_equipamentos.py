#!/usr/bin/env python3
"""
üìÖ Script de Demonstra√ß√£o: Visualiza√ß√£o de Agenda de Equipamentos
================================================================

Script independente que demonstra como visualizar a agenda dos equipamentos 
ap√≥s executar um processo de produ√ß√£o de coxinhas.
"""

import sys
import os
from datetime import datetime, timedelta
from models.atividades.pedido_de_producao import PedidoDeProducao
from models.almoxarifado.almoxarifado import Almoxarifado
from services.gestor_almoxarifado.gestor_almoxarifado import GestorAlmoxarifado
from factory.fabrica_funcionarios import funcionarios_disponiveis
from parser.carregador_json_itens_almoxarifado import carregar_itens_almoxarifado
from utils.logs.gerenciador_logs import limpar_logs_inicializacao
from utils.comandas.limpador_comandas import apagar_todas_as_comandas
from enums.producao.tipo_item import TipoItem
from enums.equipamentos.tipo_equipamento import TipoEquipamento

# Importa√ß√µes para visualiza√ß√£o de agenda
from menu.integrador_equipamentos import IntegradorEquipamentos


def mostrar_agenda_todos_equipamentos():
    """
    Mostra a agenda de todos os equipamentos dispon√≠veis no sistema.
    """
    print("\nüìÖ AGENDA COMPLETA DE TODOS OS EQUIPAMENTOS")
    print("=" * 60)
    
    try:
        # Inicializar integrador
        integrador = IntegradorEquipamentos()
        
        if not integrador.sistema_disponivel():
            print("‚ö†Ô∏è Sistema de equipamentos n√£o dispon√≠vel no momento")
            return
            
        # Obter lista de equipamentos por tipo
        equipamentos_por_tipo = integrador.listar_equipamentos_disponiveis()
        
        if not equipamentos_por_tipo:
            print("üî≠ Nenhum equipamento encontrado no sistema")
            return
            
        total_equipamentos = sum(len(eqs) for eqs in equipamentos_por_tipo.values())
        print(f"üè≠ Sistema encontrou {total_equipamentos} equipamentos em {len(equipamentos_por_tipo)} categorias")
        print()
        
        # Mostrar agenda por tipo de equipamento
        for tipo_equipamento, lista_equipamentos in equipamentos_por_tipo.items():
            print(f"üìã {tipo_equipamento.upper()}")
            print("-" * (len(tipo_equipamento) + 2))
            
            for nome_equipamento in lista_equipamentos:
                print(f"\nüîß {nome_equipamento}:")
                try:
                    agenda = integrador.obter_agenda_equipamento_especifico(nome_equipamento)
                    
                    if agenda and not any(erro in agenda.lower() for erro in ['erro', 'n√£o encontrado', 'n√£o possui']):
                        if agenda.strip():
                            # Se retornou conte√∫do na agenda
                            linhas = agenda.strip().split('\n')
                            for linha in linhas:
                                print(f"   {linha}")
                        else:
                            # Agenda foi executada via logger
                            print("   ‚úÖ Agenda executada (verifique logs para detalhes)")
                    else:
                        print("   ‚ö†Ô∏è Sem agenda dispon√≠vel ou equipamento inativo")
                        
                except Exception as e:
                    print(f"   ‚ùå Erro ao obter agenda: {e}")
            
            print()
            
    except Exception as e:
        print(f"‚ùå Erro ao acessar sistema de equipamentos: {e}")


def executar_pedido_simples():
    """
    Executa um pedido simples de coxinhas para gerar dados na agenda.
    """
    print("üçü EXECUTANDO PEDIDO SIMPLES PARA GERAR AGENDA")
    print("=" * 50)
    
    # Limpeza inicial
    print("üßπ Limpando ambiente...")
    limpar_logs_inicializacao()
    apagar_todas_as_comandas()
    print("‚úÖ Ambiente limpo\n")
    
    # Configurar almoxarifado
    print("üì¶ Inicializando almoxarifado...")
    itens_almoxarifado = carregar_itens_almoxarifado("data/almoxarifado/itens_almoxarifado.json")
    almoxarifado = Almoxarifado()
    
    # Adicionar itens ao almoxarifado
    for item in itens_almoxarifado:
        almoxarifado.adicionar_item(item)
        
    gestor_almoxarifado = GestorAlmoxarifado(almoxarifado)
    print(f"‚úÖ Almoxarifado configurado com {len(itens_almoxarifado)} itens\n")
    
    # Definir jornada de trabalho
    inicio_jornada = datetime.now().replace(hour=6, minute=0, second=0, microsecond=0)
    fim_jornada = inicio_jornada.replace(hour=18, minute=0)
    
    print(f"‚è∞ Jornada de trabalho: {inicio_jornada.strftime('%H:%M')} √†s {fim_jornada.strftime('%H:%M')}")
    print()
    
    # Criar pedido simples
    print("üìã Criando pedido de coxinhas de frango...")
    pedido = PedidoDeProducao(
        id_ordem=1,
        id_pedido=1,
        id_produto=1055,  # ID das coxinhas de frango
        tipo_item=TipoItem.PRODUTO,
        quantidade=20,  # Quantidade pequena para ser processada rapidamente
        inicio_jornada=inicio_jornada,
        fim_jornada=fim_jornada,
        todos_funcionarios=funcionarios_disponiveis,
        gestor_almoxarifado=gestor_almoxarifado
    )
    
    # Configurar bypass para misturadoras
    pedido.configurar_bypass_capacidade({TipoEquipamento.MISTURADORAS})
    print("‚úÖ Pedido criado com bypass para MISTURADORAS\n")
    
    try:
        # Executar o pedido
        print("‚ö° EXECUTANDO PEDIDO...")
        print("1Ô∏è‚É£ Montando estrutura t√©cnica...")
        pedido.montar_estrutura()
        
        print("2Ô∏è‚É£ Criando atividades modulares...")
        pedido.criar_atividades_modulares_necessarias()
        
        atividades_produto = [a for a in pedido.atividades_modulares if a.tipo_item == TipoItem.PRODUTO]
        atividades_subproduto = [a for a in pedido.atividades_modulares if a.tipo_item == TipoItem.SUBPRODUTO]
        
        print(f"üìä Atividades: {len(atividades_produto)} PRODUTO, {len(atividades_subproduto)} SUBPRODUTO")
        print()
        
        print("3Ô∏è‚É£ Executando atividades com agrupamento de subprodutos...")
        pedido.executar_atividades_em_ordem()
        
        print(f"‚úÖ PEDIDO EXECUTADO COM SUCESSO!")
        print(f"üìä Atividades executadas: {len(pedido.atividades_executadas)}")
        print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na execu√ß√£o do pedido: {e}")
        return False


def main():
    """Fun√ß√£o principal do script."""
    print("üìÖ DEMONSTRA√á√ÉO: VISUALIZA√á√ÉO DE AGENDA DE EQUIPAMENTOS")
    print("=" * 65)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    try:
        # Passo 1: Executar um pedido para gerar dados na agenda
        sucesso = executar_pedido_simples()
        
        if not sucesso:
            print("‚ö†Ô∏è Pedido n√£o foi executado, mas vamos tentar mostrar a agenda mesmo assim")
        
        print("\n" + "="*65)
        print("üìÖ VISUALIZANDO AGENDA DOS EQUIPAMENTOS")
        print("="*65)
        
        # Passo 2: Mostrar agenda de todos os equipamentos
        mostrar_agenda_todos_equipamentos()
        
        print("\n" + "="*65)
        print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
        print("="*65)
        
        print("\nüí° EXPLICA√á√ÉO:")
        print("   ‚Ä¢ O sistema executou um pedido de coxinhas que usa agrupamento de subprodutos")
        print("   ‚Ä¢ As atividades foram alocadas automaticamente nos equipamentos dispon√≠veis") 
        print("   ‚Ä¢ Cada equipamento mant√©m sua pr√≥pria agenda com hor√°rios ocupados")
        print("   ‚Ä¢ O agrupamento permite que subprodutos relacionados sejam executados em sequ√™ncia")
        print("   ‚Ä¢ A visualiza√ß√£o mostra todos os equipamentos e suas respectivas agendas")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå ERRO FATAL: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("\nüëã Fim da demonstra√ß√£o")


if __name__ == "__main__":
    main()