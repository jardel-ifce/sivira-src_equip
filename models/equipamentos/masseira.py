from models.equipamentos.equipamento import Equipamento
from enums.equipamentos.tipo_velocidade import TipoVelocidade
from enums.equipamentos.tipo_mistura import TipoMistura
from enums.producao.tipo_setor import TipoSetor
from enums.equipamentos.tipo_equipamento import TipoEquipamento
from typing import List, Optional, Tuple
from datetime import datetime
from utils.logs.logger_factory import setup_logger

logger = setup_logger('Masseira')


class Masseira(Equipamento):
    """
    ü•£ Classe que representa uma Masseira.
    ‚úîÔ∏è Controle de capacidade por peso.
    ‚úîÔ∏è Suporte a m√∫ltiplas velocidades e tipos de mistura.
    ‚úîÔ∏è Permite ocupa√ß√µes simult√¢neas de mesma atividade com intervalos flex√≠veis.
    ‚úîÔ∏è Valida√ß√£o din√¢mica de capacidade considerando picos de sobreposi√ß√£o.
    ‚úîÔ∏è MODIFICADO: Agrupamento por id_atividade (n√£o mais por id_item).
    """

    # ============================================
    # üîß Inicializa√ß√£o
    # ============================================
    def __init__(
        self,
        id: int,
        nome: str,
        setor: TipoSetor,
        numero_operadores: int,
        capacidade_gramas_min: float,
        capacidade_gramas_max: float,
        velocidades_suportadas: Optional[List[TipoVelocidade]] = None,
        tipos_de_mistura_suportados: Optional[List[TipoMistura]] = None
    ):
        super().__init__(
            id=id,
            nome=nome,
            tipo_equipamento=TipoEquipamento.MISTURADORAS,
            setor=setor,
            numero_operadores=numero_operadores,
            status_ativo=True
        )

        self.capacidade_gramas_min = capacidade_gramas_min
        self.capacidade_gramas_max = capacidade_gramas_max
        self.velocidades_suportadas = velocidades_suportadas or []
        self.tipos_de_mistura_suportados = tipos_de_mistura_suportados or []

        # üóìÔ∏è Ocupa√ß√µes: (id_ordem, id_pedido, id_atividade, id_item, quantidade_alocada, velocidades, tipo_mistura, inicio, fim)
        self.ocupacoes: List[Tuple[int, int, int, int, float, List[TipoVelocidade], TipoMistura, datetime, datetime]] = []

    # ==========================================================
    # üîç Valida√ß√£o Din√¢mica de Capacidade por ATIVIDADE
    # ==========================================================
    def obter_quantidade_maxima_atividade_periodo(self, id_atividade: int, inicio: datetime, fim: datetime) -> float:
        """
        Calcula a quantidade m√°xima de uma atividade que estar√° sendo processada
        simultaneamente na masseira durante qualquer momento do per√≠odo especificado.
        """
        # Lista todos os pontos temporais relevantes (in√≠cios e fins de ocupa√ß√µes)
        pontos_temporais = set()
        ocupacoes_atividade = []
        
        # Coleta ocupa√ß√µes da mesma atividade
        for ocupacao in self.ocupacoes:
            if ocupacao[2] == id_atividade:  # mesmo id_atividade
                ocupacoes_atividade.append(ocupacao)
                pontos_temporais.add(ocupacao[7])  # in√≠cio
                pontos_temporais.add(ocupacao[8])  # fim
        
        # Adiciona os pontos do novo per√≠odo
        pontos_temporais.add(inicio)
        pontos_temporais.add(fim)
        
        # Ordena os pontos temporais
        pontos_ordenados = sorted(pontos_temporais)
        
        quantidade_maxima = 0.0
        
        # Verifica a quantidade em cada intervalo
        for i in range(len(pontos_ordenados) - 1):
            momento_inicio = pontos_ordenados[i]
            momento_fim = pontos_ordenados[i + 1]
            momento_meio = momento_inicio + (momento_fim - momento_inicio) / 2
            
            # Soma quantidade de todas as ocupa√ß√µes ativas neste momento
            quantidade_momento = 0.0
            
            # Verifica ocupa√ß√µes existentes
            for ocupacao in ocupacoes_atividade:
                if ocupacao[7] <= momento_meio < ocupacao[8]:  # ocupa√ß√£o ativa neste momento
                    quantidade_momento += ocupacao[4]
            
            quantidade_maxima = max(quantidade_maxima, quantidade_momento)
        
        return quantidade_maxima

    def validar_nova_ocupacao_atividade(self, id_atividade: int, quantidade_nova: float, 
                                       inicio: datetime, fim: datetime) -> bool:
        """
        Simula uma nova ocupa√ß√£o e verifica se a capacidade m√°xima ser√° respeitada
        em todos os momentos de sobreposi√ß√£o para a mesma atividade.
        """
        # Coleta todos os pontos temporais relevantes
        pontos_temporais = set()
        ocupacoes_atividade = []
        
        for ocupacao in self.ocupacoes:
            if ocupacao[2] == id_atividade:  # mesmo id_atividade
                ocupacoes_atividade.append(ocupacao)
                pontos_temporais.add(ocupacao[7])  # in√≠cio
                pontos_temporais.add(ocupacao[8])  # fim
        
        # Adiciona pontos da nova ocupa√ß√£o
        pontos_temporais.add(inicio)
        pontos_temporais.add(fim)
        
        # Ordena pontos temporais
        pontos_ordenados = sorted(pontos_temporais)
        
        # Verifica quantidade em cada intervalo
        for i in range(len(pontos_ordenados) - 1):
            momento_inicio = pontos_ordenados[i]
            momento_fim = pontos_ordenados[i + 1]
            momento_meio = momento_inicio + (momento_fim - momento_inicio) / 2
            
            quantidade_total = 0.0
            
            # Soma ocupa√ß√µes existentes ativas neste momento
            for ocupacao in ocupacoes_atividade:
                if ocupacao[7] <= momento_meio < ocupacao[8]:
                    quantidade_total += ocupacao[4]
            
            # Soma nova ocupa√ß√£o se ativa neste momento
            if inicio <= momento_meio < fim:
                quantidade_total += quantidade_nova
            
            # Verifica se excede capacidade
            if quantidade_total > self.capacidade_gramas_max:
                logger.debug(
                    f"‚õî {self.nome} | Atividade {id_atividade}: Capacidade excedida no momento {momento_meio.strftime('%H:%M')} "
                    f"({quantidade_total}g > {self.capacidade_gramas_max}g)"
                )
                return False
        
        return True

    def esta_disponivel_para_atividade(self, inicio: datetime, fim: datetime, id_atividade: int) -> bool:
        """
        Verifica se a masseira pode receber uma nova ocupa√ß√£o da atividade especificada.
        Para a mesma atividade, sempre permite (valida√ß√£o de capacidade ser√° feita separadamente).
        Para atividades diferentes, n√£o permite sobreposi√ß√£o.
        """
        for ocupacao in self.ocupacoes:
            # Se √© a mesma atividade, sempre permite (capacidade ser√° validada depois)
            if ocupacao[2] == id_atividade:
                continue
                
            # Para atividades diferentes, n√£o pode haver sobreposi√ß√£o
            if not (fim <= ocupacao[7] or inicio >= ocupacao[8]):
                return False
        
        return True

    # ==========================================================
    # üîç Consulta de Ocupa√ß√£o (para o Gestor) - ATUALIZADA
    # ==========================================================
    def atividade_ja_alocada_periodo(self, id_atividade: int, inicio: datetime, fim: datetime) -> bool:
        """Verifica se uma atividade espec√≠fica j√° est√° alocada no per√≠odo (para o Gestor decidir sobreposi√ß√£o)."""
        for ocupacao in self.ocupacoes:
            if ocupacao[2] == id_atividade and not (fim <= ocupacao[7] or inicio >= ocupacao[8]):
                return True
        return False

    def obter_quantidade_alocada_periodo(self, inicio: datetime, fim: datetime, id_atividade: Optional[int] = None) -> float:
        """
        Retorna a quantidade total alocada no per√≠odo especificado, opcionalmente filtrada por atividade.
        ATEN√á√ÉO: Para mesma atividade, retorna PICO M√ÅXIMO de sobreposi√ß√£o, n√£o soma simples.
        """
        if id_atividade is not None:
            # Para atividade espec√≠fica, retorna pico m√°ximo de sobreposi√ß√£o
            return self.obter_quantidade_maxima_atividade_periodo(id_atividade, inicio, fim)
        else:
            # Para todas as atividades, soma simples (comportamento original)
            quantidade_total = 0.0
            for ocupacao in self.ocupacoes:
                if not (fim <= ocupacao[7] or inicio >= ocupacao[8]):  # h√° sobreposi√ß√£o temporal
                    quantidade_total += ocupacao[4]
            return quantidade_total

    def obter_ocupacoes_atividade_periodo(self, id_atividade: int, inicio: datetime, fim: datetime) -> List[Tuple[int, int, int, int, float, List[TipoVelocidade], TipoMistura, datetime, datetime]]:
        """Retorna ocupa√ß√µes de uma atividade espec√≠fica que se sobrep√µem ao per√≠odo."""
        ocupacoes_atividade = []
        for ocupacao in self.ocupacoes:
            if ocupacao[2] == id_atividade and not (fim <= ocupacao[7] or inicio >= ocupacao[8]):
                ocupacoes_atividade.append(ocupacao)
        return ocupacoes_atividade

    def obter_capacidade_disponivel_atividade(self, id_atividade: int, inicio: datetime, fim: datetime) -> float:
        """Retorna a capacidade dispon√≠vel para uma atividade espec√≠fica no per√≠odo."""
        quantidade_ocupada = self.obter_quantidade_maxima_atividade_periodo(id_atividade, inicio, fim)
        return max(0.0, self.capacidade_gramas_max - quantidade_ocupada)

    # Manter m√©todos originais para compatibilidade, mas agora usam l√≥gica de atividade
    def obter_quantidade_maxima_item_periodo(self, id_item: int, inicio: datetime, fim: datetime) -> float:
        """DEPRECIADO: Usar obter_quantidade_maxima_atividade_periodo. Mantido para compatibilidade."""
        logger.warning("M√©todo depreciado: use obter_quantidade_maxima_atividade_periodo")
        # Busca por atividades que usam esse item
        atividades_item = set(oc[2] for oc in self.ocupacoes if oc[3] == id_item)
        if not atividades_item:
            return 0.0
        # Retorna o m√°ximo entre todas as atividades que usam esse item
        return max(self.obter_quantidade_maxima_atividade_periodo(ativ, inicio, fim) for ativ in atividades_item)

    def esta_disponivel_para_item(self, inicio: datetime, fim: datetime, id_item: int) -> bool:
        """DEPRECIADO: Usar esta_disponivel_para_atividade. Mantido para compatibilidade."""
        logger.warning("M√©todo depreciado: use esta_disponivel_para_atividade")
        # Busca atividades que usam esse item
        atividades_item = set(oc[2] for oc in self.ocupacoes if oc[3] == id_item)
        if not atividades_item:
            return True
        # Se j√° h√° atividades do item, verifica se alguma pode agrupar
        for id_atividade in atividades_item:
            if self.esta_disponivel_para_atividade(inicio, fim, id_atividade):
                return True
        return False

    def validar_nova_ocupacao_item(self, id_item: int, quantidade_nova: float, 
                                  inicio: datetime, fim: datetime) -> bool:
        """DEPRECIADO: Usar validar_nova_ocupacao_atividade. Mantido para compatibilidade."""
        logger.warning("M√©todo depreciado: use validar_nova_ocupacao_atividade")
        # Busca atividades que usam esse item
        atividades_item = [oc[2] for oc in self.ocupacoes if oc[3] == id_item]
        if not atividades_item:
            return quantidade_nova <= self.capacidade_gramas_max
        # Verifica se alguma atividade pode receber a quantidade adicional
        for id_atividade in set(atividades_item):
            if self.validar_nova_ocupacao_atividade(id_atividade, quantidade_nova, inicio, fim):
                return True
        return False

    def obter_capacidade_disponivel_item(self, id_item: int, inicio: datetime, fim: datetime) -> float:
        """DEPRECIADO: Usar obter_capacidade_disponivel_atividade. Mantido para compatibilidade."""
        logger.warning("M√©todo depreciado: use obter_capacidade_disponivel_atividade")
        # Busca atividades que usam esse item
        atividades_item = set(oc[2] for oc in self.ocupacoes if oc[3] == id_item)
        if not atividades_item:
            return self.capacidade_gramas_max
        # Retorna a maior capacidade dispon√≠vel entre as atividades
        return max(self.obter_capacidade_disponivel_atividade(ativ, inicio, fim) for ativ in atividades_item)

    def esta_disponivel(self, inicio: datetime, fim: datetime) -> bool:
        """Verifica se a masseira est√° completamente livre no per√≠odo."""
        for ocupacao in self.ocupacoes:
            if not (fim <= ocupacao[7] or inicio >= ocupacao[8]):
                logger.warning(
                    f"‚ö†Ô∏è {self.nome} n√£o dispon√≠vel entre {inicio.strftime('%H:%M')} e {fim.strftime('%H:%M')} "
                    f"devido √† atividade {ocupacao[2]} do item {ocupacao[3]}."
                )
                return False
        return True

    def obter_proxima_liberacao(self, momento_atual: datetime) -> Optional[datetime]:
        """Retorna pr√≥ximo hor√°rio de libera√ß√£o da masseira."""
        proximas_liberacoes = [
            ocupacao[8] for ocupacao in self.ocupacoes  # fim
            if ocupacao[8] > momento_atual
        ]
        return min(proximas_liberacoes) if proximas_liberacoes else None

    def obter_todas_ocupacoes(self) -> List[Tuple[int, int, int, int, float, List[TipoVelocidade], TipoMistura, datetime, datetime]]:
        """Retorna todas as ocupa√ß√µes da masseira."""
        return self.ocupacoes.copy()

    def obter_ocupacoes_periodo(self, inicio: datetime, fim: datetime) -> List[Tuple[int, int, int, int, float, List[TipoVelocidade], TipoMistura, datetime, datetime]]:
        """Retorna todas as ocupa√ß√µes que se sobrep√µem ao per√≠odo especificado."""
        ocupacoes_periodo = []
        for ocupacao in self.ocupacoes:
            if not (fim <= ocupacao[7] or inicio >= ocupacao[8]):  # h√° sobreposi√ß√£o temporal
                ocupacoes_periodo.append(ocupacao)
        return ocupacoes_periodo

    # ==========================================================
    # ‚úÖ Valida√ß√µes (Par√¢metros t√©cnicos)
    # ==========================================================
    def validar_capacidade_individual(self, quantidade: float) -> bool:
        """Valida se a quantidade individual est√° dentro dos limites."""
        if quantidade < self.capacidade_gramas_min:
            logger.warning(
                f"‚ö†Ô∏è Quantidade {quantidade}g abaixo do m√≠nimo permitido pela {self.nome} "
                f"({self.capacidade_gramas_min}g)"
            )
            return False
        if quantidade > self.capacidade_gramas_max:
            logger.warning(
                f"‚ö†Ô∏è Quantidade {quantidade}g acima do m√°ximo permitido pela {self.nome} "
                f"({self.capacidade_gramas_max}g)"
            )
            return False
        return True

    def validar_capacidade_total_atividade(self, id_atividade: int, quantidade_adicional: float, inicio: datetime, fim: datetime) -> bool:
        """
        Valida se a capacidade total da atividade n√£o excede o limite considerando picos de sobreposi√ß√£o.
        """
        return self.validar_nova_ocupacao_atividade(id_atividade, quantidade_adicional, inicio, fim)

    def verificar_disponibilidade(
        self, 
        quantidade: float, 
        velocidades: List[TipoVelocidade], 
        tipo_mistura: TipoMistura
    ) -> bool:
        """Verifica se os par√¢metros s√£o v√°lidos para a masseira (sem verificar per√≠odo)."""
        return self.validar_capacidade_individual(quantidade)

    # ==========================================================
    # üîÑ Ocupa√ß√£o e Atualiza√ß√£o (MODIFICADO)
    # ==========================================================
    def adicionar_ocupacao(
        self,
        id_ordem: int,
        id_pedido: int,
        id_atividade: int,
        id_item: int,
        quantidade_alocada: float,
        velocidades: List[TipoVelocidade],
        tipo_mistura: TipoMistura,
        inicio: datetime,
        fim: datetime
    ) -> bool:
        """
        VERS√ÉO MODIFICADA: Adiciona ocupa√ß√£o individual com valida√ß√£o de capacidade para mesma atividade.
        Permite m√∫ltiplas ocupa√ß√µes da mesma atividade respeitando capacidade m√°xima.
        """
        
        # Valida√ß√µes b√°sicas
        if not self.verificar_disponibilidade(quantidade_alocada, velocidades, tipo_mistura):
            return False

        # Verifica disponibilidade (s√≥ impede se for atividade diferente com sobreposi√ß√£o)
        if not self.esta_disponivel_para_atividade(inicio, fim, id_atividade):
            logger.warning(
                f"‚õî {self.nome} | Ocupada por atividade diferente entre {inicio.strftime('%H:%M')} e {fim.strftime('%H:%M')}."
            )
            return False

        # VALIDA√á√ÉO CHAVE: Capacidade m√°xima para mesma atividade considerando sobreposi√ß√µes
        if not self.validar_nova_ocupacao_atividade(id_atividade, quantidade_alocada, inicio, fim):
            quantidade_atual = self.obter_quantidade_maxima_atividade_periodo(id_atividade, inicio, fim)
            logger.warning(
                f"‚ö†Ô∏è {self.nome} | Atividade {id_atividade}: Nova ocupa√ß√£o {quantidade_alocada}g + "
                f"m√°ximo atual {quantidade_atual}g excederia capacidade m√°xima ({self.capacidade_gramas_max}g)"
            )
            return False

        # Adiciona ocupa√ß√£o individual (cada pedido tem sua pr√≥pria ocupa√ß√£o)
        self.ocupacoes.append(
            (id_ordem, id_pedido, id_atividade, id_item, quantidade_alocada, velocidades, tipo_mistura, inicio, fim)
        )

        # Log informativo
        quantidade_maxima_apos = self.obter_quantidade_maxima_atividade_periodo(id_atividade, inicio, fim) + quantidade_alocada
        velocidades_str = ", ".join([v.name for v in velocidades]) if velocidades else "Nenhuma"
        
        # Verifica se h√° outras ocupa√ß√µes da mesma atividade no mesmo per√≠odo (economia real)
        ocupacoes_simultaneas = self.obter_ocupacoes_atividade_periodo(id_atividade, inicio, fim)
        economia_msg = ""
        if len(ocupacoes_simultaneas) > 1:
            outros_pedidos = [str(oc[1]) for oc in ocupacoes_simultaneas if oc[1] != id_pedido]
            if outros_pedidos:
                economia_msg = f" | ECONOMIA: Compartilhando equipamento com pedidos {', '.join(outros_pedidos)}"

        logger.info(
            f"ü•£ {self.nome} | Atividade {id_atividade}: Nova ocupa√ß√£o {quantidade_alocada}g "
            f"de {inicio.strftime('%H:%M')} at√© {fim.strftime('%H:%M')} "
            f"(Pico m√°ximo da atividade: {quantidade_maxima_apos}g) "
            f"(Ordem {id_ordem}, Pedido {id_pedido}, Item {id_item}) | "
            f"Velocidades: {velocidades_str} | Mistura: {tipo_mistura.name if tipo_mistura else 'Nenhuma'}"
            f"{economia_msg}"
        )
        return True

    # ==========================================================
    # üìä M√©todos de An√°lise de Consolida√ß√£o Impl√≠cita (ATUALIZADA)
    # ==========================================================
    def obter_estatisticas_economia_equipamento(self) -> dict:
        """
        Retorna estat√≠sticas de economia de equipamento baseada em ocupa√ß√µes simult√¢neas
        da mesma atividade (consolida√ß√£o impl√≠cita).
        """
        
        if not self.ocupacoes:
            return {'economia_equipamentos': 0, 'detalhes': []}
        
        # Agrupar ocupa√ß√µes por per√≠odo e atividade
        grupos_simultaneos = {}
        
        for ocupacao in self.ocupacoes:
            id_atividade = ocupacao[2]  # Mudan√ßa aqui: usa id_atividade
            inicio = ocupacao[7]
            fim = ocupacao[8]
            chave_periodo = f"{id_atividade}_{inicio.isoformat()}_{fim.isoformat()}"
            
            if chave_periodo not in grupos_simultaneos:
                grupos_simultaneos[chave_periodo] = {
                    'id_atividade': id_atividade,
                    'inicio': inicio,
                    'fim': fim,
                    'ocupacoes': []
                }
            
            grupos_simultaneos[chave_periodo]['ocupacoes'].append(ocupacao)
        
        # Calcular economia
        economia_total = 0
        detalhes_economia = []
        
        for chave, grupo in grupos_simultaneos.items():
            num_ocupacoes = len(grupo['ocupacoes'])
            if num_ocupacoes > 1:
                economia = num_ocupacoes - 1  # N ocupa√ß√µes usando 1 equipamento = economia de N-1
                economia_total += economia
                
                pedidos_beneficiados = [oc[1] for oc in grupo['ocupacoes']]
                quantidade_total = sum(oc[4] for oc in grupo['ocupacoes'])
                
                detalhes_economia.append({
                    'id_atividade': grupo['id_atividade'],
                    'periodo': f"{grupo['inicio'].strftime('%H:%M')} - {grupo['fim'].strftime('%H:%M')}",
                    'pedidos_consolidados': pedidos_beneficiados,
                    'quantidade_total': quantidade_total,
                    'ocupacoes_simult√¢neas': num_ocupacoes,
                    'economia_equipamentos': economia
                })
        
        return {
            'economia_equipamentos': economia_total,
            'consolida√ß√µes_impl√≠citas': len(detalhes_economia),
            'detalhes': detalhes_economia
        }

    # ==========================================================
    # üîì Libera√ß√£o (mantida - funciona com ocupa√ß√µes individuais)
    # ==========================================================
    def liberar_por_atividade(self, id_ordem: int, id_pedido: int, id_atividade: int):
        """Libera ocupa√ß√µes espec√≠ficas por atividade."""
        antes = len(self.ocupacoes)
        self.ocupacoes = [
            ocupacao for ocupacao in self.ocupacoes
            if not (ocupacao[0] == id_ordem and ocupacao[1] == id_pedido and ocupacao[2] == id_atividade)
        ]
        liberadas = antes - len(self.ocupacoes)
        
        if liberadas > 0:
            logger.info(
                f"üîì Liberadas {liberadas} ocupa√ß√µes da {self.nome} "
                f"para Atividade {id_atividade}, Pedido {id_pedido}, Ordem {id_ordem}."
            )
        else:
            logger.warning(
                f"üîì Nenhuma ocupa√ß√£o encontrada para liberar na {self.nome} "
                f"para Atividade {id_atividade}, Pedido {id_pedido}, Ordem {id_ordem}."
            )

    # Outros m√©todos de libera√ß√£o permanecem iguais...
    def liberar_por_pedido(self, id_ordem: int, id_pedido: int):
        """Libera ocupa√ß√µes espec√≠ficas por pedido."""
        antes = len(self.ocupacoes)
        self.ocupacoes = [
            ocupacao for ocupacao in self.ocupacoes
            if not (ocupacao[0] == id_ordem and ocupacao[1] == id_pedido)
        ]
        liberadas = antes - len(self.ocupacoes)
        
        if liberadas > 0:
            logger.info(
                f"üîì Liberadas {liberadas} ocupa√ß√µes da {self.nome} "
                f"para Pedido {id_pedido}, Ordem {id_ordem}."
            )

    def liberar_por_ordem(self, id_ordem: int):
        """Libera ocupa√ß√µes espec√≠ficas por ordem."""
        antes = len(self.ocupacoes)
        self.ocupacoes = [
            ocupacao for ocupacao in self.ocupacoes
            if ocupacao[0] != id_ordem
        ]
        liberadas = antes - len(self.ocupacoes)
        
        if liberadas > 0:
            logger.info(f"üîì Liberadas {liberadas} ocupa√ß√µes da {self.nome} para Ordem {id_ordem}.")

    def liberar_ocupacoes_finalizadas(self, horario_atual: datetime):
        """Libera ocupa√ß√µes que j√° finalizaram."""
        antes = len(self.ocupacoes)
        self.ocupacoes = [
            ocupacao for ocupacao in self.ocupacoes
            if ocupacao[8] > horario_atual
        ]
        liberadas = antes - len(self.ocupacoes)
        
        if liberadas > 0:
            logger.info(f"üîì Liberadas {liberadas} ocupa√ß√µes da {self.nome} finalizadas at√© {horario_atual.strftime('%H:%M')}.")
        return liberadas

    def liberar_todas_ocupacoes(self):
        """Limpa todas as ocupa√ß√µes da masseira."""
        total = len(self.ocupacoes)
        self.ocupacoes.clear()
        logger.info(f"üîì Todas as {total} ocupa√ß√µes da {self.nome} foram removidas.")

    def liberar_por_intervalo(self, inicio: datetime, fim: datetime):
        """Libera ocupa√ß√µes que se sobrep√µem ao intervalo especificado."""
        antes = len(self.ocupacoes)
        self.ocupacoes = [
            ocupacao for ocupacao in self.ocupacoes
            if not (ocupacao[7] < fim and ocupacao[8] > inicio)
        ]
        liberadas = antes - len(self.ocupacoes)
        
        if liberadas > 0:
            logger.info(f"üîì Liberadas {liberadas} ocupa√ß√µes da {self.nome} entre {inicio.strftime('%H:%M')} e {fim.strftime('%H:%M')}.")

    # ==========================================================
    # üîì M√©todo de Compatibilidade
    # ==========================================================
    def ocupar(
        self,
        id_ordem: int,
        id_pedido: int,
        id_atividade: int,
        id_item: int,
        quantidade_alocada: float,
        velocidades: Optional[List[TipoVelocidade]] = None,
        tipo_mistura: Optional[TipoMistura] = None,
        inicio: datetime = None,
        fim: datetime = None
    ) -> bool:
        """M√©todo de compatibilidade para ocupa√ß√£o."""
        return self.adicionar_ocupacao(
            id_ordem, id_pedido, id_atividade, id_item, quantidade_alocada,
            velocidades or [], tipo_mistura, inicio, fim
        )

    # ==========================================================
    # üîÑ Atualiza√ß√£o de ocupa√ß√µes espec√≠ficas
    # ==========================================================
    def sobrescrever_ocupacoes(
        self,
        ocupacoes: List[Tuple[int, int, int, int, float, List[TipoVelocidade], TipoMistura, datetime, datetime]]
    ) -> bool:
        """Sobrescreve completamente as ocupa√ß√µes da masseira."""
        self.ocupacoes = ocupacoes.copy()
        
        logger.info(
            f"üîÑ Ocupa√ß√µes da {self.nome} foram sobrescritas. "
            f"Total de ocupa√ß√µes: {len(ocupacoes)}"
        )
        return True

    def atualizar_ocupacao_especifica(
        self,
        id_ordem: int,
        id_pedido: int,
        id_atividade: int,
        nova_quantidade: float,
        novas_velocidades: List[TipoVelocidade],
        novo_tipo_mistura: TipoMistura,
        novo_inicio: datetime,
        novo_fim: datetime
    ) -> bool:
        """Atualiza uma ocupa√ß√£o espec√≠fica da masseira."""
        for i, ocupacao in enumerate(self.ocupacoes):
            if ocupacao[0] == id_ordem and ocupacao[1] == id_pedido and ocupacao[2] == id_atividade:
                # Remover ocupa√ß√£o atual temporariamente para valida√ß√£o
                ocupacao_original = self.ocupacoes.pop(i)
                
                # Validar nova configura√ß√£o
                if not self.verificar_disponibilidade(nova_quantidade, novas_velocidades, novo_tipo_mistura):
                    # Restaurar ocupa√ß√£o original se valida√ß√£o falhar
                    self.ocupacoes.insert(i, ocupacao_original)
                    return False

                # Aplicar atualiza√ß√£o
                self.ocupacoes.insert(i, (
                    id_ordem, id_pedido, id_atividade, ocupacao_original[3], nova_quantidade, 
                    novas_velocidades, novo_tipo_mistura, novo_inicio, novo_fim
                ))
                
                velocidades_str = ", ".join([v.name for v in novas_velocidades]) if novas_velocidades else "Nenhuma"
                logger.info(
                    f"üîÑ Ocupa√ß√£o atualizada na {self.nome} | "
                    f"Ordem {id_ordem} | Pedido {id_pedido} | Atividade {id_atividade} | "
                    f"Nova quantidade: {nova_quantidade:.2f}g | {novo_inicio.strftime('%H:%M')} ‚Üí {novo_fim.strftime('%H:%M')} | "
                    f"Velocidades: {velocidades_str} | Mistura: {novo_tipo_mistura.name if novo_tipo_mistura else 'Nenhuma'}"
                )
                return True

        logger.warning(
            f"‚õî Ocupa√ß√£o n√£o encontrada para atualizar na {self.nome} | "
            f"Ordem {id_ordem} | Pedido {id_pedido} | Atividade {id_atividade}"
        )
        return False

    # ==========================================================
    # üìÖ Agenda e Relat√≥rios
    # ==========================================================
    def mostrar_agenda(self):
        """Mostra agenda detalhada da masseira."""
        logger.info("==============================================")
        logger.info(f"üìÖ Agenda da {self.nome}")
        logger.info("==============================================")

        if not self.ocupacoes:
            logger.info("üìπ Nenhuma ocupa√ß√£o registrada.")
            return

        for ocupacao in self.ocupacoes:
            velocidades_str = ", ".join([v.name for v in ocupacao[5]]) if ocupacao[5] else "Nenhuma"
            
            logger.info(
                f"ü•£ Ordem {ocupacao[0]} | Pedido {ocupacao[1]} | Atividade {ocupacao[2]} | Item {ocupacao[3]} | "
                f"{ocupacao[4]:.2f}g | {ocupacao[7].strftime('%H:%M')} ‚Üí {ocupacao[8].strftime('%H:%M')} | "
                f"Velocidades: {velocidades_str} | Mistura: {ocupacao[6].name if ocupacao[6] else 'Nenhuma'}"
            )
        
        # Mostrar estat√≠sticas de economia se houver
        economia_stats = self.obter_estatisticas_economia_equipamento()
        if economia_stats['economia_equipamentos'] > 0:
            logger.info("==============================================")
            logger.info(f"üìä Economia de Equipamentos: {economia_stats['economia_equipamentos']}")
            logger.info(f"üìä Consolida√ß√µes Impl√≠citas: {economia_stats['consolida√ß√µes_impl√≠citas']}")

    def obter_estatisticas_velocidade(self, inicio: datetime, fim: datetime) -> dict:
        """Retorna estat√≠sticas de uso por velocidade no per√≠odo."""
        ocupacoes_periodo = self.obter_ocupacoes_periodo(inicio, fim)
        
        if not ocupacoes_periodo:
            return {}
        
        estatisticas_velocidade = {}
        
        for ocupacao in ocupacoes_periodo:
            for velocidade in ocupacao[5]:  # velocidades
                nome_velocidade = velocidade.name
                if nome_velocidade not in estatisticas_velocidade:
                    estatisticas_velocidade[nome_velocidade] = {
                        'quantidade_total': 0.0,
                        'ocorrencias': 0
                    }
                
                estatisticas_velocidade[nome_velocidade]['quantidade_total'] += ocupacao[4]  # quantidade
                estatisticas_velocidade[nome_velocidade]['ocorrencias'] += 1
        
        return estatisticas_velocidade

    def obter_estatisticas_mistura(self, inicio: datetime, fim: datetime) -> dict:
        """Retorna estat√≠sticas de uso por tipo de mistura no per√≠odo."""
        ocupacoes_periodo = self.obter_ocupacoes_periodo(inicio, fim)
        
        if not ocupacoes_periodo:
            return {}
        
        estatisticas_mistura = {}
        
        for ocupacao in ocupacoes_periodo:
            if ocupacao[6]:  # tipo_mistura
                nome_mistura = ocupacao[6].name
                if nome_mistura not in estatisticas_mistura:
                    estatisticas_mistura[nome_mistura] = {
                        'quantidade_total': 0.0,
                        'ocorrencias': 0
                    }
                
                estatisticas_mistura[nome_mistura]['quantidade_total'] += ocupacao[4]  # quantidade
                estatisticas_mistura[nome_mistura]['ocorrencias'] += 1
        
        return estatisticas_mistura