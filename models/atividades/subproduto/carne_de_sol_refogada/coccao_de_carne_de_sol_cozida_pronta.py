from datetime import timedelta, datetime
from models.atividade_base import Atividade
from enums.tipo_equipamento import TipoEquipamento
from utils.logger_factory import setup_logger

# üî• Logger espec√≠fico
logger = setup_logger('Atividade_Coccao_Carne_De_Sol')


class CoccaoDeCarneDeSolCozidaPronta(Atividade):
    """
    üî•ü•© Atividade que representa a coc√ß√£o da carne de sol cozida pronta.
    ‚úÖ Utiliza fog√µes, ocupando bocas de acordo com a quantidade de produto.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fogao_alocado = None

    @property
    def quantidade_por_tipo_equipamento(self):
        return {
            TipoEquipamento.FOGOES: 1,
        }

    def calcular_duracao(self):
        """
        ‚úÖ Dura√ß√£o fixa de 40 minutos, para qualquer quantidade dentro da faixa.
        """
        q = self.quantidade_produto

        if 3000 <= q <= 60000:
            self.duracao = timedelta(minutes=40)
        else:
            logger.error(
                f"‚ùå Quantidade {q}g fora das faixas v√°lidas para coc√ß√£o da carne de sol cozida pronta."
            )
            raise ValueError(
                f"‚ùå Quantidade {q}g fora das faixas v√°lidas para coc√ß√£o da carne de sol cozida pronta."
            )

        logger.info(
            f"üïí Dura√ß√£o fixada em {self.duracao} para {q}g de carne de sol cozida pronta."
        )

    def tentar_alocar_e_iniciar(
        self,
        gestor_fogoes,
        inicio_janela: datetime,
        horario_limite: datetime
    ) -> bool:
        """
        üî• Realiza o backward scheduling tentando alocar fog√£o com bocas dispon√≠veis.
        """
        self.calcular_duracao()

        logger.info(
            f"üöÄ Tentando alocar atividade {self.id} ({self.quantidade_produto}g) "
            f"dentro da janela at√© {horario_limite.strftime('%H:%M')}."
        )

        sucesso, fogao, i_real, f_real = gestor_fogoes.alocar(
            inicio=inicio_janela,
            fim=horario_limite,
            atividade=self
        )

        if not sucesso:
            logger.error(
                f"‚ùå Falha na aloca√ß√£o do fog√£o para atividade {self.id}."
            )
            return False

        self._registrar_sucesso(fogao, i_real, f_real)
        return True

    def _registrar_sucesso(self, fogao, inicio, fim):
        self.fogao_alocado = fogao
        self.equipamento_alocado = fogao
        self.equipamentos_selecionados = [fogao]
        self.inicio_real = inicio
        self.fim_real = fim
        self.alocada = True

        logger.info(
            f"‚úÖ Atividade {self.id} alocada com sucesso!\n"
            f"üî• Fog√£o: {fogao.nome} de {inicio.strftime('%H:%M')} at√© {fim.strftime('%H:%M')}"
        )
        print(
            f"‚úÖ Atividade {self.id} alocada de {inicio.strftime('%H:%M')} at√© {fim.strftime('%H:%M')} "
            f"no Fog√£o {fogao.nome}."
        )

    def iniciar(self):
        """
        üü¢ Marca o in√≠cio da atividade.
        """
        if not self.alocada:
            logger.error(
                f"‚ùå Atividade {self.id} n√£o alocada ainda. N√£o √© poss√≠vel iniciar."
            )
            raise Exception("‚ùå Atividade n√£o alocada ainda.")

        logger.info(
            f"üöÄ Coc√ß√£o da carne de sol cozida pronta iniciada no Fog√£o {self.fogao_alocado.nome} "
            f"√†s {self.inicio_real.strftime('%H:%M')}."
        )
        print(
            f"üöÄ Atividade {self.id} iniciada √†s {self.inicio_real.strftime('%H:%M')} "
            f"no Fog√£o {self.fogao_alocado.nome}."
        )
