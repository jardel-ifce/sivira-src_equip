from models.atividade_base import Atividade
from datetime import timedelta, datetime
from enums.tipo_equipamento import TipoEquipamento
from utils.logger_factory import setup_logger


# üç´ Logger espec√≠fico
logger = setup_logger('Atividade_Preparo_Armazenamento_Ganache_De_Chocolate')


class PreparoParaArmazenamentoDeGanacheDeChocolate(Atividade):
    """
    üç´ Atividade de preparo para armazenamento da ganache de chocolate.
    ‚úîÔ∏è Equipamentos:
       - ü™µ Bancada (ocupa√ß√£o por fra√ß√µes, exclusiva no tempo por fra√ß√£o).
       - ‚öñÔ∏è Balan√ßa Digital (registro de uso por peso, uso concorrente).
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.bancada_alocada = None
        self.balanca_alocada = None
        self.fim_bancada_real = None  # ‚úÖ Rastreia o fim real da bancada

    @property
    def quantidade_por_tipo_equipamento(self):
        return {
            TipoEquipamento.BANCADAS: 1,
            TipoEquipamento.BALANCAS: 1,
        }

    def calcular_duracao(self):
        q = self.quantidade_produto

        if 3000 <= q <= 10000:
            self.duracao = timedelta(minutes=3)
        elif 10001 <= q <= 20000:
            self.duracao = timedelta(minutes=5)
        elif 20001 <= q <= 30000:
            self.duracao = timedelta(minutes=7)
        else:
            logger.error(f"‚ùå Quantidade {q}g inv√°lida para esta atividade.")
            raise ValueError(
                f"‚ùå Quantidade {q}g inv√°lida para PreparoParaArmazenamentoDeGanacheDeChocolate."
            )

        logger.info(f"üïí Dura√ß√£o calculada: {self.duracao} para {q}g de ganache de chocolate.")

    def tentar_alocar_e_iniciar(
        self,
        gestor_bancadas,
        gestor_balancas,
        inicio_jornada: datetime,
        fim_jornada: datetime,
        fracoes_necessarias: int
    ) -> bool:
        self.calcular_duracao()

        logger.info(
            f"üöÄ Tentando alocar atividade {self.id} ({self.quantidade_produto}g) entre "
            f"{inicio_jornada.strftime('%H:%M')} e {fim_jornada.strftime('%H:%M')}"
        )

        horario_final_tentativa = fim_jornada

        while horario_final_tentativa - self.duracao >= inicio_jornada:
            horario_inicio_tentativa = horario_final_tentativa - self.duracao

            # üîπ Tentar alocar bancada
            sucesso_bancada, bancada, i_real, f_real = gestor_bancadas.alocar(
                inicio=horario_inicio_tentativa,
                fim=horario_final_tentativa,
                atividade=self,
                fracoes_necessarias=fracoes_necessarias
            )

            if not sucesso_bancada:
                logger.warning(
                    f"‚ùå Bancada n√£o dispon√≠vel entre "
                    f"{horario_inicio_tentativa.strftime('%H:%M')} e {horario_final_tentativa.strftime('%H:%M')}."
                )
                horario_final_tentativa -= timedelta(minutes=1)
                continue

            # üîπ Tentar registrar uso da balan√ßa
            sucesso_balanca, balanca = gestor_balancas.alocar(
                atividade=self,
                quantidade_gramas=self.quantidade_produto
            )

            if not sucesso_balanca:
                gestor_bancadas.liberar_por_atividade(self)
                logger.warning(
                    f"‚ö†Ô∏è Balan√ßa indispon√≠vel para atividade {self.id}. Liberando bancada e tentando novo intervalo."
                )
                continue

            # ‚úÖ Sucesso total
            self._registrar_sucesso(bancada, balanca, i_real, f_real)
            return True

        # ‚ùå Falha final
        logger.error(
            f"‚ùå N√£o foi poss√≠vel alocar atividade {self.id} "
            f"dentro da janela {inicio_jornada.strftime('%H:%M')} at√© {fim_jornada.strftime('%H:%M')}."
        )
        return False

    def _registrar_sucesso(self, bancada, balanca, inicio_bancada, fim_bancada):
        self.bancada_alocada = bancada
        self.balanca_alocada = balanca
        self.equipamento_alocado = [bancada, balanca]
        self.equipamentos_selecionados = [bancada, balanca]

        self.inicio_real = inicio_bancada
        self.fim_bancada_real = fim_bancada
        self.fim_real = fim_bancada
        self.alocada = True

        logger.info(
            f"‚úÖ Atividade {self.id} alocada com sucesso!\n"
            f"ü™µ Bancada: {bancada.nome} de {inicio_bancada.strftime('%H:%M')} at√© {fim_bancada.strftime('%H:%M')}\n"
            f"‚öñÔ∏è Balan√ßa: {balanca.nome} registrada com {self.quantidade_produto}g"
        )

    def iniciar(self):
        if not self.alocada:
            logger.error(f"‚ùå Atividade {self.id} n√£o alocada. N√£o √© poss√≠vel iniciar.")
            raise Exception(f"‚ùå Atividade ID {self.id} n√£o alocada ainda.")

        logger.info(
            f"üöÄ Atividade {self.id} iniciada na bancada {self.bancada_alocada.nome} √†s {self.inicio_real.strftime('%H:%M')}"
        )
        print(
            f"üöÄ Atividade {self.id} iniciada √†s {self.inicio_real.strftime('%H:%M')} na bancada {self.bancada_alocada.nome}."
        )
