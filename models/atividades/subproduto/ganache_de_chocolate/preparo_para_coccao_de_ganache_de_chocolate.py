from datetime import timedelta, datetime
from models.atividade_base import Atividade
from enums.tipo_equipamento import TipoEquipamento
from utils.logger_factory import setup_logger

# üî• Logger espec√≠fico para esta atividade
logger = setup_logger('Atividade_Preparo_Coccao_Ganache_Chocolate')


class PreparoParaCoccaoDeGanacheDeChocolate(Atividade):
    """
    üç´ Atividade de preparo para coc√ß√£o de ganache de chocolate.
    ‚úîÔ∏è Equipamentos:
       - ü™µ Bancada (fra√ß√µes exclusivas no tempo).
       - üî• Fog√£o (exclusivo no tempo, alocado com base em FIP).
    """

    @property
    def quantidade_por_tipo_equipamento(self):
        return {
            TipoEquipamento.BANCADAS: 1,
            TipoEquipamento.FOGOES: 1,
        }

    def calcular_duracao(self):
        q = self.quantidade_produto

        if 3000 <= q <= 10000:
            self.duracao = timedelta(minutes=20)
        elif 10001 <= q <= 20000:
            self.duracao = timedelta(minutes=30)
        elif 20001 <= q <= 30000:
            self.duracao = timedelta(minutes=40)
        else:
            raise ValueError(
                f"‚ùå Quantidade {q} inv√°lida para PreparoParaCoccaoDeGanacheDeChocolate."
            )

        logger.info(
            f"üïí Dura√ß√£o calculada: {self.duracao} para {q}g de ganache de chocolate."
        )

    def tentar_alocar_e_iniciar(
        self,
        gestor_bancadas,
        gestor_fogoes,
        inicio_jornada: datetime,
        fim_jornada: datetime,
        fracoes_necessarias: int = 1
    ) -> bool:
        """
        üîÅ Estrutura padronizada:
        1Ô∏è‚É£ Tenta alocar fog√£o (atividade principal).
        2Ô∏è‚É£ Tenta alocar bancada antes da coc√ß√£o.
        3Ô∏è‚É£ Se falhar, recua 1 minuto e tenta novamente.
        """
        self.calcular_duracao()

        logger.info(
            f"üöÄ Tentando alocar atividade {self.id} "
            f"entre {inicio_jornada.strftime('%H:%M')} e {fim_jornada.strftime('%H:%M')}."
        )

        horario_final_tentativa = fim_jornada

        while horario_final_tentativa - self.duracao >= inicio_jornada:
            horario_inicio_fogao = horario_final_tentativa - self.duracao

            # üî• 1. Tenta alocar fog√£o
            sucesso_fogao, fogao, inicio_fogao_real, fim_fogao_real = gestor_fogoes.alocar(
                inicio=horario_inicio_fogao,
                fim=horario_final_tentativa,
                atividade=self
            )

            if not sucesso_fogao:
                logger.warning(
                    f"‚ùå Falha na aloca√ß√£o do fog√£o entre {horario_inicio_fogao.strftime('%H:%M')} "
                    f"e {horario_final_tentativa.strftime('%H:%M')}."
                )
                horario_final_tentativa -= timedelta(minutes=1)
                continue

            # ü™µ 2. Tenta alocar bancada antes do fog√£o
            inicio_bancada = inicio_fogao_real - self.duracao
            sucesso_bancada, bancada, inicio_bancada_real, fim_bancada_real = gestor_bancadas.alocar(
                inicio=inicio_bancada,
                fim=inicio_fogao_real,
                atividade=self,
                fracoes_necessarias=fracoes_necessarias
            )

            if not sucesso_bancada:
                gestor_fogoes.liberar_por_atividade(self)
                logger.warning(
                    f"‚ö†Ô∏è Falha na aloca√ß√£o da bancada antes de {inicio_fogao_real.strftime('%H:%M')}. "
                    f"Liberando fog√£o e tentando novo hor√°rio."
                )
                horario_final_tentativa -= timedelta(minutes=1)
                continue

            # ‚úÖ Sucesso total
            self._registrar_sucesso(
                bancada=bancada,
                fogao=fogao,
                inicio_bancada=inicio_bancada_real,
                fim_fogao=fim_fogao_real
            )
            return True

        # ‚ùå Falha final
        logger.error(
            f"‚ùå N√£o foi poss√≠vel alocar a atividade {self.id} na janela entre "
            f"{inicio_jornada.strftime('%H:%M')} e {fim_jornada.strftime('%H:%M')}."
        )
        return False

    def _registrar_sucesso(self, bancada, fogao, inicio_bancada, fim_fogao):
        """
        ‚úÖ Atualiza os atributos da atividade com sucesso de aloca√ß√£o.
        """
        self.inicio_real = inicio_bancada
        self.fim_real = fim_fogao
        self.bancada_alocada = bancada
        self.fogao_alocado = fogao
        self.equipamento_alocado = [bancada, fogao]
        self.equipamentos_selecionados = [bancada, fogao]
        self.alocada = True

        logger.info(
            f"‚úÖ Atividade {self.id} alocada com sucesso!\n"
            f"ü™µ Bancada: {bancada.nome} de {inicio_bancada.strftime('%H:%M')} at√© {(inicio_bancada + self.duracao).strftime('%H:%M')}\n"
            f"üî• Fog√£o: {fogao.nome} de {(fim_fogao - self.duracao).strftime('%H:%M')} at√© {fim_fogao.strftime('%H:%M')}."
        )

    def iniciar(self):
        if not self.alocada:
            logger.error(
                f"‚ùå Atividade {self.id} n√£o alocada ainda. N√£o √© poss√≠vel iniciar."
            )
            raise Exception(f"‚ùå Atividade ID {self.id} n√£o alocada ainda.")

        logger.info(
            f"üöÄ Atividade {self.id} iniciada oficialmente "
            f"na bancada {self.bancada_alocada.nome} e fog√£o {self.fogao_alocado.nome} "
            f"√†s {self.inicio_real.strftime('%H:%M')}."
        )
        print(
            f"üöÄ Atividade {self.id} iniciada √†s {self.inicio_real.strftime('%H:%M')} "
            f"na bancada {self.bancada_alocada.nome} e fog√£o {self.fogao_alocado.nome}."
        )
