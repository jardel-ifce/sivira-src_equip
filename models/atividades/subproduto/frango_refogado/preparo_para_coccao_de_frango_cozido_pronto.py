from datetime import timedelta
from models.atividade_base import Atividade
from enums.tipo_equipamento import TipoEquipamento
from utils.logger_factory import setup_logger


# üî• Logger espec√≠fico para essa atividade
logger = setup_logger('Atividade_Preparo_Coccao_Frango_Cozido')


class PreparoParaCoccaoDeFrangoCozidoPronto(Atividade):
    """
    üç≥ Atividade de preparo para coc√ß√£o de frango cozido pronto.
    ‚úÖ Equipamento:
    - Bancada (ocupa√ß√£o fracionada, permite sobreposi√ß√£o).
    """

    @property
    def quantidade_por_tipo_equipamento(self):
        """
        Define os tipos de equipamentos necess√°rios.
        """
        return {
            TipoEquipamento.BANCADAS: 1,
        }

    def calcular_duracao(self):
        """
        Define a dura√ß√£o da atividade baseada na quantidade produzida.
        """
        q = self.quantidade_produto

        if 3000 <= q <= 20000:
            self.duracao = timedelta(minutes=8)
        elif 20001 <= q <= 40000:
            self.duracao = timedelta(minutes=16)
        elif 40001 <= q <= 60000:
            self.duracao = timedelta(minutes=24)
        else:
            raise ValueError(f"‚ùå Quantidade {q} inv√°lida para esta atividade.")

    def tentar_alocar_e_iniciar(
        self,
        gestor_bancadas,
        inicio_jornada,
        fim_jornada,
        porcoes_bancada: int = 2  # üî• N√∫mero de por√ß√µes da bancada
    ):
        """
        üî• Realiza o backward scheduling para bancada.
        """
        self.calcular_duracao()

        logger.info(
            f"üöÄ Iniciando tentativa de aloca√ß√£o da atividade '{self.id}' "
            f"(quantidade: {self.quantidade_produto}g) at√© {fim_jornada.strftime('%H:%M')}."
        )

        # üîπ Calcular janela backward
        fim = fim_jornada
        inicio = fim - self.duracao

        sucesso, bancada, inicio_real, fim_real = gestor_bancadas.alocar(
            inicio=inicio,
            fim=fim,
            atividade=self,
            porcoes=porcoes_bancada
        )

        if not sucesso:
            logger.error(
                f"‚ùå Falha na aloca√ß√£o da bancada para a atividade '{self.id}'."
            )
            return False

        # ‚úÖ Registrar aloca√ß√£o
        self.inicio_real = inicio_real
        self.fim_real = fim_real
        self.bancada_alocada = bancada
        self.alocada = True

        logger.info(
            f"‚úÖ Atividade '{self.id}' alocada com sucesso!\n"
            f"ü™µ Bancada: {bancada.nome} de {inicio_real.strftime('%H:%M')} at√© {fim_real.strftime('%H:%M')}"
        )

        return True

    def iniciar(self):
        """
        üü¢ Marca o in√≠cio da atividade.
        """
        logger.info(
            f"üöÄ Atividade {self.id} foi iniciada oficialmente "
            f"no hor√°rio {self.inicio_real.strftime('%H:%M')}."
        )
        print(
            f"üöÄ Atividade {self.id} iniciada √†s {self.inicio_real.strftime('%H:%M')}."
        )
