from datetime import timedelta, datetime
from models.atividade_base import Atividade
from enums.tipo_equipamento import TipoEquipamento
from utils.logger_factory import setup_logger

# üî• Logger espec√≠fico para esta atividade
logger = setup_logger('AtividadeCoccaoCremeDeCamarao')


class CoccaoDeCremeDeCamarao(Atividade):
    """
    üî•ü¶ê Atividade que representa a coc√ß√£o do creme de camar√£o.
    ‚úÖ Utiliza fog√µes, ocupando bocas de acordo com a quantidade de produto.
    """

    @property
    def quantidade_por_tipo_equipamento(self):
        return {
            TipoEquipamento.FOGOES: 1,
        }

    def calcular_duracao(self):
        """
        üìè Calcula a dura√ß√£o com base na quantidade de produto.
        """
        q = self.quantidade_produto

        if 3000 <= q <= 20000:
            self.duracao = timedelta(minutes=10)
        elif 20001 <= q <= 40000:
            self.duracao = timedelta(minutes=20)
        elif 40001 <= q <= 60000:
            self.duracao = timedelta(minutes=30)
        else:
            logger.error(
                f"‚ùå Quantidade {q} fora das faixas v√°lidas para coc√ß√£o do creme de camar√£o."
            )
            raise ValueError(
                f"‚ùå Quantidade {q} fora das faixas v√°lidas para coc√ß√£o do creme de camar√£o."
            )

        logger.info(
            f"üïí Dura√ß√£o calculada: {self.duracao} para {q}g de creme de camar√£o."
        )

    def tentar_alocar_e_iniciar(self, gestor_fogoes, inicio_janela: datetime, horario_limite: datetime) -> bool:
        """
        üî• Realiza backward scheduling com verifica√ß√£o de disponibilidade de bocas.
        """
        self.calcular_duracao()

        logger.info(
            f"üöÄ Tentando alocar coc√ß√£o ID {self.id} "
            f"(quantidade: {self.quantidade_produto}g | dura√ß√£o: {self.duracao}) "
            f"com deadline at√© {horario_limite.strftime('%H:%M')}.")

        sucesso, fogao, inicio_real, fim_real = gestor_fogoes.alocar(
            inicio=inicio_janela,
            fim=horario_limite,
            atividade=self
        )

        if not sucesso:
            logger.error(f"‚ùå Falha na aloca√ß√£o do fog√£o para a atividade {self.id}.")
            return False

        self._registrar_sucesso(fogao, inicio_real, fim_real)
        return True

    def _registrar_sucesso(self, fogao, inicio, fim):
        self.inicio_real = inicio
        self.fim_real = fim
        self.fogao_alocado = fogao
        self.equipamentos_selecionados = [fogao]
        self.alocada = True

        logger.info(
            f"‚úÖ Atividade {self.id} alocada no fog√£o {fogao.nome} "
            f"de {inicio.strftime('%H:%M')} at√© {fim.strftime('%H:%M')}."
        )
        print(
            f"‚úÖ Atividade {self.id} alocada no fog√£o {fogao.nome} "
            f"de {inicio.strftime('%H:%M')} at√© {fim.strftime('%H:%M')}."
        )

    def iniciar(self):
        """
        üü¢ Marca o in√≠cio da atividade de coc√ß√£o.
        """
        if not self.alocada:
            logger.error(
                f"‚ùå Atividade {self.id} n√£o alocada ainda. N√£o √© poss√≠vel iniciar."
            )
            raise Exception(f"‚ùå Atividade ID {self.id} n√£o alocada ainda.")

        logger.info(
            f"üöÄ Coc√ß√£o do creme de camar√£o iniciada no fog√£o {self.fogao_alocado.nome} "
            f"√†s {self.inicio_real.strftime('%H:%M')} at√© {self.fim_real.strftime('%H:%M')}"
        )
        print(
            f"üöÄ Atividade {self.id} iniciada no fog√£o {self.fogao_alocado.nome} "
            f"de {self.inicio_real.strftime('%H:%M')} at√© {self.fim_real.strftime('%H:%M')}"
        )
