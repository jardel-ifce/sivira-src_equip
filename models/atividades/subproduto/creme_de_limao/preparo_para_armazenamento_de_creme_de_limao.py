from datetime import timedelta
from models.atividade_base import Atividade
from enums.tipo_equipamento import TipoEquipamento
from utils.logger_factory import setup_logger


# üî• Logger espec√≠fico para essa atividade
logger = setup_logger('Atividade_Preparo_Armazenamento_Creme_Limao')


class PreparoParaArmazenamentoDeCremeDeLimao(Atividade):
    """
    üçã Atividade de preparo para armazenamento do creme de lim√£o.
    Equipamentos:
    - Bancada (fracionada, permite sobreposi√ß√£o).
    - Balan√ßa (ocupa√ß√£o exclusiva no tempo).
    """

    @property
    def quantidade_por_tipo_equipamento(self):
        """
        Define os tipos de equipamentos necess√°rios.
        """
        return {
            TipoEquipamento.BANCADAS: 1,
            TipoEquipamento.BALANCAS: 1,
        }

    def calcular_duracao(self):
        """
        Define a dura√ß√£o da atividade baseada na quantidade produzida.
        Faixas oficiais:
        - 3000‚Äì10000g  ‚Üí 3 minutos
        - 10001‚Äì20000g ‚Üí 5 minutos
        - 20001‚Äì30000g ‚Üí 7 minutos
        """
        q = self.quantidade_produto
        if 3000 <= q <= 10000:
            self.duracao = timedelta(minutes=3)
        elif 10001 <= q <= 20000:
            self.duracao = timedelta(minutes=5)
        elif 20001 <= q <= 30000:
            self.duracao = timedelta(minutes=7)
        else:
            raise ValueError(
                f"‚ùå Quantidade {q} inv√°lida para esta atividade."
            )

    def tentar_alocar_e_iniciar(
        self,
        gestor_bancadas,
        gestor_balancas,
        inicio_jornada,
        fim_jornada,
        porcoes_bancada: int = 2  # üî• N√∫mero de por√ß√µes da bancada
    ):
        """
        Realiza o backward scheduling:
        1Ô∏è‚É£ Aloca primeiro a balan√ßa (ocupa√ß√£o exclusiva no tempo).
        2Ô∏è‚É£ Depois aloca a bancada (ocupa√ß√£o fracionada e permite sobreposi√ß√£o).
        """
        self.calcular_duracao()

        logger.info(
            f"üöÄ Iniciando tentativa de aloca√ß√£o da atividade '{self.id}' "
            f"(quantidade: {self.quantidade_produto}g) at√© {fim_jornada.strftime('%H:%M')}."
        )

        # üîπ Aloca√ß√£o da balan√ßa (ocupa√ß√£o exclusiva no tempo)
        sucesso_balanca, balanca, inicio_balanca, fim_balanca = gestor_balancas.alocar(
            inicio=inicio_jornada,
            fim=fim_jornada,
            atividade=self,
            quantidade=self.quantidade_produto
        )

        if not sucesso_balanca:
            logger.error(f"‚ùå Falha na aloca√ß√£o da balan√ßa para a atividade '{self.id}'.")
            return False

        # üîπ Calcular janela da bancada (imediatamente antes da balan√ßa)
        fim_bancada = inicio_balanca
        inicio_bancada = fim_bancada - self.duracao

        sucesso_bancada, bancada, inicio_bancada_real, fim_bancada_real = gestor_bancadas.alocar(
            inicio=inicio_bancada,
            fim=fim_bancada,
            atividade=self,
            porcoes=porcoes_bancada
        )

        if not sucesso_bancada:
            # üî• Rollback da balan√ßa
            gestor_balancas.liberar(
                inicio=inicio_balanca,
                fim=fim_balanca,
                atividade_id=self.id
            )
            logger.error(f"‚ùå Falha na aloca√ß√£o da bancada para a atividade '{self.id}'.")
            return False

        # ‚úÖ Registrar aloca√ß√£o
        self.inicio_real = inicio_bancada_real
        self.fim_real = fim_balanca
        self.bancada_alocada = bancada
        self.balanca_alocada = balanca
        self.alocada = True

        logger.info(
            f"‚úÖ Atividade '{self.id}' alocada com sucesso!\n"
            f"ü™µ Bancada: {bancada.nome} de {inicio_bancada_real.strftime('%H:%M')} at√© {fim_bancada_real.strftime('%H:%M')}\n"
            f"‚öñÔ∏è Balan√ßa: {balanca.nome} de {inicio_balanca.strftime('%H:%M')} at√© {fim_balanca.strftime('%H:%M')}"
        )

        return True

    def iniciar(self):
        """
        üü¢ Marca o in√≠cio da atividade.
        """
        logger.info(
            f"üöÄ Atividade {self.id} ({self.descricao}) foi iniciada oficialmente "
            f"no hor√°rio {self.inicio_real.strftime('%H:%M')}."
        )
        print(
            f"üöÄ Atividade {self.id} ({self.descricao}) iniciada √†s {self.inicio_real.strftime('%H:%M')}."
        )
