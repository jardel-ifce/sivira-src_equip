from models.atividade_base import Atividade
from models.equips.bancada import Bancada
from models.equips.armario_esqueleto import ArmarioEsqueleto
from enums.tipo_equipamento import TipoEquipamento
from datetime import timedelta


class PreparoParaArmazenamentoDeMassaDeBoloDeChocolate(Atividade):
    """
    Atividade que representa o preparo para armazenamento de massa de bolo de chocolate.
    Utiliza bancada (ocupa√ß√£o fracionada) e arm√°rio esqueleto (n√≠veis de tela).
    """

    @property
    def quantidade_por_tipo_equipamento(self):
        return {
            TipoEquipamento.BANCADAS: 1,
            TipoEquipamento.ARMARIOS_PARA_FERMENTACAO: 1,
        }

    def calcular_duracao(self):
        """
        Define a dura√ß√£o da atividade.
        Tempo fixo de 20 minutos (exemplo ‚Äî ajuste conforme necess√°rio).
        """
        self.duracao = timedelta(minutes=20)  # üîß Ajuste conforme regra real

    def iniciar(self):
        """
        Realiza a ocupa√ß√£o dos equipamentos: bancada e arm√°rio esqueleto.
        """
        if not self.alocada:
            raise Exception("‚ùå Atividade n√£o alocada ainda.")

        bancada_alocada = None
        armario_alocado = None

        equipamentos_ordenados = sorted(
            self.equipamentos_selecionados,
            key=lambda e: self.fips_equipamentos.get(e, 999)
        )

        # Quantidade de n√≠veis necess√°rios no arm√°rio (1000g = 1 n√≠vel)
        niveis_necessarios = (self.quantidade_produto + 999) // 1000

        for equipamento in equipamentos_ordenados:
            # üëâ Ocupa√ß√£o da Bancada
            if isinstance(equipamento, Bancada) and bancada_alocada is None:
                sucesso = equipamento.ocupar(equipamento.capacidade_total)
                if sucesso:
                    bancada_alocada = equipamento
                    print(
                        f"ü™µ Bancada {equipamento.nome} ocupada na fra√ß√£o {equipamento.capacidade_total} "
                        f"para preparo da massa para armazenamento."
                    )
                else:
                    print(
                        f"‚ö†Ô∏è Bancada {equipamento.nome} n√£o dispon√≠vel. Buscando pr√≥xima..."
                    )

            # üëâ Ocupa√ß√£o do Arm√°rio Esqueleto
            if isinstance(equipamento, ArmarioEsqueleto) and armario_alocado is None:
                if niveis_necessarios < equipamento.nivel_tela_min:
                    raise Exception(
                        f"‚ùå A quantidade ({self.quantidade_produto}g) exige pelo menos "
                        f"{equipamento.nivel_tela_min} n√≠vel(s) no arm√°rio {equipamento.nome}."
                    )
                if niveis_necessarios > equipamento.nivel_tela_max:
                    raise Exception(
                        f"‚ùå A quantidade ({self.quantidade_produto}g) excede o limite m√°ximo de "
                        f"{equipamento.nivel_tela_max} n√≠veis no arm√°rio {equipamento.nome}."
                    )

                sucesso = equipamento.ocupar(self.quantidade_produto)
                if sucesso:
                    armario_alocado = equipamento
                    print(
                        f"ü•∂ Arm√°rio {equipamento.nome} ocupado com {niveis_necessarios} n√≠veis "
                        f"para armazenamento de {self.quantidade_produto}g de massa."
                    )
                else:
                    print(
                        f"‚ö†Ô∏è Arm√°rio {equipamento.nome} n√£o dispon√≠vel. Buscando pr√≥ximo..."
                    )

            if bancada_alocada and armario_alocado:
                print(
                    f"‚úÖ Preparo para armazenamento da massa de bolo de chocolate iniciado com "
                    f"Bancada {bancada_alocada.nome} e Arm√°rio {armario_alocado.nome}."
                )
                return True

        raise Exception(
            "‚ùå N√£o foi poss√≠vel alocar todos os equipamentos necess√°rios "
            "(Bancada e Arm√°rio Esqueleto)."
        )
