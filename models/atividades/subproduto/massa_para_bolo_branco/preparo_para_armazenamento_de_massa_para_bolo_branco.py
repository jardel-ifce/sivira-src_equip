from models.atividade_base import Atividade
from models.equips.bancada import Bancada
from models.equips.armario_esqueleto import ArmarioEsqueleto
from enums.tipo_equipamento import TipoEquipamento
from datetime import timedelta


class PreparoParaArmazenamentoDeMassasParaBoloBranco(Atividade):
    """
    Atividade que representa o preparo para armazenamento de massas para bolo branco.
    Utiliza uma bancada (ocupando uma fra√ß√£o) e um arm√°rio esqueleto 
    (seguindo a l√≥gica de 1000g = 1 n√≠vel de tela).
    """

    @property
    def quantidade_por_tipo_equipamento(self):
        return {
            TipoEquipamento.BANCADAS: 1,
            TipoEquipamento.ARMARIOS_PARA_FERMENTACAO: 1,
        }

    def calcular_duracao(self):
        """
        Define a dura√ß√£o da atividade. Neste caso, tempo fixo de 20 minutos.
        """
        self.duracao = timedelta(minutes=20)

    def iniciar(self):
        """
        Executa os m√©todos espec√≠ficos dos equipamentos selecionados,
        priorizando conforme o FIP dos equipamentos.
        """
        if not self.alocada:
            raise Exception("‚ùå Atividade n√£o alocada ainda.")

        bancada_alocada = None
        armario_alocado = None

        # Ordenar os equipamentos por FIP
        equipamentos_ordenados = sorted(
            self.equipamentos_selecionados,
            key=lambda e: self.fips_equipamentos.get(e, 999)
        )

        for equipamento in equipamentos_ordenados:
            # Ocupa√ß√£o da bancada
            if isinstance(equipamento, Bancada) and bancada_alocada is None:
                sucesso = equipamento.ocupar((1, 6))  # ‚úÖ Fra√ß√£o de ocupa√ß√£o (ajust√°vel se desejar)

                if sucesso:
                    bancada_alocada = equipamento
                    print(
                        f"üß∞ Bancada {equipamento.nome} ocupada para preparo de armazenamento "
                        f"na fra√ß√£o 1/6."
                    )
                else:
                    print(
                        f"‚ö†Ô∏è Bancada {equipamento.nome} n√£o dispon√≠vel. Buscando pr√≥xima..."
                    )

            # Ocupa√ß√£o do Arm√°rio Esqueleto (1000g = 1 n√≠vel)
            if isinstance(equipamento, ArmarioEsqueleto) and armario_alocado is None:
                sucesso = equipamento.ocupar(self.quantidade_produto)

                if sucesso:
                    armario_alocado = equipamento
                    print(
                        f"üì¶ Arm√°rio Esqueleto {equipamento.nome} ocupado com "
                        f"{self.quantidade_produto}g "
                        f"(equivalente a {(self.quantidade_produto + 999) // 1000} n√≠veis de tela)."
                    )
                else:
                    print(
                        f"‚ö†Ô∏è Arm√°rio Esqueleto {equipamento.nome} n√£o dispon√≠vel. Buscando pr√≥xima..."
                    )

            if bancada_alocada and armario_alocado:
                print(
                    f"‚úÖ Preparo para armazenamento de massas para bolo branco iniciado com "
                    f"Bancada {bancada_alocada.nome} e Arm√°rio {armario_alocado.nome}."
                )
                return True

        raise Exception(
            "‚ùå N√£o foi poss√≠vel alocar todos os equipamentos necess√°rios "
            "(Bancada e Arm√°rio Esqueleto)."
        )
