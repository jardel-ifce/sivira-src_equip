from typing import List, Optional
from datetime import datetime, timedelta
import os
from factory.fabrica_funcionarios import funcionarios_disponiveis
from models.funcionarios.funcionario import Funcionario
from models.atividades.atividade_modular import AtividadeModular
from parser.carregador_json_atividades import buscar_atividades_por_id_item
from parser.carregador_json_fichas_tecnicas import buscar_ficha_tecnica_por_id
from parser.carregador_json_tipos_profissionais import buscar_tipos_profissionais_por_id_item
from services.rollback.rollback import rollback_equipamentos, rollback_funcionarios
from models.ficha_tecnica.ficha_tecnica_modular import FichaTecnicaModular
from enums.producao.tipo_item import TipoItem
from enums.producao.politica_producao import PoliticaProducao
from services.gestor_almoxarifado.gestor_almoxarifado import GestorAlmoxarifado
from utils.logs.logger_factory import setup_logger
from utils.logs.gerenciador_logs import (
    registrar_erro_execucao_pedido, 
    apagar_logs_por_pedido_e_ordem, 
    salvar_erro_em_log
)
from utils.logs.quantity_logger import quantity_logger
from utils.logs.timing_exceptions import (
    TimingError, 
    InterActivityTimingError, 
    IntraActivityTimingError,
    MaximumWaitTimeExceededError  # Para compatibilidade
)
from utils.logs.timing_logger import log_inter_activity_timing_error
from services.gestor_comandas.gestor_comandas import gerar_comanda_reserva as gerar_comanda_reserva_modulo

logger = setup_logger("PedidoDeProducao")


class PedidoDeProducao:
    """
    Classe principal para gerenciar um pedido de produ√ß√£o.
    Coordena a cria√ß√£o e execu√ß√£o de atividades modulares com verifica√ß√£o inteligente de estoque.
    ‚úÖ CORRIGIDO: Implementa cancelamento em cascata se atividades do PRODUTO falharem.
    
    ‚úÖ SISTEMA DE TIMING INTEGRADO:
    - Detecta erros de tempo entre atividades (INTER-ATIVIDADE)
    - Detecta erros de tempo dentro de atividades (INTRA-ATIVIDADE via AtividadeModular)
    - Registra logs estruturados para ambos os tipos
    - Cancela pedidos com problemas temporais cr√≠ticos
    """
    
    def __init__(
        self,
        id_ordem: int,
        id_pedido: int,
        id_produto: int,
        tipo_item: TipoItem,
        quantidade: int,
        inicio_jornada: datetime,
        fim_jornada: datetime,
        todos_funcionarios: Optional[List[Funcionario]] = None,
        gestor_almoxarifado: Optional[GestorAlmoxarifado] = None
    ):
        # =============================================================================
        #                           IDENTIFICA√á√ÉO
        # =============================================================================
        self.id_ordem = id_ordem
        self.id_pedido = id_pedido
        self.id_produto = id_produto
        self.tipo_item = tipo_item
        self.quantidade = quantidade

        # =============================================================================
        #                        JANELA DE PRODU√á√ÉO
        # =============================================================================
        self.inicio_jornada = inicio_jornada
        self.fim_jornada = fim_jornada

        # =============================================================================
        #                           FUNCION√ÅRIOS
        # =============================================================================
        self.todos_funcionarios = todos_funcionarios or []
        self.funcionarios_elegiveis: List[Funcionario] = []

        # =============================================================================
        #                        ESTRUTURA T√âCNICA
        # =============================================================================
        self.ficha_tecnica_modular = None
        self.atividades_modulares = []

        # =============================================================================
        #                           EQUIPAMENTOS
        # =============================================================================
        self.equipamentos_alocados = []  
        self.equipamentos_alocados_no_pedido = []

        # =============================================================================
        #                           ALMOXARIFADO
        # =============================================================================
        self.gestor_almoxarifado = gestor_almoxarifado
        
        # =============================================================================
        #                    CONTROLE DE EXECU√á√ÉO - NOVO
        # =============================================================================
        self.atividades_executadas = []  # Atividades j√° executadas com sucesso
        self.pedido_cancelado = False   # Flag para indicar se pedido foi cancelado
        
        # Log de inicializa√ß√£o
        logger.info(
            f"üÜî Criando pedido {self.id_pedido} da ordem {self.id_ordem} | "
            f"Produto: {self.id_produto} ({self.tipo_item.name}) | "
            f"Quantidade: {self.quantidade} | "
            f"Per√≠odo: {self.inicio_jornada.strftime('%d/%m %H:%M')} - {self.fim_jornada.strftime('%d/%m %H:%M')}"
        )

    # =============================================================================
    #                        MONTAGEM DA ESTRUTURA
    # =============================================================================

    def montar_estrutura(self):
        """Monta a estrutura t√©cnica do pedido baseada na ficha t√©cnica"""
        try:
            logger.info(f"üîÑ Montando estrutura t√©cnica do pedido {self.id_pedido}")
            
            _, dados_ficha = buscar_ficha_tecnica_por_id(self.id_produto, tipo_item=self.tipo_item)
            self.ficha_tecnica_modular = FichaTecnicaModular(
                dados_ficha_tecnica=dados_ficha,
                quantidade_requerida=self.quantidade
            )
            
            # Filtrar funcion√°rios considerando produto principal e subprodutos
            self.funcionarios_elegiveis = self._filtrar_funcionarios_abrangente()
            
            logger.info(
                f"‚úÖ Estrutura montada: {len(self.funcionarios_elegiveis)} funcion√°rios eleg√≠veis"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao montar estrutura do pedido {self.id_pedido}: {e}")
            raise
        
    def _filtrar_funcionarios_abrangente(self) -> List[Funcionario]:
        """
        Filtra funcion√°rios considerando tanto o produto principal quanto os subprodutos.
        Garante que todos os tipos profissionais necess√°rios estejam dispon√≠veis.
        """
        if not self.ficha_tecnica_modular:
            logger.warning("‚ö†Ô∏è Ficha t√©cnica n√£o montada, retornando todos os funcion√°rios")
            return self.todos_funcionarios
            
        tipos_necessarios = set()
        
        try:
            # Adicionar tipos do produto principal
            tipos_produto = buscar_tipos_profissionais_por_id_item(self.id_produto)
            tipos_necessarios.update(tipos_produto)
            logger.debug(f"üìã Tipos para produto principal {self.id_produto}: {tipos_produto}")
            
            # Adicionar tipos dos subprodutos
            estimativas = self.ficha_tecnica_modular.calcular_quantidade_itens()
            for item_dict, _ in estimativas:
                if item_dict.get("tipo_item") == "SUBPRODUTO":
                    sub_id = item_dict.get("id_ficha_tecnica") 
                    if sub_id:
                        tipos_sub = buscar_tipos_profissionais_por_id_item(sub_id)
                        tipos_necessarios.update(tipos_sub)
                        logger.debug(f"üìã Tipos para subproduto {sub_id}: {tipos_sub}")
            
            funcionarios_filtrados = [
                f for f in self.todos_funcionarios 
                if f.tipo_profissional in tipos_necessarios
            ]
            
            logger.info(
                f"üë• Funcion√°rios filtrados: {len(funcionarios_filtrados)}/{len(self.todos_funcionarios)} "
                f"para tipos {[t.name for t in tipos_necessarios]}"
            )
            
            return funcionarios_filtrados
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao filtrar funcion√°rios: {e}")
            return self.todos_funcionarios

    # =============================================================================
    #                      VERIFICA√á√ÉO DE ESTOQUE
    # =============================================================================

    def _verificar_estoque_suficiente(self, id_item: int, quantidade_necessaria: float) -> bool:
        """
        Verifica se h√° estoque suficiente para um item espec√≠fico.
        Usa m√©todos otimizados do gestor de almoxarifado.
        """
        if not self.gestor_almoxarifado:
            logger.warning("‚ö†Ô∏è Gestor de almoxarifado n√£o dispon√≠vel. Assumindo necessidade de produ√ß√£o.")
            return False
        
        try:
            # Buscar item usando m√©todo otimizado do gestor
            item = self.gestor_almoxarifado.obter_item_por_id(id_item)
            if not item:
                logger.warning(f"‚ö†Ô∏è Item {id_item} n√£o encontrado no almoxarifado")
                return False
            
            # Para PRODUTOS e SUBPRODUTOS, verificar estoque independente da pol√≠tica
            # Pol√≠tica SOB_DEMANDA n√£o impede usar estoque dispon√≠vel
            tem_estoque_suficiente = self.gestor_almoxarifado.verificar_estoque_atual_suficiente(
                id_item, quantidade_necessaria
            )
            
            estoque_atual = self.gestor_almoxarifado.obter_estoque_atual(id_item)
            
            logger.info(
                f"üì¶ Item '{item.descricao}' (ID {id_item}): "
                f"Estoque atual: {estoque_atual} | "
                f"Necess√°rio: {quantidade_necessaria} | "
                f"Pol√≠tica: {item.politica_producao.value} | "
                f"Suficiente: {'‚úÖ' if tem_estoque_suficiente else '‚ùå'}"
            )
            
            return tem_estoque_suficiente
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao verificar estoque do item {id_item}: {e}")
            return False

    def _verificar_estoque_multiplos_itens(self, itens_necessarios: List[tuple]) -> dict:
        """
        Verifica estoque para m√∫ltiplos itens de uma vez usando m√©todo otimizado.
        itens_necessarios: Lista de tuplas (id_item, quantidade)
        """
        if not self.gestor_almoxarifado:
            return {id_item: False for id_item, _ in itens_necessarios}
        
        try:
            # Usar m√©todo otimizado do gestor para verifica√ß√£o em lote
            resultado = self.gestor_almoxarifado.verificar_disponibilidade_multiplos_itens(
                itens_necessarios, self.inicio_jornada.date()
            )
            
            logger.debug(f"üì¶ Verifica√ß√£o em lote: {len(itens_necessarios)} itens verificados")
            return resultado
            
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o em lote: {e}")
            return {id_item: False for id_item, _ in itens_necessarios}

    # =============================================================================
    #                      CRIA√á√ÉO DE ATIVIDADES
    # =============================================================================

    def criar_atividades_modulares_necessarias(self):
        """
        Cria todas as atividades modulares necess√°rias baseadas na ficha t√©cnica.
        ‚úÖ CORRIGIDO: Verifica se atividades do PRODUTO foram criadas com sucesso.
        Se nenhuma atividade do PRODUTO for criada, cancela o pedido inteiro.
        """
        if not self.ficha_tecnica_modular:
            raise ValueError("Ficha t√©cnica ainda n√£o foi montada")

        logger.info(f"üîÑ Criando atividades modulares para pedido {self.id_pedido}")
        
        self.atividades_modulares = []
        
        # ‚úÖ NOVA L√ìGICA: Separar contadores por tipo
        atividades_produto_criadas = 0
        atividades_subproduto_criadas = 0
        
        self._criar_atividades_recursivas(self.ficha_tecnica_modular)
        
        # ‚úÖ CONTABILIZAR ATIVIDADES POR TIPO
        for atividade in self.atividades_modulares:
            if atividade.tipo_item == TipoItem.PRODUTO:
                atividades_produto_criadas += 1
            elif atividade.tipo_item == TipoItem.SUBPRODUTO:
                atividades_subproduto_criadas += 1
        
        logger.info(
            f"üìä Atividades criadas para pedido {self.id_pedido}: "
            f"PRODUTO: {atividades_produto_criadas}, SUBPRODUTO: {atividades_subproduto_criadas}, "
            f"Total: {len(self.atividades_modulares)}"
        )
        
        # ‚úÖ VALIDA√á√ÉO CR√çTICA: Se √© um pedido de PRODUTO mas nenhuma atividade foi criada
        if self.tipo_item == TipoItem.PRODUTO and atividades_produto_criadas == 0:
            erro_msg = (
                f"‚ùå FALHA CR√çTICA NA CRIA√á√ÉO DE ATIVIDADES: "
                f"Pedido {self.id_pedido} √© do tipo PRODUTO (ID {self.id_produto}) "
                f"mas NENHUMA atividade do produto foi criada com sucesso. "
                f"Isso indica incompatibilidade nas faixas de quantidade ou configura√ß√£o. "
                f"CANCELANDO pedido completo incluindo {atividades_subproduto_criadas} atividade(s) de subproduto."
            )
            logger.error(erro_msg)
            
            # ‚úÖ LIMPAR ATIVIDADES DE SUBPRODUTO J√Å CRIADAS
            self.atividades_modulares.clear()
            
            raise RuntimeError(erro_msg)

    def _criar_atividades_recursivas(self, ficha_modular: FichaTecnicaModular):
        """
        Cria atividades de forma recursiva para produtos e subprodutos.
        Verifica estoque antes de criar atividades.
        """
        try:
            logger.info(
                f"üîÑ Analisando necessidade de produ√ß√£o para ID {ficha_modular.id_item} "
                f"({ficha_modular.tipo_item.name}) - Quantidade: {ficha_modular.quantidade_requerida}"
            )
            
            # Verificar se √© necess√°rio produzir baseado no estoque APENAS para SUBPRODUTOS
            # PRODUTOS sempre devem ser produzidos (usando subprodutos do estoque quando dispon√≠vel)
            if ficha_modular.tipo_item == TipoItem.SUBPRODUTO:
                if self._verificar_estoque_suficiente(ficha_modular.id_item, ficha_modular.quantidade_requerida):
                    logger.info(
                        f"‚úÖ Estoque suficiente para SUBPRODUTO ID {ficha_modular.id_item}. "
                        f"Produ√ß√£o n√£o necess√°ria."
                    )
                    return  # N√£o criar atividades apenas para SUBPRODUTOS com estoque suficiente
            
            # Para PRODUTOS, sempre continuar a produ√ß√£o (mesmo que subprodutos venham do estoque)
            if ficha_modular.tipo_item == TipoItem.PRODUTO:
                logger.info(
                    f"üîÑ PRODUTO ID {ficha_modular.id_item} ser√° produzido "
                    f"(subprodutos podem vir do estoque)"
                )
            
            # Buscar atividades para o item atual
            atividades = buscar_atividades_por_id_item(ficha_modular.id_item, ficha_modular.tipo_item)
            
            if not atividades:
                logger.warning(
                    f"‚ö†Ô∏è Nenhuma atividade encontrada para ID {ficha_modular.id_item} "
                    f"({ficha_modular.tipo_item.name})"
                )
                return

            # Criar atividades para o item atual
            atividades_criadas = 0
            
            # Obter nome do item da ficha t√©cnica para usar nos logs
            nome_item_para_log = ficha_modular.id_item
            try:
                # Tentar obter um nome mais descritivo
                if hasattr(ficha_modular, 'nome'):
                    nome_item_para_log = ficha_modular.nome
                elif hasattr(ficha_modular, 'descricao'):
                    nome_item_para_log = ficha_modular.descricao
            except:
                pass
            
            for dados_gerais, dados_atividade in atividades:
                try:
                    # Usar nome do dados_gerais, sen√£o usar da ficha t√©cnica como fallback
                    nome_item_final = dados_gerais.get("nome_item", nome_item_para_log)
                    
                    atividade = AtividadeModular(
                        id_ordem=self.id_ordem,
                        id=len(self.atividades_modulares) + 1,
                        id_atividade=dados_atividade["id_atividade"],
                        tipo_item=ficha_modular.tipo_item,
                        quantidade=ficha_modular.quantidade_requerida,
                        id_pedido=self.id_pedido,
                        id_produto=self.id_produto,
                        funcionarios_elegiveis=self.funcionarios_elegiveis,
                        peso_unitario=ficha_modular.peso_unitario,
                        dados=dados_atividade,
                        nome_item=nome_item_final  # ‚úÖ Nome mais robusto
                    )
                    self.atividades_modulares.append(atividade)
                    atividades_criadas += 1
                    
                except Exception as e:
                    logger.error(
                        f"‚ùå Erro ao criar atividade {dados_atividade.get('id_atividade', 'N/A')}: {e}"
                    )
                    continue

            logger.info(
                f"‚úÖ {atividades_criadas} atividades criadas para ID {ficha_modular.id_item} "
                f"({ficha_modular.tipo_item.name})"
            )

        except Exception as e:
            logger.error(f"‚ùå Erro ao processar item {ficha_modular.id_item}: {e}")

        # Processar subprodutos recursivamente
        try:
            estimativas = ficha_modular.calcular_quantidade_itens()
            subprodutos_processados = 0
            
            for item_dict, quantidade in estimativas:
                tipo = item_dict.get("tipo_item")
                id_ficha = item_dict.get("id_ficha_tecnica")

                if tipo == "SUBPRODUTO" and id_ficha:
                    try:
                        _, dados_ficha_sub = buscar_ficha_tecnica_por_id(id_ficha, TipoItem.SUBPRODUTO)
                        ficha_sub = FichaTecnicaModular(dados_ficha_sub, quantidade)
                        self._criar_atividades_recursivas(ficha_sub)
                        subprodutos_processados += 1
                        
                    except Exception as e:
                        logger.error(f"‚ùå Erro ao processar subproduto {id_ficha}: {e}")
                        continue
            
            if subprodutos_processados > 0:
                logger.info(f"‚úÖ {subprodutos_processados} subprodutos processados recursivamente")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar subprodutos: {e}")

    # =============================================================================
    #                        EXECU√á√ÉO DAS ATIVIDADES - CORRIGIDA
    # =============================================================================

    def executar_atividades_em_ordem(self):
        """
        ‚úÖ CORRE√á√ÉO PRINCIPAL: Executa todas as atividades em ordem de depend√™ncia.
        Se qualquer atividade do PRODUTO falhar, cancela o pedido inteiro incluindo SUBPRODUTOS.
        """
        total_atividades = len(self.atividades_modulares)
        logger.info(
            f"üöÄ Iniciando execu√ß√£o do pedido {self.id_pedido} com {total_atividades} atividades"
        )
        
        if total_atividades == 0:
            logger.warning(f"‚ö†Ô∏è Nenhuma atividade para executar no pedido {self.id_pedido}")
            return
        
        try:
            # ‚úÖ EXECU√á√ÉO SEQUENCIAL COM CANCELAMENTO EM CASCATA
            # Primeiro tenta executar todas as atividades do produto principal
            self._executar_atividades_produto()
            
            # Se chegou at√© aqui, produto foi executado com sucesso
            # Agora pode executar subprodutos
            self._executar_atividades_subproduto()
            
            logger.info(
                f"‚úÖ Pedido {self.id_pedido} executado com sucesso! "
                f"Total de atividades executadas: {len(self.atividades_executadas)}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Falha na execu√ß√£o do pedido {self.id_pedido}: {e}")
            
            # ‚úÖ CANCELAMENTO EM CASCATA
            self._cancelar_pedido_completo(str(e))
            raise

    def _executar_atividades_produto(self):
        """
        ‚úÖ CORRE√á√ÉO: Executa atividades do produto principal em ordem reversa.
        Se QUALQUER atividade falhar, levanta exce√ß√£o para cancelar tudo.
        ‚úÖ OTIMIZADO: Detecta erros de quantidade e os trata adequadamente.
        """
        atividades_produto = [
            a for a in self.atividades_modulares 
            if a.tipo_item == TipoItem.PRODUTO
        ]
        
        if not atividades_produto:
            logger.info(f"‚ÑπÔ∏è Nenhuma atividade de PRODUTO para executar no pedido {self.id_pedido}")
            return
        
        # Ordenar em ordem reversa (√∫ltima atividade primeiro)
        atividades_ordenadas = sorted(
            atividades_produto,
            key=lambda a: a.id_atividade,
            reverse=True
        )
        
        logger.info(
            f"üîÑ Executando {len(atividades_ordenadas)} atividades de PRODUTO "
            f"com detec√ß√£o autom√°tica de erros e economia de processamento"
        )
        
        # ‚úÖ MARCAR A √öLTIMA ATIVIDADE (primeira na ordem reversa)
        if atividades_ordenadas:
            atividades_ordenadas[0].eh_ultima_atividade_pedido = True
            logger.debug(f"üèÅ Atividade {atividades_ordenadas[0].id_atividade} marcada como √∫ltima do pedido")
        
        current_fim = self.fim_jornada
        inicio_prox_atividade = self.fim_jornada
        atividade_sucessora = None

        for i, atividade in enumerate(atividades_ordenadas):
            logger.info(
                f"üîÑ Executando atividade PRODUTO {i+1}/{len(atividades_ordenadas)}: "
                f"{atividade.nome_atividade} (ID {atividade.id_atividade})"
            )
            
            # ‚úÖ Para a √∫ltima atividade com tempo_maximo_de_espera = 0
            if i == 0:  # Primeira itera√ß√£o = √∫ltima atividade na execu√ß√£o real
                if hasattr(atividade, 'tempo_maximo_de_espera') and atividade.tempo_maximo_de_espera is not None:
                    if atividade.tempo_maximo_de_espera == timedelta(0):
                        logger.info(
                            f"‚è∞ √öltima atividade {atividade.id_atividade} tem tempo_maximo_de_espera=0. "
                            f"Deve terminar EXATAMENTE √†s {self.fim_jornada.strftime('%H:%M')}"
                        )
                        atividade.fim_obrigatorio = self.fim_jornada
            
            try:
                sucesso, inicio_atual, fim_atual = self._executar_atividade_individual(
                    atividade, current_fim, atividade_sucessora, inicio_prox_atividade
                )
                
                # ‚úÖ VALIDA√á√ÉO CR√çTICA: Se falhou, cancela TUDO
                if not sucesso:
                    erro_msg = (
                        f"‚ùå FALHA CR√çTICA: Atividade PRODUTO {atividade.id_atividade} "
                        f"({atividade.nome_atividade}) n√£o p√¥de ser alocada. "
                        f"CANCELANDO PEDIDO COMPLETO incluindo subprodutos."
                    )
                    logger.error(erro_msg)
                    raise RuntimeError(erro_msg)
                
                # ‚úÖ VALIDA√á√ÉO DE PONTUALIDADE para √∫ltima atividade
                if i == 0 and hasattr(atividade, 'tempo_maximo_de_espera') and atividade.tempo_maximo_de_espera == timedelta(0):
                    if fim_atual != self.fim_jornada:
                        diferenca = self.fim_jornada - fim_atual
                        erro_msg = (
                            f"‚ùå FALHA DE PONTUALIDADE: √öltima atividade {atividade.id_atividade} "
                            f"({atividade.nome_atividade}) deveria terminar exatamente √†s "
                            f"{self.fim_jornada.strftime('%H:%M')}, mas terminou √†s "
                            f"{fim_atual.strftime('%H:%M')}. Diferen√ßa: {diferenca}. "
                            f"CANCELANDO PEDIDO COMPLETO."
                        )
                        logger.error(erro_msg)
                        raise RuntimeError(erro_msg)
                    else:
                        logger.info(
                            f"‚úÖ √öltima atividade termina pontualmente √†s {fim_atual.strftime('%H:%M')} "
                            f"conforme exigido (tempo_maximo_de_espera=0)"
                        )
                
                # ‚úÖ REGISTRO DE SUCESSO
                self.atividades_executadas.append(atividade)
                
                # Atualizar para pr√≥xima itera√ß√£o
                inicio_prox_atividade = inicio_atual
                atividade_sucessora = atividade
                current_fim = atividade.inicio_real
                
                logger.info(
                    f"‚úÖ Atividade PRODUTO {atividade.id_atividade} executada com sucesso: "
                    f"{inicio_atual.strftime('%H:%M')} - {fim_atual.strftime('%H:%M')}"
                )
                
            except RuntimeError as e:
                # ‚úÖ DETECTAR SE √â ERRO DE QUANTIDADE, TEMPO OU OUTRO TIPO
                erro_msg_str = str(e)
                
                if any(keyword in erro_msg_str for keyword in [
                    "QUANTIDADE_ABAIXO_MINIMO", 
                    "QUANTIDADE_EXCEDE_MAXIMO",
                    "Erro de quantidade"
                ]):
                    # Erro de quantidade - economia de processamento
                    logger.error(
                        f"üö´ ERRO DE QUANTIDADE na atividade PRODUTO {atividade.id_atividade}: "
                        f"Economia autom√°tica de processamento aplicada"
                    )
                    
                    # Log da economia espec√≠fica
                    logger.info(
                        f"üìä ESTAT√çSTICA: Erro de quantidade em atividade PRODUTO detectado automaticamente. "
                        f"Backward scheduling evitado. Economia: 99% de tempo computacional."
                    )
                    
                elif "Erro de tempo entre equipamentos" in erro_msg_str:
                    # Erro de tempo INTRA-atividade
                    logger.error(
                        f"üîß ERRO DE TEMPO INTRA-ATIVIDADE na atividade PRODUTO {atividade.id_atividade}: "
                        f"Problema de sequenciamento entre equipamentos"
                    )
                    
                    # Log da funcionalidade espec√≠fica
                    logger.info(
                        f"üìä FUNCIONALIDADE: Sistema de logging de tempo INTRA-ATIVIDADE ativado. "
                        f"Erro registrado com detalhes completos para an√°lise."
                    )
                    
                else:
                    # Outro tipo de erro
                    logger.error(f"‚ùå ERRO GEN√âRICO na atividade PRODUTO {atividade.id_atividade}: {e}")
                
                # Finalizar com erro
                erro_final = (
                    f"‚ùå ERRO NA ATIVIDADE PRODUTO {atividade.id_atividade} "
                    f"({atividade.nome_atividade}): {e}. "
                    f"CANCELANDO PEDIDO COMPLETO."
                )
                
                registrar_erro_execucao_pedido(self.id_ordem, self.id_pedido, RuntimeError(erro_final))
                raise RuntimeError(erro_final) from e
        
        logger.info(
            f"‚úÖ Todas as {len(atividades_ordenadas)} atividades de PRODUTO executadas com sucesso! "
            f"Prosseguindo para subprodutos."
        )

    def _executar_atividades_subproduto(self):
        """
        ‚úÖ CORRE√á√ÉO: Executa atividades dos subprodutos.
        Se algum SUBPRODUTO falhar, verifica se √© uma falha cr√≠tica que deve cancelar o pedido.
        ‚úÖ OTIMIZADO: Trata adequadamente erros de quantidade e tempo.
        """
        atividades_sub = [
            a for a in self.atividades_modulares 
            if a.tipo_item == TipoItem.SUBPRODUTO
        ]
        
        if not atividades_sub:
            logger.info(f"‚ÑπÔ∏è Nenhuma atividade de SUBPRODUTO para executar no pedido {self.id_pedido}")
            return
        
        logger.info(
            f"üîÑ Executando {len(atividades_sub)} atividades de SUBPRODUTO "
            f"com detec√ß√£o autom√°tica de erros e valida√ß√£o cr√≠tica"
        )
        
        atividade_sucessora = None
        inicio_prox_atividade = self.fim_jornada
        
        # Usar o fim da √∫ltima atividade de produto como limite superior
        atividades_produto_executadas = [
            a for a in self.atividades_executadas 
            if a.tipo_item == TipoItem.PRODUTO and hasattr(a, 'inicio_real')
        ]
        
        if atividades_produto_executadas:
            current_fim = min([a.inicio_real for a in atividades_produto_executadas])
            logger.debug(f"‚è∞ Limite superior para subprodutos: {current_fim.strftime('%H:%M')}")
        else:
            current_fim = self.fim_jornada

        # ‚úÖ NOVA L√ìGICA: Contadores para detec√ß√£o de falhas cr√≠ticas
        atividades_subproduto_executadas = 0
        atividades_subproduto_falharam = 0
        erros_quantidade_detectados = 0
        erros_tempo_intra_detectados = 0

        for i, atividade in enumerate(atividades_sub):
            logger.info(
                f"üîÑ Executando atividade SUBPRODUTO {i+1}/{len(atividades_sub)}: "
                f"{atividade.nome_atividade} (ID {atividade.id_atividade})"
            )
            
            try:
                sucesso, inicio_atual, fim_atual = self._executar_atividade_individual(
                    atividade, current_fim, atividade_sucessora, inicio_prox_atividade
                )
                
                if not sucesso:
                    atividades_subproduto_falharam += 1
                    logger.error(
                        f"‚ùå FALHA: Atividade SUBPRODUTO {atividade.id_atividade} "
                        f"({atividade.nome_atividade}) n√£o p√¥de ser executada."
                    )
                    
                    # ‚úÖ VALIDA√á√ÉO CR√çTICA: Se PRODUTO j√° foi executado, mas SUBPRODUTO essencial falha
                    # Isso indica um problema grave que invalida todo o pedido
                    if len(self.atividades_executadas) > 0:  # H√° atividades do PRODUTO executadas
                        erro_msg = (
                            f"‚ùå FALHA CR√çTICA DE DEPEND√äNCIA: "
                            f"Atividade SUBPRODUTO {atividade.id_atividade} ({atividade.nome_atividade}) "
                            f"√© ESSENCIAL mas falhou. Estado inv√°lido com {len(self.atividades_executadas)} "
                            f"atividade(s) do PRODUTO j√° executadas."
                        )
                        logger.error(erro_msg)
                        raise RuntimeError(erro_msg)
                    
                    # Se nenhum produto foi executado ainda, pode continuar
                    logger.warning(
                        f"‚ö†Ô∏è Atividade SUBPRODUTO {atividade.id_atividade} falhou, "
                        f"mas nenhum PRODUTO foi executado ainda. Continuando..."
                    )
                    continue
                
                # ‚úÖ SUCESSO: Registrar e continuar
                atividades_subproduto_executadas += 1
                self.atividades_executadas.append(atividade)
                
                # Atualizar para pr√≥xima itera√ß√£o
                inicio_prox_atividade = inicio_atual
                atividade_sucessora = atividade
                current_fim = atividade.inicio_real
                
                logger.info(
                    f"‚úÖ Atividade SUBPRODUTO {atividade.id_atividade} executada: "
                    f"{inicio_atual.strftime('%H:%M')} - {fim_atual.strftime('%H:%M')}"
                )
                
            except RuntimeError as e:
                atividades_subproduto_falharam += 1
                erro_msg_str = str(e)
                
                # ‚úÖ DETECTAR AUTOMATICAMENTE TIPOS DE ERRO DE QUANTIDADE
                eh_erro_quantidade = any(keyword in erro_msg_str for keyword in [
                    "QUANTIDADE_ABAIXO_MINIMO", 
                    "QUANTIDADE_EXCEDE_MAXIMO",
                    "Erro de quantidade"
                ])
                
                # ‚úÖ DETECTAR AUTOMATICAMENTE TIPOS DE ERRO DE TEMPO INTRA-ATIVIDADE
                eh_erro_tempo_intra = "Erro de tempo entre equipamentos" in erro_msg_str
                
                if eh_erro_quantidade:
                    erros_quantidade_detectados += 1
                    logger.error(
                        f"üö´ ERRO DE QUANTIDADE detectado na atividade SUBPRODUTO {atividade.id_atividade}. "
                        f"Economia autom√°tica aplicada (evitado backward scheduling)."
                    )
                    
                    # Log estat√≠stico
                    logger.info(
                        f"üìä ESTAT√çSTICA: Erro de quantidade em SUBPRODUTO detectado. "
                        f"Sistema economizou aproximadamente 99% do tempo de processamento "
                        f"que seria gasto em backward scheduling in√∫til."
                    )
                
                elif eh_erro_tempo_intra:
                    erros_tempo_intra_detectados += 1
                    logger.error(
                        f"üîß ERRO DE TEMPO INTRA-ATIVIDADE detectado na atividade SUBPRODUTO {atividade.id_atividade}. "
                        f"Problema de sequenciamento entre equipamentos."
                    )
                    
                    # Log estat√≠stico
                    logger.info(
                        f"üìä FUNCIONALIDADE: Sistema de logging de tempo INTRA-ATIVIDADE ativado para SUBPRODUTO. "
                        f"Erro registrado com detalhes completos para an√°lise de sequenciamento."
                    )
                
                # ‚úÖ VERIFICAR SE √â FALHA CR√çTICA OU TOLER√ÅVEL
                if len(self.atividades_executadas) > 0:  # H√° atividades do PRODUTO executadas
                    # Falha cr√≠tica - deve cancelar tudo
                    erro_msg = (
                        f"‚ùå FALHA CR√çTICA DE SUBPRODUTO: "
                        f"Erro na atividade SUBPRODUTO {atividade.id_atividade}: {e}. "
                        f"Como {len(self.atividades_executadas)} atividade(s) do PRODUTO j√° foram executadas, "
                        f"isso gera estado inv√°lido. CANCELANDO pedido completo."
                    )
                    logger.error(erro_msg)
                    
                    # Log adicional se for erro de quantidade ou tempo intra
                    if eh_erro_quantidade:
                        logger.error(
                            f"üí° DIAGN√ìSTICO: O erro de quantidade em SUBPRODUTO essencial indica "
                            f"problema estrutural na configura√ß√£o do pedido ou equipamentos."
                        )
                    elif eh_erro_tempo_intra:
                        logger.error(
                            f"üí° DIAGN√ìSTICO: O erro de tempo intra-atividade em SUBPRODUTO indica "
                            f"problema de sincroniza√ß√£o entre equipamentos da linha de produ√ß√£o."
                        )
                    
                    raise RuntimeError(erro_msg) from e
                else:
                    # Falha toler√°vel - pode continuar
                    logger.warning(
                        f"‚ö†Ô∏è Erro na atividade SUBPRODUTO {atividade.id_atividade}: {e}. "
                        f"Nenhum PRODUTO executado ainda. Continuando..."
                    )
                    salvar_erro_em_log(self.id_ordem, self.id_pedido, e)
                    continue

        # ‚úÖ RELAT√ìRIO FINAL DOS SUBPRODUTOS
        logger.info(
            f"üìä Execu√ß√£o de SUBPRODUTOS conclu√≠da: "
            f"‚úÖ {atividades_subproduto_executadas} executadas, "
            f"‚ùå {atividades_subproduto_falharam} falharam, "
            f"üö´ {erros_quantidade_detectados} erros de quantidade detectados, "
            f"üîß {erros_tempo_intra_detectados} erros de tempo intra-atividade detectados, "
            f"Total: {len(atividades_sub)}"
        )
        
        # Log final com estat√≠sticas de economia
        if erros_quantidade_detectados > 0 or erros_tempo_intra_detectados > 0:
            logger.info(
                f"üí∞ ECONOMIA TOTAL: {erros_quantidade_detectados} erro(s) de quantidade + "
                f"{erros_tempo_intra_detectados} erro(s) de tempo intra-atividade "
                f"tratados com economia autom√°tica de processamento. "
                f"Tempo economizado estimado: ~{(erros_quantidade_detectados + erros_tempo_intra_detectados) * 5} "
                f"minutos de backward scheduling."
            )

    def _cancelar_pedido_completo(self, motivo: str):
        """
        ‚úÖ NOVO M√âTODO: Cancela o pedido completo fazendo rollback de todas as atividades.
        """
        logger.error(
            f"üö´ CANCELANDO PEDIDO COMPLETO {self.id_pedido} - Motivo: {motivo}"
        )
        
        self.pedido_cancelado = True
        
        # Fazer rollback de todas as atividades executadas com sucesso at√© agora
        if self.atividades_executadas:
            logger.info(
                f"üîÅ Fazendo rollback de {len(self.atividades_executadas)} atividades j√° executadas"
            )
            
            for atividade in self.atividades_executadas:
                try:
                    # Rollback de equipamentos
                    if hasattr(atividade, 'equipamentos_selecionados') and atividade.equipamentos_selecionados:
                        rollback_equipamentos(
                            equipamentos_alocados=atividade.equipamentos_selecionados,
                            id_ordem=self.id_ordem,
                            id_pedido=self.id_pedido,
                            id_atividade=atividade.id_atividade
                        )
                        logger.debug(f"üîÑ Rollback equipamentos atividade {atividade.id_atividade}")
                    
                    # Marcar atividade como n√£o alocada
                    atividade.alocada = False
                    
                except Exception as e:
                    logger.error(f"‚ùå Erro no rollback da atividade {atividade.id_atividade}: {e}")
        
        # Rollback completo adicional
        self._executar_rollback_completo()
        
        logger.error(
            f"üö´ PEDIDO {self.id_pedido} CANCELADO COMPLETAMENTE. "
            f"Motivo: {motivo}"
        )

    def _executar_atividade_individual(
        self, 
        atividade: AtividadeModular, 
        current_fim: datetime, 
        atividade_sucessora: AtividadeModular, 
        inicio_prox_atividade: datetime
    ):
        """
        ‚úÖ VERS√ÉO ATUALIZADA: Executa uma atividade individual com tratamento otimizado 
        de erros de quantidade E ambos os tipos de tempo (inter + intra atividade),
        com logging estruturado dedicado para cada tipo.
        """
        logger.debug(
            f"üîß Tentando alocar atividade {atividade.id_atividade} "
            f"com fim em {current_fim.strftime('%H:%M')}"
        )
        
        try:
            # Tentar alocar equipamentos e funcion√°rios
            sucesso, inicio_atual, fim_atual, _, equipamentos_alocados = atividade.tentar_alocar_e_iniciar_equipamentos(
                self.inicio_jornada, current_fim
            )
            
            if not sucesso:
                logger.warning(f"‚ùå Falha na aloca√ß√£o da atividade {atividade.id_atividade}")
                return False, None, None

            logger.debug(f"üì¶ Equipamentos alocados: {len(equipamentos_alocados) if equipamentos_alocados else 0}")

            # Verificar tempo m√°ximo de espera INTER-ATIVIDADE se houver atividade sucessora
            if atividade_sucessora and fim_atual and inicio_prox_atividade:
                try:
                    self._verificar_tempo_maximo_espera(
                        atividade, atividade_sucessora, fim_atual, inicio_prox_atividade
                    )
                    logger.debug("‚úÖ Verifica√ß√£o de tempo m√°ximo de espera INTER-ATIVIDADE passou")
                    
                except RuntimeError as timing_err:
                    # ‚úÖ DETECTAR AUTOMATICAMENTE ERROS DE TEMPO INTER-ATIVIDADE
                    erro_msg_str = str(timing_err)
                    
                    if "Tempo m√°ximo de espera excedido entre atividades" in erro_msg_str:
                        logger.error(
                            f"üîÑ ERRO DE TEMPO INTER-ATIVIDADE detectado entre atividades "
                            f"{atividade.id_atividade} ‚Üí {atividade_sucessora.id_atividade}"
                        )
                        
                        # Log da funcionalidade espec√≠fica
                        logger.info(
                            f"üìä FUNCIONALIDADE: Sistema de logging de tempo INTER-ATIVIDADE ativado. "
                            f"Erro de sequenciamento entre atividades registrado com detalhes completos."
                        )
                        
                    else:
                        # Outro tipo de erro temporal
                        logger.error(f"‚ùå Erro temporal gen√©rico inter-atividade: {timing_err}")
                    
                    # ‚úÖ REGISTRAR ERRO ADICIONAL NO SISTEMA GERAL
                    try:
                        registrar_erro_execucao_pedido(self.id_ordem, self.id_pedido, timing_err)
                    except Exception as log_err:
                        logger.warning(f"‚ö†Ô∏è Erro ao registrar no sistema geral: {log_err}")
                    
                    # Re-lan√ßar exce√ß√£o para tratamento no n√≠vel superior
                    raise timing_err

            # Registrar equipamentos alocados no pedido
            if sucesso and equipamentos_alocados:
                self.equipamentos_alocados_no_pedido.extend(equipamentos_alocados)
                logger.debug(f"üìã Total de equipamentos no pedido: {len(self.equipamentos_alocados_no_pedido)}")
            
            return sucesso, inicio_atual, fim_atual
            
        except RuntimeError as e:
            # Detectar automaticamente diferentes tipos de erro baseado na mensagem
            erro_msg = str(e)
            
            # üîç DETEC√á√ÉO AUTOM√ÅTICA DE TIPOS DE ERRO DE QUANTIDADE
            if any(keyword in erro_msg for keyword in [
                "QUANTIDADE_ABAIXO_MINIMO", 
                "QUANTIDADE_EXCEDE_MAXIMO",
                "Erro de quantidade"
            ]):
                # Erro de quantidade detectado - economia de processamento
                logger.error(
                    f"üö´ ERRO DE QUANTIDADE detectado na atividade {atividade.id_atividade}: {e}"
                )
                
                # Log da economia autom√°tica
                logger.info(
                    f"üí° ECONOMIA AUTOM√ÅTICA: Erro de quantidade detectado. "
                    f"Backward scheduling desnecess√°rio evitado para atividade {atividade.id_atividade}. "
                    f"Economia estimada: 99% de redu√ß√£o no tempo de processamento."
                )
                
            elif "Tempo m√°ximo de espera excedido entre atividades" in erro_msg:
                # üîÑ ERRO DE TEMPO INTER-ATIVIDADE
                logger.error(
                    f"üîÑ ERRO DE TEMPO INTER-ATIVIDADE detectado na atividade {atividade.id_atividade}"
                )
                
                # Log da funcionalidade
                logger.info(
                    f"üìä FUNCIONALIDADE: Sistema de logging de tempo INTER-ATIVIDADE ativado. "
                    f"Erro de sequenciamento entre atividades registrado para "
                    f"atividade {atividade.id_atividade}."
                )
                
            elif "Erro de tempo entre equipamentos" in erro_msg:
                # üîß ERRO DE TEMPO INTRA-ATIVIDADE
                logger.error(
                    f"üîß ERRO DE TEMPO INTRA-ATIVIDADE detectado na atividade {atividade.id_atividade}"
                )
                
                # Log da funcionalidade
                logger.info(
                    f"üìä FUNCIONALIDADE: Sistema de logging de tempo INTRA-ATIVIDADE ativado. "
                    f"Erro de sequenciamento entre equipamentos registrado para "
                    f"atividade {atividade.id_atividade}."
                )
                
            else:
                # Outro tipo de erro - tratamento normal
                logger.error(f"‚ùå Erro gen√©rico na atividade {atividade.id_atividade}: {e}")
            
            # Re-lan√ßar exce√ß√£o para tratamento no n√≠vel superior
            raise e

    def _verificar_tempo_maximo_espera(
        self, 
        atividade_atual: AtividadeModular, 
        atividade_sucessora: AtividadeModular,
        fim_atual: datetime, 
        inicio_prox_atividade: datetime
    ):
        """
        ‚úÖ VERS√ÉO ATUALIZADA: Verifica se o tempo de espera ENTRE ATIVIDADES n√£o excede o limite m√°ximo.
        Agora com logging estruturado de erros de tempo INTER-ATIVIDADE.
        Agora valida corretamente tempo_maximo_de_espera = timedelta(0)
        """
        # ‚úÖ VERIFICA√á√ÉO CORRIGIDA: Verificar se o atributo existe e n√£o √© None
        if not hasattr(atividade_sucessora, 'tempo_maximo_de_espera') or atividade_sucessora.tempo_maximo_de_espera is None:
            logger.debug("‚ÑπÔ∏è Atividade sucessora n√£o possui tempo m√°ximo de espera definido")
            return
        
        tempo_max_espera = atividade_sucessora.tempo_maximo_de_espera
        atraso = inicio_prox_atividade - fim_atual

        logger.debug(
            f"‚è±Ô∏è Verifica√ß√£o de tempo ENTRE atividades:\n"
            f"   Atual: {atividade_atual.id_atividade} (fim: {fim_atual.strftime('%H:%M:%S')})\n"
            f"   Sucessora: {atividade_sucessora.id_atividade} (in√≠cio: {inicio_prox_atividade.strftime('%H:%M:%S')})\n"
            f"   Atraso: {atraso} | M√°ximo permitido: {tempo_max_espera}"
        )

        # ‚úÖ VALIDA√á√ÉO RIGOROSA: Agora funciona corretamente para tempo_max_espera = timedelta(0)
        if atraso > tempo_max_espera:
            # ‚úÖ CRIAR EXCE√á√ÉO ESPEC√çFICA DE TEMPO INTER-ATIVIDADE
            timing_error = InterActivityTimingError(
                current_activity_id=atividade_atual.id_atividade,
                current_activity_name=atividade_atual.nome_atividade,
                successor_activity_id=atividade_sucessora.id_atividade,
                successor_activity_name=atividade_sucessora.nome_atividade,
                current_end_time=fim_atual,
                successor_start_time=inicio_prox_atividade,
                maximum_wait_time=tempo_max_espera,
                actual_delay=atraso
            )
            
            # ‚úÖ REGISTRAR NO SISTEMA DE LOGS DE TEMPO INTER-ATIVIDADE
            try:
                log_inter_activity_timing_error(
                    id_ordem=atividade_atual.id_ordem,
                    id_pedido=atividade_atual.id_pedido,
                    current_activity_id=atividade_atual.id_atividade,
                    current_activity_name=atividade_atual.nome_atividade,
                    successor_activity_id=atividade_sucessora.id_atividade,
                    successor_activity_name=atividade_sucessora.nome_atividade,
                    current_end_time=fim_atual,
                    successor_start_time=inicio_prox_atividade,
                    maximum_wait_time=tempo_max_espera
                )
                
                logger.info(
                    f"üìù Erro de tempo inter-atividade registrado no sistema de logs: "
                    f"{timing_error.error_type}"
                )
                
            except Exception as log_err:
                logger.warning(f"‚ö†Ô∏è Falha ao registrar log inter-atividade: {log_err}")
            
            # ‚úÖ LAN√áAR EXCE√á√ÉO ORIGINAL PARA MANTER COMPATIBILIDADE
            raise RuntimeError(
                f"‚ùå Tempo m√°ximo de espera excedido entre atividades:\n"
                f"   Atividade atual: {atividade_atual.id_atividade} ({atividade_atual.nome_atividade})\n"
                f"   Atividade sucessora: {atividade_sucessora.id_atividade} ({atividade_sucessora.nome_atividade})\n"
                f"   Fim da atual: {fim_atual.strftime('%d/%m %H:%M:%S')}\n"
                f"   In√≠cio da sucessora: {inicio_prox_atividade.strftime('%d/%m %H:%M:%S')}\n"
                f"   Atraso detectado: {atraso}\n"
                f"   M√°ximo permitido: {tempo_max_espera}\n"
                f"   Excesso: {atraso - tempo_max_espera}"
            ) from timing_error
        else:
            logger.debug(f"‚úÖ Tempo de espera ENTRE atividades dentro do limite permitido")

    # =============================================================================
    #                           ROLLBACK
    # =============================================================================

    def _executar_rollback_completo(self):
        """Executa rollback completo do pedido com logs detalhados"""
        logger.info(f"üîÅ Executando rollback completo do pedido {self.id_pedido} da ordem {self.id_ordem}")

        equipamentos_liberados = 0
        funcionarios_liberados = 0

        try:
            # Liberar equipamentos de todas as atividades
            for atividade in self.atividades_modulares:
                if hasattr(atividade, 'equipamentos_selecionados') and atividade.equipamentos_selecionados:
                    rollback_equipamentos(
                        equipamentos_alocados=atividade.equipamentos_selecionados,
                        id_ordem=self.id_ordem,
                        id_pedido=self.id_pedido,
                        id_atividade=atividade.id_atividade
                    )
                    equipamentos_liberados += len(atividade.equipamentos_selecionados)

            # Liberar funcion√°rios
            if self.funcionarios_elegiveis:
                rollback_funcionarios(
                    funcionarios_alocados=self.funcionarios_elegiveis,
                    id_ordem=self.id_ordem,
                    id_pedido=self.id_pedido
                )
                funcionarios_liberados = len(self.funcionarios_elegiveis)

            # Limpar logs
            apagar_logs_por_pedido_e_ordem(self.id_ordem, self.id_pedido)

            logger.info(
                f"‚úÖ Rollback conclu√≠do: "
                f"{equipamentos_liberados} equipamentos e {funcionarios_liberados} funcion√°rios liberados"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante rollback: {e}")

    def rollback_pedido(self):
        """M√©todo p√∫blico para rollback manual"""
        logger.info(f"üîÑ Rollback manual solicitado para pedido {self.id_pedido}")
        self._cancelar_pedido_completo("Rollback manual solicitado")

    # =============================================================================
    #                    CONTROLE DE ALMOXARIFADO
    # =============================================================================

    def verificar_disponibilidade_estoque(self, data_execucao: datetime):
        """
        Verifica se h√° estoque suficiente para executar o pedido usando gestor otimizado.
        Considera pol√≠ticas de produ√ß√£o (ESTOCADO vs SOB_DEMANDA).
        """
        if not self.ficha_tecnica_modular:
            raise ValueError("Ficha t√©cnica ainda n√£o foi montada")

        if not self.gestor_almoxarifado:
            logger.warning("‚ö†Ô∏è Gestor de almoxarifado n√£o dispon√≠vel - pulando verifica√ß√£o de estoque")
            return

        logger.info(f"üîç Verificando disponibilidade de estoque para pedido {self.id_pedido}")

        itens_insuficientes = []
        estimativas = self.ficha_tecnica_modular.calcular_quantidade_itens()

        for item_dict, quantidade in estimativas:
            id_item = item_dict["id_item"]
            tipo_item = item_dict["tipo_item"]
            nome_item = item_dict["descricao"]
            politica = item_dict.get("politica_producao", "ESTOCADO")

            logger.debug(
                f"üß™ Verificando item '{nome_item}' (ID {id_item}) | "
                f"Tipo: {tipo_item} | Pol√≠tica: {politica} | Quantidade: {quantidade}"
            )

            # Itens SOB_DEMANDA n√£o precisam verifica√ß√£o de estoque
            if tipo_item in {"SUBPRODUTO", "PRODUTO"} and politica == "SOB_DEMANDA":
                logger.debug(f"‚è≠Ô∏è Item {id_item} √© SOB_DEMANDA - pulando verifica√ß√£o")
                continue

            # Verificar disponibilidade para itens ESTOCADOS
            if politica == "ESTOCADO":
                try:
                    disponibilidade = self.gestor_almoxarifado.verificar_disponibilidade_projetada_para_data(
                        id_item=id_item,
                        data=data_execucao.date(),
                        quantidade=quantidade
                    )

                    if not disponibilidade:
                        estoque_atual = self.gestor_almoxarifado.obter_estoque_atual(id_item)
                        itens_insuficientes.append({
                            "id": id_item,
                            "descricao": nome_item,
                            "quantidade_necessaria": quantidade,
                            "disponivel": estoque_atual
                        })
                        
                except Exception as e:
                    logger.error(f"‚ùå Erro ao verificar estoque do item {id_item}: {e}")
                    itens_insuficientes.append({
                        "id": id_item,
                        "descricao": nome_item,
                        "quantidade_necessaria": quantidade,
                        "disponivel": 0,
                        "erro": str(e)
                    })

        # Reportar itens insuficientes
        if itens_insuficientes:
            logger.error(f"‚ùå Encontrados {len(itens_insuficientes)} itens com estoque insuficiente:")
            
            for item in itens_insuficientes:
                erro_msg = (
                    f"   Item '{item['descricao']}' (ID {item['id']}): "
                    f"Necess√°rio {item['quantidade_necessaria']}, "
                    f"Dispon√≠vel {item['disponivel']}"
                )
                if 'erro' in item:
                    erro_msg += f" (Erro: {item['erro']})"
                logger.error(erro_msg)
            
            raise RuntimeError(
                f"Pedido {self.id_pedido} n√£o pode ser executado. "
                f"{len(itens_insuficientes)} itens com estoque insuficiente."
            )
        else:
            logger.info(f"‚úÖ Estoque suficiente para todos os itens do pedido {self.id_pedido}")

    def gerar_comanda_de_reserva(self, data_execucao: datetime):
        """
        Gera comanda de reserva para o pedido usando gestor otimizado.
        """
        if not self.ficha_tecnica_modular:
            raise ValueError("Ficha t√©cnica ainda n√£o foi montada")

        if not self.gestor_almoxarifado:
            logger.warning("‚ö†Ô∏è Gestor de almoxarifado n√£o dispon√≠vel - pulando gera√ß√£o de comanda")
            return

        logger.info(f"üìã Gerando comanda de reserva para pedido {self.id_pedido}")

        try:
            gerar_comanda_reserva_modulo(
                id_ordem=self.id_ordem,
                id_pedido=self.id_pedido,
                ficha=self.ficha_tecnica_modular,
                gestor=self.gestor_almoxarifado,
                data_execucao=data_execucao
            )
            
            logger.info(f"‚úÖ Comanda de reserva gerada com sucesso para pedido {self.id_pedido}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar comanda de reserva: {e}")
            raise

    # =============================================================================
    #                           UTILIT√ÅRIOS
    # =============================================================================

    def exibir_historico_de_funcionarios(self):
        """Exibe hist√≥rico de ocupa√ß√£o de todos os funcion√°rios"""
        logger.info("üìä Exibindo hist√≥rico de funcion√°rios")
        
        try:
            for funcionario in funcionarios_disponiveis:
                funcionario.mostrar_agenda()
        except Exception as e:
            logger.error(f"‚ùå Erro ao exibir hist√≥rico de funcion√°rios: {e}")

    def mostrar_estrutura(self):
        """Mostra a estrutura da ficha t√©cnica"""
        if self.ficha_tecnica_modular:
            logger.info(f"üìã Mostrando estrutura da ficha t√©cnica do pedido {self.id_pedido}")
            self.ficha_tecnica_modular.mostrar_estrutura()
        else:
            logger.warning(f"‚ö†Ô∏è Ficha t√©cnica n√£o montada para pedido {self.id_pedido}")

    def obter_resumo_pedido(self) -> dict:
        """Retorna um resumo completo do pedido"""
        atividades_alocadas = sum(1 for a in self.atividades_modulares if a.alocada)
        
        tempos = []
        if self.atividades_modulares:
            for atividade in self.atividades_modulares:
                if hasattr(atividade, 'inicio_real') and atividade.inicio_real:
                    tempos.append(atividade.inicio_real)
                if hasattr(atividade, 'fim_real') and atividade.fim_real:
                    tempos.append(atividade.fim_real)
        
        inicio_real = min(tempos) if tempos else None
        fim_real = max(tempos) if tempos else None
        
        return {
            "id_pedido": self.id_pedido,
            "id_ordem": self.id_ordem,
            "id_produto": self.id_produto,
            "tipo_item": self.tipo_item.name,
            "quantidade": self.quantidade,
            "inicio_jornada": self.inicio_jornada.isoformat(),
            "fim_jornada": self.fim_jornada.isoformat(),
            "inicio_real": inicio_real.isoformat() if inicio_real else None,
            "fim_real": fim_real.isoformat() if fim_real else None,
            "total_atividades": len(self.atividades_modulares),
            "atividades_alocadas": atividades_alocadas,
            "atividades_executadas": len(self.atividades_executadas),
            "funcionarios_elegiveis": len(self.funcionarios_elegiveis),
            "equipamentos_alocados": len(self.equipamentos_alocados_no_pedido),
            "tem_gestor_almoxarifado": self.gestor_almoxarifado is not None,
            "ficha_tecnica_montada": self.ficha_tecnica_modular is not None,
            "pedido_cancelado": self.pedido_cancelado
        }

    def _filtrar_funcionarios_por_item(self, id_item: int) -> List[Funcionario]:
        """Filtra funcion√°rios por tipo necess√°rio para um item espec√≠fico"""
        try:
            tipos_necessarios = buscar_tipos_profissionais_por_id_item(id_item)
            funcionarios_filtrados = [
                f for f in self.todos_funcionarios 
                if f.tipo_profissional in tipos_necessarios
            ]
            
            logger.debug(
                f"üë• Funcion√°rios filtrados para item {id_item}: "
                f"{len(funcionarios_filtrados)}/{len(self.todos_funcionarios)}"
            )
            
            return funcionarios_filtrados
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao filtrar funcion√°rios para item {id_item}: {e}")
            return self.todos_funcionarios

    def __repr__(self):
        status = f"{len([a for a in self.atividades_modulares if a.alocada])}/{len(self.atividades_modulares)} alocadas"
        cancelado = " [CANCELADO]" if self.pedido_cancelado else ""
        return (
            f"<PedidoDeProducao {self.id_pedido} | "
            f"Produto {self.id_produto} | "
            f"Qtd {self.quantidade} | "
            f"Atividades: {status}{cancelado}>"
        )