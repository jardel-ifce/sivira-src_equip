from models.equips.equipamento import Equipamento
from enums.tipo_setor import TipoSetor
from enums.tipo_equipamento import TipoEquipamento
from enums.tipo_atividade import TipoAtividade
from typing import List, Tuple
from datetime import datetime


class ArmarioFermentador(Equipamento):
    """
    Classe que representa um Arm√°rio de Fermenta√ß√£o.
    Controle da ocupa√ß√£o por n√≠veis de tela.
    """

    # =============================================
    # üîß Inicializa√ß√£o
    # =============================================
    def __init__(
        self,
        id: int,
        nome: str,
        setor: TipoSetor,
        nivel_tela_min: int,
        nivel_tela_max: int
    ):
        super().__init__(
            id=id,
            nome=nome,
            tipo_equipamento=TipoEquipamento.ARMARIOS_PARA_FERMENTACAO,
            setor=setor,
            numero_operadores=0,
            status_ativo=True
        )

        self.nivel_tela_min = nivel_tela_min
        self.nivel_tela_max = nivel_tela_max
        self.nivel_tela_atual = 0
        self.ocupacao: List[Tuple[datetime, datetime, TipoAtividade]] = []

    # =============================================
    # üóÇÔ∏è Ocupa√ß√£o por N√≠veis de Tela
    # =============================================
    def ocupar(self, niveis: int) -> bool:
        """
        Ocupa uma quantidade de n√≠veis de tela.
        """
        if self.nivel_tela_atual + niveis > self.nivel_tela_max:
            print(
                f"‚ùå {self.nome} | N√£o √© poss√≠vel ocupar {niveis} n√≠veis. "
                f"Capacidade m√°xima: {self.nivel_tela_max}. Ocupados atualmente: {self.nivel_tela_atual}."
            )
            return False

        self.nivel_tela_atual += niveis
        print(
            f"‚úÖ {self.nome} | Ocupou {niveis} n√≠veis. "
            f"Ocupa√ß√£o atual: {self.nivel_tela_atual}/{self.nivel_tela_max}."
        )
        return True

    def liberar(self, niveis: int) -> bool:
        """
        Libera uma quantidade de n√≠veis de tela.
        """
        self.nivel_tela_atual -= niveis

        if self.nivel_tela_atual < 0:
            print(
                f"‚ö†Ô∏è {self.nome} | Tentou liberar {niveis} n√≠veis, excedendo o ocupado. "
                "Resetando ocupa√ß√£o para 0."
            )
            self.nivel_tela_atual = 0
            return False

        print(
            f"üü© {self.nome} | Liberou {niveis} n√≠veis. "
            f"Ocupa√ß√£o atual: {self.nivel_tela_atual}/{self.nivel_tela_max}."
        )
        return True

    def niveis_disponiveis(self) -> int:
        """
        Retorna o n√∫mero de n√≠veis de tela dispon√≠veis para ocupa√ß√£o.
        """
        return self.nivel_tela_max - self.nivel_tela_atual

    # =============================================
    # üîç Status e Visualiza√ß√£o
    # =============================================
    def __str__(self):
        return (
            super().__str__() +
            f"\nüóÇÔ∏è N√≠veis de Tela Ocupados: {self.nivel_tela_atual}/{self.nivel_tela_max}"
            f"\nüß† N√≠veis Dispon√≠veis: {self.niveis_disponiveis()}"
            f"\nüü¶ Status: {'Ocupado' if self.nivel_tela_atual > 0 else 'Dispon√≠vel'}"
        )
