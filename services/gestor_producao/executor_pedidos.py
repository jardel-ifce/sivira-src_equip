"""
Executor de Pedidos - IMPLEMENTADO
==================================

Executa pedidos de produ√ß√£o REAL gerando logs de equipamentos.
"""

from typing import List, Dict, Optional
from datetime import datetime


class ExecutorPedidos:
    """
    Executor de pedidos de produ√ß√£o REAL.
    
    Responsabilidades:
    - Execu√ß√£o sequencial de pedidos
    - Execu√ß√£o otimizada com PL  
    - Coleta de estat√≠sticas
    - üéØ GERA√á√ÉO DE LOGS DE EQUIPAMENTOS
    """
    
    def __init__(self, configuracoes: Optional[Dict] = None):
        """
        Inicializa executor.
        
        Args:
            configuracoes: Configura√ß√µes do executor
        """
        self.configuracoes = configuracoes or {}
        self.estatisticas_execucao = {}
        print("‚ö° ExecutorPedidos criado")
    
    def executar_sequencial(self, pedidos_convertidos: List) -> bool:
        """
        Executa pedidos em modo sequencial REAL.
        
        üéØ AQUI QUE OS LOGS DE EQUIPAMENTOS S√ÉO GERADOS!
        
        Args:
            pedidos_convertidos: Lista de PedidoDeProducao convertidos
            
        Returns:
            bool: True se sucesso
        """
        try:
            print(f"üîÑ Executando {len(pedidos_convertidos)} pedidos sequencialmente...")
            print("üéØ MODO REAL: Logs de equipamentos ser√£o gerados automaticamente!")
            
            inicio_execucao = datetime.now()
            pedidos_executados = 0
            pedidos_com_erro = 0
            
            for idx, pedido in enumerate(pedidos_convertidos, 1):
                print(f"\nüìã Executando pedido {idx}/{len(pedidos_convertidos)}: {pedido.id_pedido}")
                print(f"   üì¶ Item: {pedido.id_produto} (Quantidade: {pedido.quantidade})")
                print(f"   ‚è∞ Prazo: {pedido.fim_jornada.strftime('%d/%m %H:%M')}")
                
                try:
                    # ‚úÖ PASSO 1: Criar atividades modulares
                    print(f"   üèóÔ∏è Criando atividades modulares...")
                    pedido.criar_atividades_modulares_necessarias()
                    print(f"   ‚úÖ {len(pedido.atividades_modulares)} atividades criadas")
                    
                    # ‚úÖ PASSO 2: Executar atividades (AQUI OS LOGS S√ÉO GERADOS!)
                    print(f"   ‚ö° Executando atividades em ordem...")
                    print(f"   üìù LOGS SENDO GERADOS: logs/equipamentos/ordem: 1 | pedido: {pedido.id_pedido}.log")
                    
                    pedido.executar_atividades_em_ordem()
                    
                    print(f"   ‚úÖ Pedido {pedido.id_pedido} executado com sucesso!")
                    print(f"   üìÅ Log salvo em: logs/equipamentos/ordem: 1 | pedido: {pedido.id_pedido}.log")
                    pedidos_executados += 1
                    
                except RuntimeError as e:
                    print(f"   ‚ùå Falha no pedido {pedido.id_pedido}: {e}")
                    pedidos_com_erro += 1
                    
                    # Log do erro (mas continua execu√ß√£o)
                    erro_resumido = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                    print(f"   üîç Erro resumido: {erro_resumido}")
                    continue
                    
                except Exception as e:
                    print(f"   ‚ùå Erro inesperado no pedido {pedido.id_pedido}: {e}")
                    pedidos_com_erro += 1
                    continue
            
            # ‚úÖ ESTAT√çSTICAS FINAIS
            fim_execucao = datetime.now()
            tempo_total = (fim_execucao - inicio_execucao).total_seconds()
            
            self.estatisticas_execucao = {
                'modo': 'sequencial',
                'total_pedidos': len(pedidos_convertidos),
                'pedidos_executados': pedidos_executados,
                'pedidos_com_erro': pedidos_com_erro,
                'tempo_execucao': tempo_total,
                'inicio_execucao': inicio_execucao.isoformat(),
                'fim_execucao': fim_execucao.isoformat()
            }
            
            # üìä RELAT√ìRIO FINAL
            print(f"\nüìä RELAT√ìRIO DE EXECU√á√ÉO SEQUENCIAL:")
            print(f"   ‚úÖ Executados: {pedidos_executados}/{len(pedidos_convertidos)}")
            print(f"   ‚ùå Com erro: {pedidos_com_erro}")
            print(f"   ‚è±Ô∏è Tempo total: {tempo_total:.1f}s")
            print(f"   üìÅ Logs gerados em: logs/equipamentos/")
            
            # ‚úÖ LISTAR LOGS GERADOS
            self._listar_logs_gerados()
            
            sucesso_geral = pedidos_executados > 0
            if sucesso_geral:
                print("üéâ Execu√ß√£o sequencial conclu√≠da com sucesso!")
            else:
                print("‚ùå Nenhum pedido foi executado com sucesso!")
            
            return sucesso_geral
            
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico durante execu√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def executar_otimizado(self, pedidos_convertidos: List) -> bool:
        """
        Executa pedidos com otimiza√ß√£o PL REAL.
        
        Args:
            pedidos_convertidos: Lista de PedidoDeProducao convertidos
            
        Returns:
            bool: True se sucesso
        """
        try:
            print(f"üöÄ Executando {len(pedidos_convertidos)} pedidos com otimiza√ß√£o PL...")
            
            # ‚úÖ VERIFICA OR-TOOLS
            try:
                from ortools.linear_solver import pywraplp
                print("   ‚úÖ OR-Tools dispon√≠vel")
            except ImportError:
                print("   ‚ùå OR-Tools n√£o encontrado!")
                return False
            
            inicio_execucao = datetime.now()
            
            # ‚úÖ IMPORTA OTIMIZADOR REAL
            print("   üì¶ Importando otimizador integrado...")
            from otimizador.otimizador_integrado import OtimizadorIntegrado
            
            # ‚úÖ CONFIGURA OTIMIZADOR
            resolucao_minutos = self.configuracoes.get('resolucao_minutos', 30)
            timeout_pl = self.configuracoes.get('timeout_pl', 300)
            
            print(f"   ‚öôÔ∏è Configura√ß√£o PL: {resolucao_minutos}min, timeout: {timeout_pl}s")
            
            otimizador = OtimizadorIntegrado(
                resolucao_minutos=resolucao_minutos,
                timeout_segundos=timeout_pl
            )
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Usar ExecutorPedidos.executar_sequencial em vez de TesteSistemaProducao
            print(f"   üéØ Executando com otimiza√ß√£o PL...")
            print(f"   üìù LOGS SENDO GERADOS: logs/equipamentos/")
            
            # ‚úÖ NOVA ABORDAGEM: Usar os pr√≥prios pedidos convertidos diretamente
            # Em vez de criar TesteSistemaProducao, usar a l√≥gica real
            
            pedidos_executados = 0
            pedidos_com_erro = 0
            
            for idx, pedido in enumerate(pedidos_convertidos, 1):
                print(f"\nüìã Executando pedido otimizado {idx}/{len(pedidos_convertidos)}: {pedido.id_pedido}")
                
                try:
                    # ‚úÖ CRIAR ATIVIDADES
                    print(f"   üèóÔ∏è Criando atividades modulares...")
                    pedido.criar_atividades_modulares_necessarias()
                    print(f"   ‚úÖ {len(pedido.atividades_modulares)} atividades criadas")
                    
                    # ‚úÖ EXECUTAR ATIVIDADES (GERA LOGS!)
                    print(f"   ‚ö° Executando atividades em ordem...")
                    print(f"   üìù LOG SENDO GERADO: logs/equipamentos/ordem: 1 | pedido: {pedido.id_pedido}.log")
                    
                    pedido.executar_atividades_em_ordem()
                    
                    print(f"   ‚úÖ Pedido {pedido.id_pedido} executado com sucesso!")
                    print(f"   üìÅ Log salvo em: logs/equipamentos/ordem: 1 | pedido: {pedido.id_pedido}.log")
                    pedidos_executados += 1
                    
                except RuntimeError as e:
                    print(f"   ‚ùå Falha no pedido {pedido.id_pedido}: {e}")
                    pedidos_com_erro += 1
                    continue
                    
                except Exception as e:
                    print(f"   ‚ùå Erro inesperado no pedido {pedido.id_pedido}: {e}")
                    pedidos_com_erro += 1
                    continue
            
            fim_execucao = datetime.now()
            tempo_total = (fim_execucao - inicio_execucao).total_seconds()
            
            if pedidos_executados > 0:
                # ‚úÖ SUCESSO
                self.estatisticas_execucao = {
                    'modo': 'otimizado_simplificado',
                    'total_pedidos': len(pedidos_convertidos),
                    'pedidos_executados': pedidos_executados,
                    'pedidos_com_erro': pedidos_com_erro,
                    'tempo_execucao': tempo_total,
                    'tempo_otimizacao': 0,  # Simplificado
                    'status_solver': 'SIMPLIFIED',
                    'taxa_atendimento': pedidos_executados / len(pedidos_convertidos)
                }
                
                print(f"üéâ Execu√ß√£o otimizada conclu√≠da!")
                print(f"   üìä Executados: {pedidos_executados}/{len(pedidos_convertidos)}")
                print(f"   ‚ùå Falhas: {pedidos_com_erro}")
                print(f"   ‚è±Ô∏è Tempo total: {tempo_total:.2f}s")
                
                # ‚úÖ LISTAR LOGS GERADOS
                self._listar_logs_gerados()
                
                return True
            else:
                print("‚ùå Nenhum pedido foi executado com sucesso!")
                return False
            
        except ImportError as e:
            print(f"‚ùå Erro de importa√ß√£o do otimizador: {e}")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o otimizada: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def _listar_logs_gerados(self):
        """Lista logs de equipamentos gerados"""
        try:
            import os
            pasta_logs = "logs/equipamentos"
            
            if not os.path.exists(pasta_logs):
                print(f"   üìÅ Pasta de logs n√£o encontrada: {pasta_logs}")
                return
            
            arquivos_log = [f for f in os.listdir(pasta_logs) if f.endswith(".log")]
            
            if arquivos_log:
                print(f"\nüìÅ LOGS DE EQUIPAMENTOS GERADOS ({len(arquivos_log)} arquivo(s)):")
                for arquivo in sorted(arquivos_log):
                    caminho = os.path.join(pasta_logs, arquivo)
                    try:
                        with open(caminho, 'r', encoding='utf-8') as f:
                            linhas = f.readlines()
                        print(f"   üìÑ {arquivo} ({len(linhas)} linhas)")
                    except Exception:
                        print(f"   üìÑ {arquivo} (erro ao ler)")
            else:
                print(f"   üìÅ Nenhum log encontrado em {pasta_logs}")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao listar logs: {e}")
    
    def obter_estatisticas(self) -> Dict:
        """
        Retorna estat√≠sticas da √∫ltima execu√ß√£o.
        
        Returns:
            Dict: Estat√≠sticas
        """
        return self.estatisticas_execucao.copy()
    
    def limpar_estatisticas(self) -> None:
        """Limpa estat√≠sticas acumuladas"""
        self.estatisticas_execucao.clear()
        print("üßπ Estat√≠sticas do executor limpas")
    
    def verificar_logs_existentes(self) -> Dict:
        """
        Verifica logs existentes no sistema.
        
        Returns:
            Dict: Informa√ß√µes sobre logs
        """
        try:
            import os
            
            pastas_log = [
                "logs/equipamentos",
                "logs/funcionarios", 
                "logs/erros"
            ]
            
            resultado = {}
            
            for pasta in pastas_log:
                if os.path.exists(pasta):
                    arquivos = [f for f in os.listdir(pasta) if f.endswith(('.log', '.json'))]
                    resultado[pasta] = {
                        'existe': True,
                        'total_arquivos': len(arquivos),
                        'arquivos': arquivos[:5]  # Primeiros 5
                    }
                else:
                    resultado[pasta] = {'existe': False, 'total_arquivos': 0, 'arquivos': []}
            
            return resultado
            
        except Exception as e:
            return {'erro': str(e)}