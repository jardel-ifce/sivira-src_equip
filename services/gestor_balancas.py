from typing import List, Tuple, Optional
from models.equips.balanca_digital import BalancaDigital
from models.atividade_base import Atividade
from utils.logger_factory import setup_logger
from datetime import datetime

# ‚öñÔ∏è Logger espec√≠fico para o gestor de balan√ßas
logger = setup_logger('GestorBalancas')


class GestorBalancas:
    """
    ‚öñÔ∏è Gestor especializado para controle de balan√ßas digitais.
    Permite m√∫ltiplas aloca√ß√µes simult√¢neas.
    """

    def __init__(self, balancas: List[BalancaDigital]):
        self.balancas = balancas

    # ==========================================================
    # üéØ Aloca√ß√£o
    # ==========================================================
    def alocar(
        self,
        inicio: datetime,
        fim: datetime,
        atividade: Atividade,
        quantidade_gramas: float
    ) -> Tuple[bool, Optional[BalancaDigital], Optional[datetime], Optional[datetime]]:
        """
        ‚öñÔ∏è Tenta registrar a ocupa√ß√£o em alguma balan√ßa v√°lida para o peso.
        Mesmo sem controle de tempo, retorna uma tupla padr√£o com (sucesso, equipamento, inicio, fim).
        """
        balancas_ordenadas = sorted(
            self.balancas,
            key=lambda b: atividade.fips_equipamentos.get(b, 999)
        )

        for balanca in balancas_ordenadas:
            if not balanca.aceita_quantidade(quantidade_gramas):
                logger.info(
                    f"üö´ Balan√ßa {balanca.nome} n√£o aceita {quantidade_gramas}g. Ignorando."
                )
                continue

            sucesso = balanca.ocupar(
                atividade_id=atividade.id,
                quantidade=quantidade_gramas
            )
            if sucesso:
                atividade.equipamento_alocado = balanca
                atividade.equipamentos_selecionados = [balanca]
                atividade.alocada = True

                logger.info(
                    f"‚úÖ Atividade {atividade.id} alocada na balan√ßa {balanca.nome} "
                    f"(sem intervalo de tempo)."
                )
                return True, balanca, None, None

            else:
                logger.warning(
                    f"‚ö†Ô∏è Falha ao registrar ocupa√ß√£o na balan√ßa {balanca.nome} mesmo ap√≥s valida√ß√£o."
                )

        logger.error(
            f"‚ùå Nenhuma balan√ßa dispon√≠vel ou compat√≠vel com {quantidade_gramas}g para atividade {atividade.id}."
        )
        return False, None, None, None

    # ==========================================================
    # üîì Libera√ß√£o
    # ==========================================================
    def liberar_por_atividade(self, atividade: Atividade):
        logger.info(
            f"üßπ Liberando ocupa√ß√µes associadas √† atividade {atividade.id} em todas as balan√ßas."
        )
        for balanca in self.balancas:
            balanca.liberar_por_atividade(atividade.id)

    def liberar_todas_ocupacoes(self):
        logger.info("üßπ Liberando todas as ocupa√ß√µes de todas as balan√ßas.")
        for balanca in self.balancas:
            balanca.liberar_todas_ocupacoes()

    # ==========================================================
    # üìÖ Agenda
    # ==========================================================
    def mostrar_agenda(self):
        logger.info("==============================================")
        logger.info("üìÖ Agenda das Balan√ßas")
        logger.info("==============================================")
        for balanca in self.balancas:
            balanca.mostrar_agenda()
