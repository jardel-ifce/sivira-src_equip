from typing import List, Tuple, Optional, TYPE_CHECKING
from models.equipamentos.balanca_digital import BalancaDigital
if TYPE_CHECKING:
    from models.atividades.atividade_modular import AtividadeModular
from utils.logs.logger_factory import setup_logger
from datetime import datetime, timedelta
import unicodedata

# ‚öñÔ∏è Logger espec√≠fico para o gestor de balan√ßas
logger = setup_logger('GestorBalancas')


class GestorBalancas:
    """
    ‚öñÔ∏è Gestor otimizado para controle de balan√ßas digitais com distribui√ß√£o inteligente.
    
    Baseado em:
    - Multiple Knapsack Problem para verifica√ß√£o de viabilidade
    - First Fit Decreasing (FFD) para distribui√ß√£o √≥tima
    - Binary Space Partitioning para balanceamento de cargas
    - Load Balancing para redistribui√ß√£o eficiente
    
    Funcionalidades:
    - Verifica√ß√£o pr√©via de viabilidade total do sistema
    - Distribui√ß√£o otimizada respeitando capacidades m√≠n/m√°x
    - Algoritmos de otimiza√ß√£o com m√∫ltiplas estrat√©gias
    - Prioriza√ß√£o por FIP com balanceamento de carga
    """

    def __init__(self, balancas: List[BalancaDigital]):
        self.balancas = balancas

    # ==========================================================
    # üìä An√°lise de Viabilidade e Capacidades - CORRIGIDO
    # ==========================================================
    def _calcular_capacidade_total_sistema(self) -> Tuple[float, float]:
        """
        üìö Multiple Knapsack Problem (MKP): Calcula capacidade total do sistema.
        Premissa: Todas as balan√ßas est√£o sempre dispon√≠veis.
        
        Retorna: (capacidade_total_disponivel, capacidade_maxima_teorica)
        """
        capacidade_total = sum(balanca.capacidade_gramas_max for balanca in self.balancas)
        return capacidade_total, capacidade_total

    def _verificar_viabilidade_quantidade(self, quantidade_total: float) -> Tuple[bool, str]:
        """
        Verifica se √© teoricamente poss√≠vel processar a quantidade solicitada.
        Simplificado: apenas verifica capacidade total do sistema.
        """
        cap_disponivel, cap_teorica = self._calcular_capacidade_total_sistema()
        
        if quantidade_total > cap_teorica:
            return False, f"Quantidade {quantidade_total}g excede capacidade m√°xima te√≥rica do sistema ({cap_teorica}g)"
        
        # Verifica se √© poss√≠vel respeitar capacidades m√≠nimas
        if not self.balancas:
            return False, "Nenhuma balan√ßa dispon√≠vel no sistema"
        
        # Verifica viabilidade com capacidades m√≠nimas
        capacidade_minima_total = sum(b.capacidade_gramas_min for b in self.balancas)
        if quantidade_total < min(b.capacidade_gramas_min for b in self.balancas):
            if len(self.balancas) == 1:
                return True, "Vi√°vel com uma balan√ßa"
        elif quantidade_total >= capacidade_minima_total:
            return True, "Vi√°vel com m√∫ltiplas balan√ßas"
        else:
            return False, f"Quantidade {quantidade_total}g insuficiente para capacidades m√≠nimas ({capacidade_minima_total}g)"
        
        return True, "Quantidade vi√°vel"

    # ==========================================================
    # üßÆ Algoritmos de Distribui√ß√£o Otimizada - CORRIGIDO
    # ==========================================================
    def _algoritmo_distribuicao_balanceada(self, quantidade_total: float, 
                                          balancas_disponiveis: List[Tuple[BalancaDigital, float]]) -> List[Tuple[BalancaDigital, float]]:
        """
        üìö Binary Space Partitioning: T√©cnica que divide recursivamente o espa√ßo de solu√ß√µes,
        originalmente usada em computa√ß√£o gr√°fica. Aqui adaptada para dividir a quantidade total
        proporcionalmente entre balan√ßas, considerando suas capacidades dispon√≠veis.
        Garante distribui√ß√£o equilibrada minimizando desperd√≠cio de capacidade.
        
        Algoritmo de distribui√ß√£o baseado em Binary Space Partitioning adaptado.
        """
        if not balancas_disponiveis:
            return []
        
        # Ordena por capacidade dispon√≠vel (maior primeiro)
        balancas_ordenadas = sorted(balancas_disponiveis, key=lambda x: x[1], reverse=True)
        
        # Capacidade total dispon√≠vel
        capacidade_total_disponivel = sum(cap for _, cap in balancas_ordenadas)
        
        if capacidade_total_disponivel < quantidade_total:
            return []
        
        # Fase 1: Distribui√ß√£o proporcional inicial
        distribuicao = []
        quantidade_restante = quantidade_total
        
        for i, (balanca, cap_disponivel) in enumerate(balancas_ordenadas):
            if i == len(balancas_ordenadas) - 1:
                # √öltima balan√ßa recebe o restante
                quantidade_balanca = quantidade_restante
            else:
                # Distribui√ß√£o proporcional
                proporcao = cap_disponivel / capacidade_total_disponivel
                quantidade_balanca = quantidade_total * proporcao
            
            # Ajusta para limites da balan√ßa (usando nomes corretos dos atributos)
            quantidade_balanca = max(balanca.capacidade_gramas_min, 
                                   min(quantidade_balanca, cap_disponivel))
            
            distribuicao.append((balanca, quantidade_balanca))
            quantidade_restante -= quantidade_balanca
            
            if quantidade_restante <= 0:
                break
        
        # Fase 2: Redistribui√ß√£o de excedentes/d√©ficits
        distribuicao = self._redistribuir_excedentes(distribuicao, quantidade_total)
        
        return distribuicao

    def _redistribuir_excedentes(self, distribuicao: List[Tuple[BalancaDigital, float]], 
                                quantidade_target: float) -> List[Tuple[BalancaDigital, float]]:
        """
        üìö Load Balancing Algorithms: T√©cnicas de balanceamento de carga que redistribuem
        trabalho entre recursos para otimizar utiliza√ß√£o. Inspirado em algoritmos de
        sistemas distribu√≠dos, realiza ajustes iterativos para equilibrar cargas respeitando
        restri√ß√µes de capacidade. Fundamental para evitar subutiliza√ß√£o de equipamentos.
        
        Redistribui quantidades para atingir o target exato respeitando limites.
        """
        MAX_ITERACOES = 10
        iteracao = 0
        
        while iteracao < MAX_ITERACOES:
            quantidade_atual = sum(qtd for _, qtd in distribuicao)
            diferenca = quantidade_target - quantidade_atual
            
            if abs(diferenca) < 0.1:  # Toler√¢ncia de 0.1g
                break
            
            if diferenca > 0:
                # Precisa adicionar quantidade
                for i, (balanca, qtd_atual) in enumerate(distribuicao):
                    margem_disponivel = balanca.capacidade_gramas_max - qtd_atual
                    
                    if margem_disponivel > 0:
                        adicionar = min(diferenca, margem_disponivel)
                        distribuicao[i] = (balanca, qtd_atual + adicionar)
                        diferenca -= adicionar
                        
                        if diferenca <= 0:
                            break
            else:
                # Precisa remover quantidade
                diferenca = abs(diferenca)
                for i, (balanca, qtd_atual) in enumerate(distribuicao):
                    margem_removivel = qtd_atual - balanca.capacidade_gramas_min
                    
                    if margem_removivel > 0:
                        remover = min(diferenca, margem_removivel)
                        distribuicao[i] = (balanca, qtd_atual - remover)
                        diferenca -= remover
                        
                        if diferenca <= 0:
                            break
            
            iteracao += 1
        
        # Remove balan√ßas com quantidade abaixo do m√≠nimo
        distribuicao_final = [
            (balanca, qtd) for balanca, qtd in distribuicao
            if qtd >= balanca.capacidade_gramas_min
        ]
        
        return distribuicao_final

    def _algoritmo_first_fit_decreasing(self, quantidade_total: float,
                                      balancas_disponiveis: List[Tuple[BalancaDigital, float]]) -> List[Tuple[BalancaDigital, float]]:
        """
        üìö First Fit Decreasing (FFD): Algoritmo cl√°ssico de Bin Packing que ordena itens
        por tamanho decrescente e aloca cada item no primeiro recipiente que couber.
        Garante aproxima√ß√£o de 11/9 do √≥timo e √© amplamente usado em problemas de otimiza√ß√£o.
        Adaptado aqui para respeitar capacidades m√≠nimas das balan√ßas.
        
        Implementa√ß√£o do algoritmo First Fit Decreasing adaptado para capacidades m√≠nimas.
        """
        # Ordena balan√ßas por capacidade dispon√≠vel (maior primeiro)
        balancas_ordenadas = sorted(balancas_disponiveis, key=lambda x: x[1], reverse=True)
        
        distribuicao = []
        quantidade_restante = quantidade_total
        
        for balanca, cap_disponivel in balancas_ordenadas:
            if quantidade_restante <= 0:
                break
            
            # Calcula quanto alocar nesta balan√ßa
            if quantidade_restante >= balanca.capacidade_gramas_min:
                quantidade_alocar = min(quantidade_restante, cap_disponivel)
                
                # Garante que n√£o fica quantidade insuficiente para pr√≥ximas balan√ßas
                balancas_restantes = [b for b, _ in balancas_ordenadas 
                                    if b != balanca and (quantidade_restante - quantidade_alocar) > 0]
                
                if balancas_restantes:
                    cap_min_restantes = min(b.capacidade_gramas_min for b in balancas_restantes)
                    if quantidade_restante - quantidade_alocar < cap_min_restantes and quantidade_restante - quantidade_alocar > 0:
                        # Ajusta para deixar quantidade suficiente
                        quantidade_alocar = quantidade_restante - cap_min_restantes
                
                if quantidade_alocar >= balanca.capacidade_gramas_min:
                    distribuicao.append((balanca, quantidade_alocar))
                    quantidade_restante -= quantidade_alocar
        
        return distribuicao if quantidade_restante <= 0.1 else []

    # ==========================================================
    # üìä Ordena√ß√£o e Utilit√°rios
    # ==========================================================
    def _ordenar_por_fip(self, atividade: "AtividadeModular") -> List[BalancaDigital]:
        ordenadas = sorted(
            self.balancas,
            key=lambda b: atividade.fips_equipamentos.get(b, 999)
        )
        return ordenadas

    def _obter_peso_explicito_do_json(self, atividade: "AtividadeModular") -> Optional[float]:
        try:
            config = atividade.configuracoes_equipamentos or {}
            for chave, conteudo in config.items():
                chave_normalizada = unicodedata.normalize("NFKD", chave).encode("ASCII", "ignore").decode("utf-8").lower()
                if "balanca" in chave_normalizada:
                    peso_gramas = conteudo.get("peso_gramas")
                    if peso_gramas is not None:
                        return peso_gramas
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar peso_gramas no JSON da atividade: {e}")
            return None

    def _calcular_distribuicao_otima(self, quantidade_total: float, 
                                   balancas_disponiveis: List[Tuple[BalancaDigital, float]]) -> List[Tuple[BalancaDigital, float]]:
        """
        Calcula distribui√ß√£o √≥tima usando m√∫ltiplos algoritmos e retorna o melhor resultado.
        """
        # Testa algoritmo de distribui√ß√£o balanceada
        dist_balanceada = self._algoritmo_distribuicao_balanceada(quantidade_total, balancas_disponiveis)
        
        # Testa First Fit Decreasing
        dist_ffd = self._algoritmo_first_fit_decreasing(quantidade_total, balancas_disponiveis)
        
        # Avalia qual distribui√ß√£o √© melhor
        candidatos = []
        
        if dist_balanceada and sum(qtd for _, qtd in dist_balanceada) >= quantidade_total * 0.99:
            candidatos.append(('balanceada', dist_balanceada))
        
        if dist_ffd and sum(qtd for _, qtd in dist_ffd) >= quantidade_total * 0.99:
            candidatos.append(('ffd', dist_ffd))
        
        if not candidatos:
            return []
        
        # Escolhe a distribui√ß√£o que usa menos balan√ßas, ou a mais balanceada
        melhor_distribuicao = min(candidatos, key=lambda x: (len(x[1]), -self._calcular_balanceamento(x[1])))
        
        logger.debug(f"üìä Escolhida distribui√ß√£o {melhor_distribuicao[0]} com {len(melhor_distribuicao[1])} balan√ßas")
        
        return melhor_distribuicao[1]

    def _calcular_balanceamento(self, distribuicao: List[Tuple[BalancaDigital, float]]) -> float:
        """
        Calcula score de balanceamento da distribui√ß√£o (maior = mais balanceado).
        """
        if len(distribuicao) <= 1:
            return 1.0
        
        quantidades = [qtd for _, qtd in distribuicao]
        media = sum(quantidades) / len(quantidades)
        variancia = sum((qtd - media) ** 2 for qtd in quantidades) / len(quantidades)
        
        # Score inversamente proporcional √† vari√¢ncia
        return 1.0 / (1.0 + variancia / media**2) if media > 0 else 0.0

    # ==========================================================
    # üéØ Aloca√ß√£o Otimizada Principal - CORRIGIDO
    # ==========================================================
    def alocar(
        self,
        inicio: datetime,
        fim: datetime,
        atividade: "AtividadeModular",
        quantidade_gramas: float | None = None
    ) -> Tuple[bool, Optional[BalancaDigital], Optional[datetime], Optional[datetime]]:
        """
        Aloca√ß√£o otimizada simplificada - sem verifica√ß√µes temporais.
        Premissa: Todas as balan√ßas est√£o sempre dispon√≠veis.
        
        Returns:
            Para aloca√ß√£o simples: (True, balanca, inicio, fim)
            Para aloca√ß√£o m√∫ltipla: (True, [lista_balancas], inicio, fim)
        """
        # Determina quantidade final
        peso_json = self._obter_peso_explicito_do_json(atividade)
        if peso_json is not None:
            quantidade_final = peso_json
        else:
            quantidade_final = quantidade_gramas

        if quantidade_final is None:
            logger.error("‚ùå Nenhuma quantidade definida para balan√ßa.")
            return False, None, None, None

        logger.info(f"‚öñÔ∏è Iniciando aloca√ß√£o otimizada: {quantidade_final}g")

        # Fase 1: Verifica√ß√£o de viabilidade (apenas capacidade total)
        viavel, motivo = self._verificar_viabilidade_quantidade(quantidade_final)
        
        if not viavel:
            logger.warning(f"‚ùå Invi√°vel: {motivo}")
            return False, None, None, None

        # Fase 2: Preparar balan√ßas dispon√≠veis (todas, sempre)
        balancas_ordenadas = self._ordenar_por_fip(atividade)
        balancas_disponiveis = [(balanca, balanca.capacidade_gramas_max) for balanca in balancas_ordenadas]

        # Fase 3: Tentativa de aloca√ß√£o em balan√ßa √∫nica (otimiza√ß√£o)
        for balanca, cap_max in balancas_disponiveis:
            if balanca.aceita_quantidade(quantidade_final):
                sucesso = self._executar_alocacao_simples(
                    balanca, atividade, quantidade_final, inicio, fim
                )
                if sucesso:
                    logger.info(f"‚úÖ Aloca√ß√£o simples: {quantidade_final}g na {balanca.nome}")
                    return True, balanca, inicio, fim

        # Fase 4: Distribui√ß√£o em m√∫ltiplas balan√ßas
        distribuicao = self._calcular_distribuicao_otima(quantidade_final, balancas_disponiveis)
        
        if distribuicao:
            sucesso = self._executar_alocacao_multipla(
                distribuicao, atividade, inicio, fim
            )
            if sucesso:
                balancas_alocadas = [b for b, _ in distribuicao]
                logger.info(
                    f"‚úÖ Aloca√ß√£o m√∫ltipla bem-sucedida em {len(balancas_alocadas)} balan√ßas: "
                    f"{', '.join(b.nome for b in balancas_alocadas)}"
                )
                # Retorna lista de balan√ßas para aloca√ß√£o m√∫ltipla
                return True, balancas_alocadas, inicio, fim

        logger.error(f"‚ùå Falha na aloca√ß√£o de {quantidade_final}g")
        return False, None, None, None

    def _executar_alocacao_simples(self, balanca: BalancaDigital, atividade: "AtividadeModular", 
                                  quantidade: float, inicio: datetime, fim: datetime) -> bool:
        """
        Executa aloca√ß√£o em uma √∫nica balan√ßa.
        Simplificado: sem verifica√ß√µes de disponibilidade.
        """
        sucesso = balanca.ocupar(
            id_ordem=atividade.id_ordem,
            id_pedido=atividade.id_pedido,
            id_atividade=atividade.id_atividade,
            id_item=0,  # Adicionado par√¢metro id_item obrigat√≥rio
            quantidade=quantidade,
            inicio=inicio,
            fim=fim
        )
        
        if sucesso:
            atividade.equipamento_alocado = balanca
            atividade.equipamentos_selecionados = [balanca]
            atividade.alocada = True
        
        return sucesso

    def _executar_alocacao_multipla(self, distribuicao: List[Tuple[BalancaDigital, float]], 
                                  atividade: "AtividadeModular", inicio: datetime, fim: datetime) -> bool:
        """
        Executa aloca√ß√£o em m√∫ltiplas balan√ßas conforme distribui√ß√£o calculada.
        Simplificado: sem rollback, avalia antes de alocar.
        """
        # ‚úÖ PR√â-VALIDA√á√ÉO: Verifica se todas as aloca√ß√µes s√£o poss√≠veis ANTES de executar
        for balanca, quantidade in distribuicao:
            if not balanca.aceita_quantidade(quantidade):
                logger.error(f"‚ùå Balan√ßa {balanca.nome} n√£o aceita {quantidade}g")
                return False
        
        # ‚úÖ EXECU√á√ÉO: Se chegou aqui, todas as aloca√ß√µes s√£o v√°lidas
        sucesso_total = True
        for i, (balanca, quantidade) in enumerate(distribuicao):
            sucesso = balanca.ocupar(
                id_ordem=atividade.id_ordem,
                id_pedido=atividade.id_pedido,
                id_atividade=atividade.id_atividade,
                id_item=i,  # Adicionado par√¢metro id_item obrigat√≥rio (usando √≠ndice)
                quantidade=quantidade,
                inicio=inicio,
                fim=fim
            )
            
            if not sucesso:
                logger.error(f"‚ùå Falha inesperada ao alocar {quantidade}g na {balanca.nome}")
                sucesso_total = False
                # Continua tentando as outras balan√ßas mesmo com falha
            else:
                logger.info(f"üîπ Alocado {quantidade}g na {balanca.nome}")
        
        if sucesso_total:
            # Atualiza informa√ß√µes da atividade para aloca√ß√£o m√∫ltipla
            atividade.equipamentos_selecionados = [b for b, _ in distribuicao]
            atividade.equipamento_alocado = distribuicao[0][0]  # Primeira balan√ßa como principal
            atividade.alocada = True
        
        return sucesso_total

    # ==========================================================
    # üîì Libera√ß√£o (mantidos do original)
    # ==========================================================
    def liberar_por_atividade(self, atividade: "AtividadeModular"):
        for balanca in self.balancas:
            balanca.liberar_por_atividade(id_ordem=atividade.id_ordem, id_pedido=atividade.id_pedido, id_atividade=atividade.id_atividade)

    def liberar_por_pedido(self, atividade: "AtividadeModular"):
        for balanca in self.balancas:
            balanca.liberar_por_pedido(id_ordem=atividade.id_ordem, id_pedido=atividade.id_pedido)

    def liberar_por_ordem(self, atividade: "AtividadeModular"):
        for balanca in self.balancas:
            balanca.liberar_por_ordem(id_ordem=atividade.id_ordem)

    def liberar_todas_ocupacoes(self):
        for balanca in self.balancas:
            balanca.liberar_todas_ocupacoes()

    # ==========================================================
    # üìÖ Agenda e Status - CORRIGIDO
    # ==========================================================
    def mostrar_agenda(self):
        logger.info("==============================================")
        logger.info("üìÖ Agenda das Balan√ßas")
        logger.info("==============================================")
        for balanca in self.balancas:
            balanca.mostrar_agenda()

    def obter_status_balancas(self) -> dict:
        """
        Retorna o status atual de todas as balan√ßas.
        """
        status = {}
        for balanca in self.balancas:
            status[balanca.nome] = {
                'capacidade_minima': balanca.capacidade_gramas_min,  # Corrigido
                'capacidade_maxima': balanca.capacidade_gramas_max,  # Corrigido
                'ocupada': len(balanca.ocupacoes) > 0,  # Corrigido - baseado nas ocupa√ß√µes
                'total_ocupacoes': len(balanca.ocupacoes)  # Corrigido - usando ocupacoes
            }
        
        return status

    def listar_alocacoes_multiplas(self, atividade: "AtividadeModular") -> List[dict]:
        """
        üìä Lista aloca√ß√µes m√∫ltiplas para uma atividade espec√≠fica.
        """
        alocacoes_multiplas = []
        balancas_utilizadas = []
        
        for balanca in self.balancas:
            ocupacoes_atividade = [
                oc for oc in balanca.ocupacoes
                if (oc[0] == atividade.id_ordem and 
                    oc[1] == atividade.id_pedido and 
                    oc[2] == atividade.id_atividade)
            ]
            
            if ocupacoes_atividade:
                quantidade_balanca = sum(oc[4] for oc in ocupacoes_atividade)  # Corrigido - √≠ndice 4 √© quantidade
                balancas_utilizadas.append({
                    'nome': balanca.nome,
                    'quantidade': quantidade_balanca
                })
        
        if len(balancas_utilizadas) > 1:
            quantidade_total = sum(b['quantidade'] for b in balancas_utilizadas)
            alocacoes_multiplas.append({
                'id_atividade': atividade.id_atividade,
                'quantidade_total': quantidade_total,
                'num_balancas': len(balancas_utilizadas),
                'balancas': balancas_utilizadas
            })
        
        return alocacoes_multiplas