import unicodedata
import math
from datetime import datetime, timedelta
from typing import List, Optional, Tuple, Dict, TYPE_CHECKING, Union
from models.equipamentos.hot_mix import HotMix
if TYPE_CHECKING:
    from models.atividades.atividade_modular import AtividadeModular
from enums.equipamentos.tipo_velocidade import TipoVelocidade
from enums.equipamentos.tipo_chama import TipoChama
from enums.equipamentos.tipo_pressao_chama import TipoPressaoChama
from utils.logs.logger_factory import setup_logger

logger = setup_logger("GestorMisturadorasComCoccao")


class GestorMisturadorasComCoccao:
    """
    üç≥ Gestor otimizado para controle de misturadoras com coc√ß√£o (HotMix).
    
    Baseado em:
    - Multiple Knapsack Problem para distribui√ß√£o √≥tima
    - First Fit Decreasing (FFD) com restri√ß√µes de capacidade m√≠nima
    - Binary Space Partitioning para divis√£o eficiente
    - Backward scheduling com janelas de tempo simult√¢neas
    
    Funcionalidades:
    - Verifica√ß√£o pr√©via de viabilidade total
    - Distribui√ß√£o otimizada respeitando capacidades m√≠n/m√°x
    - Algoritmo de redistribui√ß√£o com balanceamento de carga
    - JANELAS SIMULT√ÇNEAS: Mesmo id_item s√≥ pode ocupar per√≠odos id√™nticos ou distintos
    - Prioriza√ß√£o por FIP com backward scheduling
    - Otimiza√ß√£o inteligente: evita tentativas individuais quando distribui√ß√£o √© obrigat√≥ria
    """

    def __init__(self, hotmixes: List[HotMix]):
        self.hotmixes = hotmixes
    
    # ==========================================================
    # üìä An√°lise de Viabilidade e Capacidades
    # ==========================================================
    def _calcular_capacidade_total_sistema(self, atividade: "AtividadeModular", id_item: int, 
                                          inicio: datetime, fim: datetime) -> Tuple[float, float]:
        """
        Calcula capacidade total dispon√≠vel do sistema para um item espec√≠fico.
        Retorna: (capacidade_total_disponivel, capacidade_maxima_teorica)
        """
        capacidade_disponivel_total = 0.0
        capacidade_maxima_teorica = 0.0
        
        for hotmix in self.hotmixes:
            # Capacidade m√°xima da HotMix
            cap_max = hotmix.capacidade_gramas_max
            capacidade_maxima_teorica += cap_max
            
            # Verifica se pode receber o item no per√≠odo (janelas simult√¢neas)
            if hotmix.esta_disponivel_para_item_janelas_simultaneas(inicio, fim, id_item):
                # Calcula capacidade dispon√≠vel considerando ocupa√ß√µes simult√¢neas do mesmo item
                capacidade_disponivel = hotmix.obter_capacidade_disponivel_item_simultaneo(id_item, inicio, fim)
                capacidade_disponivel_total += max(0, capacidade_disponivel)
        
        return capacidade_disponivel_total, capacidade_maxima_teorica

    def _verificar_viabilidade_quantidade(self, atividade: "AtividadeModular", quantidade_total: float,
                                        id_item: int, inicio: datetime, fim: datetime) -> Tuple[bool, str]:
        """
        üìö Multiple Knapsack Problem (MKP): Problema cl√°ssico de otimiza√ß√£o combinat√≥ria onde
        m√∫ltiplos "recipientes" (knapsacks) t√™m capacidades limitadas e devem acomodar itens
        com restri√ß√µes. Usado aqui para verificar se o conjunto de HotMixes pode teoricamente 
        comportar a demanda antes de tentar algoritmos de aloca√ß√£o mais custosos computacionalmente.
        
        Verifica se √© teoricamente poss√≠vel alocar a quantidade solicitada com janelas simult√¢neas.
        """
        cap_disponivel, cap_teorica = self._calcular_capacidade_total_sistema(
            atividade, id_item, inicio, fim
        )
        
        if quantidade_total > cap_teorica:
            return False, f"Quantidade {quantidade_total}g excede capacidade m√°xima te√≥rica do sistema ({cap_teorica}g)"
        
        if quantidade_total > cap_disponivel:
            return False, f"Quantidade {quantidade_total}g excede capacidade dispon√≠vel ({cap_disponivel}g) no per√≠odo"
        
        # Verifica se existem HotMixes dispon√≠veis para janelas simult√¢neas
        hotmixes_disponiveis = [
            h for h in self.hotmixes 
            if h.esta_disponivel_para_item_janelas_simultaneas(inicio, fim, id_item)
        ]
        
        if not hotmixes_disponiveis:
            return False, "Nenhuma HotMix dispon√≠vel para o item no per√≠odo (considerando janelas simult√¢neas)"
        
        # Verifica viabilidade com capacidades m√≠nimas
        capacidade_minima_total = sum(h.capacidade_gramas_min for h in hotmixes_disponiveis)
        if quantidade_total < min(h.capacidade_gramas_min for h in hotmixes_disponiveis):
            if len(hotmixes_disponiveis) == 1:
                return True, "Vi√°vel com uma HotMix"
        elif quantidade_total >= capacidade_minima_total:
            return True, "Vi√°vel com m√∫ltiplas HotMixes"
        else:
            return False, f"Quantidade {quantidade_total}g insuficiente para capacidades m√≠nimas ({capacidade_minima_total}g)"
        
        return True, "Quantidade vi√°vel"

    # ==========================================================
    # üßÆ Algoritmos de Distribui√ß√£o Otimizada
    # ==========================================================
    def _algoritmo_distribuicao_balanceada(self, quantidade_total: float, 
                                          hotmixes_disponiveis: List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]) -> List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]:
        """
        Algoritmo de distribui√ß√£o baseado em Binary Space Partitioning adaptado.
        
        üìö Binary Space Partitioning: T√©cnica que divide recursivamente o espa√ßo de solu√ß√µes,
        originalmente usada em computa√ß√£o gr√°fica. Aqui adaptada para dividir a quantidade total
        proporcionalmente entre HotMixes, considerando suas capacidades dispon√≠veis.
        ‚ö° OTIMIZADO PARA BACKWARD SCHEDULING: Evita opera√ß√µes lentas que conflitam com tentativas r√°pidas.
        
        Estrat√©gia:
        1. Ordena HotMixes por capacidade dispon√≠vel (maior primeiro)
        2. Aplica divis√£o proporcional otimizada
        3. Ajuste √∫nico e direto (sem itera√ß√µes)
        """
        if not hotmixes_disponiveis:
            return []
        
        # Ordena por capacidade dispon√≠vel (maior primeiro)
        hotmixes_ordenadas = sorted(hotmixes_disponiveis, key=lambda x: x[1], reverse=True)
        
        # Capacidade total dispon√≠vel
        capacidade_total_disponivel = sum(cap for _, cap, _, _, _ in hotmixes_ordenadas)
        
        if capacidade_total_disponivel < quantidade_total:
            return []
        
        # ‚ö° DISTRIBUI√á√ÉO PROPORCIONAL DIRETA - Sem ajustes iterativos posteriores
        distribuicao = []
        quantidade_restante = quantidade_total
        
        for i, (hotmix, cap_disponivel, velocidade, chama, pressoes) in enumerate(hotmixes_ordenadas):
            if quantidade_restante <= 0:
                break
                
            if i == len(hotmixes_ordenadas) - 1:
                # √öltima HotMix: recebe todo o restante (se couber)
                quantidade_hotmix = min(quantidade_restante, cap_disponivel)
            else:
                # Distribui√ß√£o proporcional direta
                proporcao = cap_disponivel / capacidade_total_disponivel
                quantidade_proporcional = quantidade_total * proporcao
                
                # ‚ö° AJUSTE DIRETO: Garante limites sem itera√ß√µes
                quantidade_hotmix = max(
                    hotmix.capacidade_gramas_min,
                    min(quantidade_proporcional, cap_disponivel, quantidade_restante)
                )
            
            # S√≥ adiciona se atende capacidade m√≠nima
            if quantidade_hotmix >= hotmix.capacidade_gramas_min:
                distribuicao.append((hotmix, quantidade_hotmix, velocidade, chama, pressoes))
                quantidade_restante -= quantidade_hotmix
        
        # ‚ö° VERIFICA√á√ÉO FINAL R√ÅPIDA: Se sobrou quantidade significativa, falha r√°pido
        if quantidade_restante > 1.0:  # Toler√¢ncia de 1g
            return []  # Falha r√°pida para backward scheduling tentar pr√≥xima janela
        
        return distribuicao

    def _redistribuir_excedentes(self, distribuicao: List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]], 
                                quantidade_target: float) -> List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]:
        """
        üìö Fast Load Balancing: Vers√£o otimizada para backward scheduling que evita itera√ß√µes longas.
        Aplica ajuste direto em uma √∫nica passada para ser compat√≠vel com tentativas r√°pidas
        de janelas temporais. Prioriza velocidade sobre precis√£o absoluta na distribui√ß√£o.
        
        Redistribui quantidades para atingir o target exato respeitando limites - OTIMIZADO PARA SPEED.
        """
        quantidade_atual = sum(qtd for _, qtd, _, _, _ in distribuicao)
        diferenca = quantidade_target - quantidade_atual
        
        # Toler√¢ncia mais flex√≠vel para evitar itera√ß√µes desnecess√°rias
        if abs(diferenca) < 1.0:  # Toler√¢ncia de 1g para speed
            return distribuicao
        
        # üöÄ AJUSTE √öNICO E DIRETO - Sem itera√ß√µes que conflitem com backward scheduling
        if diferenca > 0:
            # Precisa adicionar quantidade - distribui o excesso proporcionalmente
            hotmixes_com_margem = [
                (i, hotmix.capacidade_gramas_max - qtd) 
                for i, (hotmix, qtd, _, _, _) in enumerate(distribuicao)
                if hotmix.capacidade_gramas_max - qtd > 0
            ]
            
            if hotmixes_com_margem:
                margem_total = sum(margem for _, margem in hotmixes_com_margem)
                
                for i, margem_disponivel in hotmixes_com_margem:
                    if diferenca <= 0:
                        break
                    
                    hotmix, qtd_atual, vel, chama, press = distribuicao[i]
                    proporcao = margem_disponivel / margem_total
                    adicionar = min(diferenca, diferenca * proporcao)
                    adicionar = min(adicionar, margem_disponivel)  # N√£o excede capacidade
                    
                    distribuicao[i] = (hotmix, qtd_atual + adicionar, vel, chama, press)
                    diferenca -= adicionar
        
        elif diferenca < 0:
            # Precisa remover quantidade - remove proporcionalmente das que t√™m margem
            diferenca = abs(diferenca)
            hotmixes_com_margem = [
                (i, qtd - hotmix.capacidade_gramas_min) 
                for i, (hotmix, qtd, _, _, _) in enumerate(distribuicao)
                if qtd - hotmix.capacidade_gramas_min > 0
            ]
            
            if hotmixes_com_margem:
                margem_total = sum(margem for _, margem in hotmixes_com_margem)
                
                for i, margem_removivel in hotmixes_com_margem:
                    if diferenca <= 0:
                        break
                    
                    hotmix, qtd_atual, vel, chama, press = distribuicao[i]
                    proporcao = margem_removivel / margem_total
                    remover = min(diferenca, diferenca * proporcao)
                    remover = min(remover, margem_removivel)  # N√£o fica abaixo do m√≠nimo
                    
                    distribuicao[i] = (hotmix, qtd_atual - remover, vel, chama, press)
                    diferenca -= remover
        
        # Remove HotMixes com quantidade abaixo do m√≠nimo (ajuste final r√°pido)
        distribuicao_final = [
            (hotmix, qtd, vel, chama, press) for hotmix, qtd, vel, chama, press in distribuicao
            if qtd >= hotmix.capacidade_gramas_min
        ]
        
        return distribuicao_final

    def _algoritmo_first_fit_decreasing(self, quantidade_total: float,
                                      hotmixes_disponiveis: List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]) -> List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]:
        """
        üìö First Fit Decreasing (FFD): Algoritmo cl√°ssico de Bin Packing que ordena itens
        por tamanho decrescente e aloca cada item no primeiro recipiente que couber.
        Garante aproxima√ß√£o de 11/9 do √≥timo e √© amplamente usado em problemas de otimiza√ß√£o.
        Adaptado aqui para respeitar capacidades m√≠nimas das HotMixes, evitando
        distribui√ß√µes que violem restri√ß√µes operacionais.
        
        Implementa√ß√£o do algoritmo First Fit Decreasing adaptado para capacidades m√≠nimas.
        """
        # Ordena HotMixes por capacidade dispon√≠vel (maior primeiro)
        hotmixes_ordenadas = sorted(hotmixes_disponiveis, key=lambda x: x[1], reverse=True)
        
        distribuicao = []
        quantidade_restante = quantidade_total
        
        for hotmix, cap_disponivel, velocidade, chama, pressoes in hotmixes_ordenadas:
            if quantidade_restante <= 0:
                break
            
            # Calcula quanto alocar nesta HotMix
            if quantidade_restante >= hotmix.capacidade_gramas_min:
                quantidade_alocar = min(quantidade_restante, cap_disponivel)
                
                # Garante que n√£o fica quantidade insuficiente para pr√≥ximas HotMixes
                hotmixes_restantes = [h for h, _, _, _, _ in hotmixes_ordenadas 
                                    if h != hotmix and (quantidade_restante - quantidade_alocar) > 0]
                
                if hotmixes_restantes:
                    cap_min_restantes = min(h.capacidade_gramas_min for h in hotmixes_restantes)
                    if quantidade_restante - quantidade_alocar < cap_min_restantes and quantidade_restante - quantidade_alocar > 0:
                        # Ajusta para deixar quantidade suficiente
                        quantidade_alocar = quantidade_restante - cap_min_restantes
                
                if quantidade_alocar >= hotmix.capacidade_gramas_min:
                    distribuicao.append((hotmix, quantidade_alocar, velocidade, chama, pressoes))
                    quantidade_restante -= quantidade_alocar
        
        return distribuicao if quantidade_restante <= 0.1 else []

    def _calcular_distribuicao_otima(self, quantidade_total: float, 
                                   hotmixes_disponiveis: List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]) -> List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]:
        """
        ‚ö° OTIMIZADO PARA BACKWARD SCHEDULING: Calcula distribui√ß√£o √≥tima com limite de tempo.
        Testa algoritmos rapidamente e retorna a primeira solu√ß√£o vi√°vel para n√£o atrasar
        o backward scheduling que precisa testar muitas janelas temporais.
        """
        # üöÄ ESTRAT√âGIA 1: Tenta distribui√ß√£o balanceada (mais r√°pida)
        dist_balanceada = self._algoritmo_distribuicao_balanceada(quantidade_total, hotmixes_disponiveis)
        
        if dist_balanceada and sum(qtd for _, qtd, _, _, _ in dist_balanceada) >= quantidade_total * 0.98:
            logger.debug(f"üìä Distribui√ß√£o balanceada aceita com {len(dist_balanceada)} HotMixes")
            return dist_balanceada
        
        # üöÄ ESTRAT√âGIA 2: Se balanceada falhou, tenta FFD
        dist_ffd = self._algoritmo_first_fit_decreasing(quantidade_total, hotmixes_disponiveis)
        
        if dist_ffd and sum(qtd for _, qtd, _, _, _ in dist_ffd) >= quantidade_total * 0.98:
            logger.debug(f"üìä Distribui√ß√£o FFD aceita com {len(dist_ffd)} HotMixes")
            return dist_ffd
        
        # ‚ùå Nenhuma estrat√©gia funcionou - falha r√°pida para backward scheduling continuar
        logger.debug("üìä Nenhuma distribui√ß√£o vi√°vel encontrada - prosseguindo backward scheduling")
        return []

    def _calcular_balanceamento(self, distribuicao: List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]]) -> float:
        """
        Calcula score de balanceamento da distribui√ß√£o (maior = mais balanceado).
        """
        if len(distribuicao) <= 1:
            return 1.0
        
        quantidades = [qtd for _, qtd, _, _, _ in distribuicao]
        media = sum(quantidades) / len(quantidades)
        variancia = sum((qtd - media) ** 2 for qtd in quantidades) / len(quantidades)
        
        # Score inversamente proporcional √† vari√¢ncia
        return 1.0 / (1.0 + variancia / media**2) if media > 0 else 0.0

    # ==========================================================
    # üìä Ordena√ß√£o dos equipamentos por FIP (fator de import√¢ncia)
    # ==========================================================  
    def _ordenar_por_fip(self, atividade: "AtividadeModular") -> List[HotMix]:
        """Ordena HotMixes por fator de import√¢ncia de prioridade."""
        ordenadas = sorted(
            self.hotmixes,
            key=lambda m: atividade.fips_equipamentos.get(m, 999)
        )
        return ordenadas
    
    # ==========================================================
    # üîç Leitura dos par√¢metros via JSON
    # ==========================================================
    @staticmethod
    def _normalizar_nome(nome: str) -> str:
        """Normaliza nome para busca no JSON de configura√ß√µes."""
        return unicodedata.normalize("NFKD", nome.lower()).encode("ASCII", "ignore").decode().replace(" ", "_")

    def _obter_ids_atividade(self, atividade: "AtividadeModular") -> Tuple[int, int, int, int]:
        """
        Extrai os IDs da atividade de forma consistente.
        Retorna: (id_ordem, id_pedido, id_atividade, id_item)
        """
        id_ordem = getattr(atividade, 'id_ordem', None) or getattr(atividade, 'ordem_id', 0)
        id_pedido = getattr(atividade, 'id_pedido', None) or getattr(atividade, 'pedido_id', 0)
        id_atividade = getattr(atividade, 'id_atividade', 0)
        # id_item √© o produto/subproduto que est√° sendo produzido
        id_item = getattr(atividade, 'id_produto', 0)
        
        return id_ordem, id_pedido, id_atividade, id_item

    def _obter_velocidade(self, atividade: "AtividadeModular", hotmix: HotMix) -> Optional[TipoVelocidade]:
        """Obt√©m a velocidade necess√°ria para a atividade."""
        chave = self._normalizar_nome(hotmix.nome)
        config = getattr(atividade, "configuracoes_equipamentos", {}).get(chave)
        valor = config.get("velocidade") if config else None
        try:
            return TipoVelocidade[valor] if valor else None
        except Exception:
            return None

    def _obter_chama(self, atividade: "AtividadeModular", hotmix: HotMix) -> Optional[TipoChama]:
        """Obt√©m o tipo de chama necess√°rio para a atividade."""
        chave = self._normalizar_nome(hotmix.nome)
        config = getattr(atividade, "configuracoes_equipamentos", {}).get(chave)
        valor = config.get("tipo_chama") if config else None
        try:
            return TipoChama[valor] if valor else None
        except Exception:
            return None

    def _obter_pressoes(self, atividade: "AtividadeModular", hotmix: HotMix) -> List[TipoPressaoChama]:
        """Obt√©m as press√µes de chama necess√°rias para a atividade."""
        chave = self._normalizar_nome(hotmix.nome)
        config = getattr(atividade, "configuracoes_equipamentos", {}).get(chave)
        valores = config.get("pressao_chama") if config else []
        pressoes = []
        for p in valores:
            try:
                pressoes.append(TipoPressaoChama[p])
            except Exception:
                continue
        return pressoes

    def _verificar_compatibilidade_parametros(self, hotmix: HotMix, id_item: int, velocidade: TipoVelocidade, chama: TipoChama, pressoes: List[TipoPressaoChama], inicio: datetime, fim: datetime) -> bool:
        """
        Verifica se os par√¢metros s√£o compat√≠veis com ocupa√ß√µes existentes do mesmo produto.
        üéØ REGRA DE SOBREPOSI√á√ÉO: Permite apenas simultaneidade exata ou per√≠odos distintos.
        """
        
        for ocupacao in hotmix.obter_ocupacoes_item_periodo(id_item, inicio, fim):
            # ocupacao = (id_ordem, id_pedido, id_atividade, id_item, quantidade, velocidade, chama, pressoes, inicio, fim)
            inicio_existente = ocupacao[8]
            fim_existente = ocupacao[9]
            vel_existente = ocupacao[5]
            chama_existente = ocupacao[6]
            press_existentes = ocupacao[7]
            
            # üéØ REGRA DE JANELA TEMPORAL: S√≥ permite simultaneidade exata ou per√≠odos distintos
            simultaneidade_exata = (inicio == inicio_existente and fim == fim_existente)
            periodos_distintos = (fim <= inicio_existente or inicio >= fim_existente)
            
            if not (simultaneidade_exata or periodos_distintos):
                logger.debug(f"‚ùå Sobreposi√ß√£o temporal inv√°lida: per√≠odo {inicio.strftime('%H:%M')}-{fim.strftime('%H:%M')} conflita com ocupa√ß√£o existente {inicio_existente.strftime('%H:%M')}-{fim_existente.strftime('%H:%M')}")
                return False
            
            # Se h√° simultaneidade exata, verifica compatibilidade de par√¢metros
            if simultaneidade_exata:
                # Verificar se velocidade √© compat√≠vel
                if vel_existente != velocidade:
                    logger.debug(f"‚ùå Velocidade incompat√≠vel: existente={vel_existente.name}, nova={velocidade.name}")
                    return False
                
                # Verificar se chama √© compat√≠vel
                if chama_existente != chama:
                    logger.debug(f"‚ùå Chama incompat√≠vel: existente={chama_existente.name}, nova={chama.name}")
                    return False
                
                # Verificar se press√µes s√£o compat√≠veis
                if set(press_existentes) != set(pressoes):
                    logger.debug(f"‚ùå Press√µes incompat√≠veis: existentes={[p.name for p in press_existentes]}, novas={[p.name for p in pressoes]}")
                    return False
        
        return True

    # ==========================================================
    # üîÑ Aloca√ß√£o Otimizada Individual e Distribu√≠da
    # ==========================================================
    def _tentar_alocacao_individual(
        self, 
        inicio_tentativa: datetime, 
        fim_tentativa: datetime,
        atividade: "AtividadeModular",
        quantidade_gramas: int,
        hotmixes_ordenados: List[HotMix],
        id_ordem: int, id_pedido: int, id_atividade: int, id_item: int
    ) -> Optional[Tuple[HotMix, datetime, datetime]]:
        """
        Tenta alocar toda a quantidade em uma √∫nica HotMix.
        üéØ JANELAS SIMULT√ÇNEAS: Permite sobreposi√ß√£o do mesmo id_item apenas com janelas id√™nticas.
        """
        for hotmix in hotmixes_ordenados:
            # Obter configura√ß√µes t√©cnicas
            velocidade = self._obter_velocidade(atividade, hotmix)
            chama = self._obter_chama(atividade, hotmix)
            pressoes = self._obter_pressoes(atividade, hotmix)
            
            if velocidade is None or chama is None or not pressoes:
                logger.debug(f"‚ùå {hotmix.nome}: configura√ß√µes incompletas")
                continue
            
            # Verifica se pode alocar considerando janelas simult√¢neas
            if not hotmix.esta_disponivel_para_item_janelas_simultaneas(inicio_tentativa, fim_tentativa, id_item):
                logger.debug(f"‚ùå {hotmix.nome}: ocupada por item diferente ou janela temporal conflitante")
                continue
            
            # Verifica se quantidade individual est√° nos limites da HotMix
            if not hotmix.validar_capacidade(quantidade_gramas):
                logger.debug(f"‚ùå {hotmix.nome}: quantidade {quantidade_gramas}g fora dos limites")
                continue
            
            # Verifica compatibilidade de par√¢metros com ocupa√ß√µes existentes do mesmo item
            if not self._verificar_compatibilidade_parametros(hotmix, id_item, velocidade, chama, pressoes, inicio_tentativa, fim_tentativa):
                logger.debug(f"‚ùå {hotmix.nome}: par√¢metros incompat√≠veis com ocupa√ß√µes existentes do item {id_item}")
                continue
            
            # Tenta adicionar a ocupa√ß√£o (valida√ß√£o din√¢mica de capacidade interna com janelas simult√¢neas)
            sucesso = hotmix.ocupar_janelas_simultaneas(
                id_ordem=id_ordem,
                id_pedido=id_pedido,
                id_atividade=id_atividade,
                id_item=id_item,
                quantidade=quantidade_gramas,
                velocidade=velocidade,
                chama=chama,
                pressao_chamas=pressoes,
                inicio=inicio_tentativa,
                fim=fim_tentativa
            )
            
            if sucesso:
                logger.debug(f"‚úÖ {hotmix.nome}: aloca√ß√£o individual bem-sucedida para item {id_item} (janelas simult√¢neas)")
                return hotmix, inicio_tentativa, fim_tentativa
            else:
                logger.debug(f"‚ùå {hotmix.nome}: falha na valida√ß√£o de capacidade din√¢mica com janelas simult√¢neas")
        
        return None

    def _tentar_alocacao_distribuida_otimizada(
        self, 
        inicio_tentativa: datetime, 
        fim_tentativa: datetime,
        atividade: "AtividadeModular",
        quantidade_gramas: int,
        hotmixes_ordenados: List[HotMix],
        id_ordem: int, id_pedido: int, id_atividade: int, id_item: int
    ) -> Optional[Tuple[List[HotMix], datetime, datetime]]:
        """
        NOVA IMPLEMENTA√á√ÉO: Tenta aloca√ß√£o distribu√≠da usando algoritmos otimizados.
        üéØ JANELAS SIMULT√ÇNEAS: Aplica verifica√ß√£o de janelas simult√¢neas para m√∫ltiplas HotMixes.
        """
        # Fase 1: Verifica√ß√£o de viabilidade com janelas simult√¢neas
        viavel, motivo = self._verificar_viabilidade_quantidade(
            atividade, float(quantidade_gramas), id_item, inicio_tentativa, fim_tentativa
        )
        
        if not viavel:
            logger.debug(f"‚ùå Invi√°vel no hor√°rio {inicio_tentativa.strftime('%H:%M')}: {motivo}")
            return None

        # Fase 2: Coleta HotMixes com configura√ß√µes t√©cnicas v√°lidas e janelas simult√¢neas
        hotmixes_com_capacidade = []
        
        for hotmix in hotmixes_ordenados:
            # Verifica disponibilidade para o item espec√≠fico com janelas simult√¢neas
            if not hotmix.esta_disponivel_para_item_janelas_simultaneas(inicio_tentativa, fim_tentativa, id_item):
                logger.debug(f"‚ùå {hotmix.nome}: ocupada por item diferente ou janela temporal conflitante")
                continue
            
            # Obter configura√ß√µes t√©cnicas
            velocidade = self._obter_velocidade(atividade, hotmix)
            chama = self._obter_chama(atividade, hotmix)
            pressoes = self._obter_pressoes(atividade, hotmix)
            
            if velocidade is None or chama is None or not pressoes:
                logger.debug(f"‚ùå {hotmix.nome}: configura√ß√µes incompletas")
                continue
            
            # Verifica compatibilidade de par√¢metros
            if not self._verificar_compatibilidade_parametros(hotmix, id_item, velocidade, chama, pressoes, inicio_tentativa, fim_tentativa):
                logger.debug(f"‚ùå {hotmix.nome}: par√¢metros incompat√≠veis")
                continue
            
            # Calcula capacidade dispon√≠vel real para o item espec√≠fico com janelas simult√¢neas
            capacidade_disponivel = hotmix.obter_capacidade_disponivel_item_simultaneo(
                id_item, inicio_tentativa, fim_tentativa
            )
            
            # Deve ter pelo menos capacidade m√≠nima dispon√≠vel
            if capacidade_disponivel >= hotmix.capacidade_gramas_min:
                hotmixes_com_capacidade.append((hotmix, capacidade_disponivel, velocidade, chama, pressoes))
                logger.debug(f"üîç {hotmix.nome}: {capacidade_disponivel}g dispon√≠vel para item {id_item} (janelas simult√¢neas)")

        if not hotmixes_com_capacidade:
            logger.debug("‚ùå Nenhuma HotMix com capacidade m√≠nima dispon√≠vel (janelas simult√¢neas)")
            return None

        # Fase 3: Aplica algoritmos de distribui√ß√£o otimizada
        distribuicao = self._calcular_distribuicao_otima(float(quantidade_gramas), hotmixes_com_capacidade)
        
        if not distribuicao:
            logger.debug("‚ùå Algoritmos de distribui√ß√£o n√£o encontraram solu√ß√£o vi√°vel (janelas simult√¢neas)")
            return None

        # Fase 4: Executa aloca√ß√£o m√∫ltipla com janelas simult√¢neas
        sucesso = self._executar_alocacao_multipla_hotmix(
            distribuicao, inicio_tentativa, fim_tentativa, 
            id_ordem, id_pedido, id_atividade, id_item
        )
        
        if sucesso:
            hotmixes_alocadas = [h for h, _, _, _, _ in distribuicao]
            logger.debug(f"‚úÖ Aloca√ß√£o m√∫ltipla otimizada: {len(hotmixes_alocadas)} HotMixes para item {id_item} (janelas simult√¢neas)")
            return hotmixes_alocadas, inicio_tentativa, fim_tentativa
        
        return None

    def _executar_alocacao_multipla_hotmix(self, distribuicao: List[Tuple[HotMix, float, TipoVelocidade, TipoChama, List[TipoPressaoChama]]], 
                                         inicio: datetime, fim: datetime,
                                         id_ordem: int, id_pedido: int, id_atividade: int, id_item: int) -> bool:
        """
        Executa aloca√ß√£o em m√∫ltiplas HotMixes conforme distribui√ß√£o calculada.
        üéØ JANELAS SIMULT√ÇNEAS: Usa m√©todo espec√≠fico para janelas simult√¢neas.
        """
        # Lista para rollback em caso de falha
        alocacoes_realizadas = []
        
        try:
            for hotmix, quantidade, velocidade, chama, pressoes in distribuicao:
                sucesso = hotmix.ocupar_janelas_simultaneas(
                    id_ordem=id_ordem,
                    id_pedido=id_pedido,
                    id_atividade=id_atividade,
                    id_item=id_item,
                    quantidade=quantidade,
                    velocidade=velocidade,
                    chama=chama,
                    pressao_chamas=pressoes,
                    inicio=inicio,
                    fim=fim
                )
                
                if not sucesso:
                    # Rollback das aloca√ß√µes j√° realizadas
                    for h_rollback in alocacoes_realizadas:
                        h_rollback.liberar_por_atividade(id_ordem, id_pedido, id_atividade)
                    return False
                
                alocacoes_realizadas.append(hotmix)
                logger.info(f"üîπ Alocado {quantidade}g na {hotmix.nome} (janelas simult√¢neas)")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na aloca√ß√£o m√∫ltipla com janelas simult√¢neas: {e}")
            # Rollback em caso de erro
            for h_rollback in alocacoes_realizadas:
                h_rollback.liberar_por_atividade(id_ordem, id_pedido, id_atividade)
            return False

    # ==========================================================
    # üéØ Aloca√ß√£o Principal com Backward Scheduling e Janelas Simult√¢neas
    # ==========================================================    
    def alocar(
        self,
        inicio: datetime,
        fim: datetime,
        atividade: "AtividadeModular",
        quantidade_gramas: int,
        **kwargs
    ) -> Tuple[bool, Optional[List[HotMix]], Optional[datetime], Optional[datetime]]:
        """
        Aloca HotMixes seguindo a estrat√©gia otimizada com janelas de tempo simult√¢neas:
        1. Verifica√ß√£o de viabilidade total usando Multiple Knapsack Problem
        2. Verifica√ß√£o de capacidade total do sistema primeiro
        3. Tenta aloca√ß√£o individual por FIP 
        4. Tenta distribui√ß√£o otimizada usando algoritmos inteligentes
        5. Usa backward scheduling minuto a minuto
        6. üéØ JANELAS SIMULT√ÇNEAS: Mesmo id_item s√≥ pode ocupar per√≠odos id√™nticos ou distintos
        """
        duracao = atividade.duracao
        hotmixes_ordenados = self._ordenar_por_fip(atividade)
        horario_final_tentativa = fim
        
        # Obter IDs da atividade de forma consistente
        id_ordem, id_pedido, id_atividade, id_item = self._obter_ids_atividade(atividade)

        if quantidade_gramas <= 0:
            logger.warning(f"‚ùå Quantidade inv√°lida para atividade {id_atividade}: {quantidade_gramas}")
            return False, None, None, None

        logger.info(f"üéØ Iniciando aloca√ß√£o otimizada atividade {id_atividade}: {quantidade_gramas}g do item {id_item} (JANELAS SIMULT√ÇNEAS)")
        logger.debug(f"üìÖ Janela: {inicio.strftime('%H:%M')} at√© {fim.strftime('%H:%M')} (dura√ß√£o: {duracao})")
        
        # üîç DIAGN√ìSTICO: Verifica capacidades dispon√≠veis
        capacidades_individuais = [h.capacidade_gramas_max for h in hotmixes_ordenados]
        capacidade_total_sistema = sum(capacidades_individuais)
        capacidade_maxima_individual = max(capacidades_individuais)
        
        logger.debug(f"üîç DIAGN√ìSTICO: Quantidade necess√°ria {quantidade_gramas}g")
        logger.debug(f"üîç DIAGN√ìSTICO: Capacidades individuais: {capacidades_individuais}")
        logger.debug(f"üîç DIAGN√ìSTICO: Capacidade total sistema: {capacidade_total_sistema}g")
        logger.debug(f"üîç DIAGN√ìSTICO: Capacidade m√°xima individual: {capacidade_maxima_individual}g")
        
        # üìã REGRA PRINCIPAL: Primeiro verifica se capacidade total do sistema atende
        if quantidade_gramas > capacidade_total_sistema:
            logger.warning(f"‚ùå Quantidade {quantidade_gramas}g > capacidade total {capacidade_total_sistema}g - IMPOSS√çVEL")
            return False, None, None, None
        
        logger.info(f"‚úÖ Capacidade total do sistema ({capacidade_total_sistema}g) atende a demanda ({quantidade_gramas}g)")

        # ==========================================================
        # üîÑ BACKWARD SCHEDULING COM JANELAS SIMULT√ÇNEAS - MINUTO A MINUTO
        # ==========================================================
        tentativas = 0
        while horario_final_tentativa - duracao >= inicio:
            tentativas += 1
            horario_inicio_tentativa = horario_final_tentativa - duracao
            
            logger.debug(f"‚è∞ Tentativa {tentativas}: {horario_inicio_tentativa.strftime('%H:%M')} at√© {horario_final_tentativa.strftime('%H:%M')}")

            # 1Ô∏è‚É£ PRIMEIRA ESTRAT√âGIA: Tenta aloca√ß√£o integral em uma HotMix
            logger.debug(f"üîç Tentando aloca√ß√£o individual - quantidade {quantidade_gramas}g")
            sucesso_individual = self._tentar_alocacao_individual(
                horario_inicio_tentativa, horario_final_tentativa,
                atividade, quantidade_gramas, hotmixes_ordenados,
                id_ordem, id_pedido, id_atividade, id_item
            )
            
            if sucesso_individual:
                hotmix_usada, inicio_real, fim_real = sucesso_individual
                atividade.equipamento_alocado = hotmix_usada
                atividade.equipamentos_selecionados = [hotmix_usada]
                atividade.alocada = True
                
                minutos_retrocedidos = int((fim - fim_real).total_seconds() / 60)
                logger.info(
                    f"‚úÖ Atividade {id_atividade} (Item {id_item}) alocada INTEIRAMENTE na {hotmix_usada.nome} "
                    f"({quantidade_gramas}g) de {inicio_real.strftime('%H:%M')} at√© {fim_real.strftime('%H:%M')} "
                    f"(retrocedeu {minutos_retrocedidos} minutos) [JANELAS SIMULT√ÇNEAS]"
                )
                return True, [hotmix_usada], inicio_real, fim_real

            # 2Ô∏è‚É£ SEGUNDA ESTRAT√âGIA: Tenta aloca√ß√£o distribu√≠da otimizada entre m√∫ltiplas HotMixes
            logger.debug(f"üîç Tentando aloca√ß√£o distribu√≠da para {quantidade_gramas}g")
            sucesso_distribuido = self._tentar_alocacao_distribuida_otimizada(
                horario_inicio_tentativa, horario_final_tentativa,
                atividade, quantidade_gramas, hotmixes_ordenados,
                id_ordem, id_pedido, id_atividade, id_item
            )
            
            if sucesso_distribuido:
                hotmixes_usadas, inicio_real, fim_real = sucesso_distribuido
                atividade.equipamento_alocado = None  # M√∫ltiplas HotMixes
                atividade.equipamentos_selecionados = hotmixes_usadas
                atividade.alocada = True
                
                # Adiciona informa√ß√£o de aloca√ß√£o m√∫ltipla se dispon√≠vel
                if hasattr(atividade, 'alocacao_multipla'):
                    atividade.alocacao_multipla = True
                
                minutos_retrocedidos = int((fim - fim_real).total_seconds() / 60)
                logger.info(
                    f"üß© Atividade {id_atividade} (Item {id_item}) DIVIDIDA OTIMIZADA entre "
                    f"{', '.join(h.nome for h in hotmixes_usadas)} "
                    f"({quantidade_gramas}g total) de {inicio_real.strftime('%H:%M')} at√© {fim_real.strftime('%H:%M')} "
                    f"(retrocedeu {minutos_retrocedidos} minutos) [JANELAS SIMULT√ÇNEAS]"
                )
                return True, hotmixes_usadas, inicio_real, fim_real

            # 3Ô∏è‚É£ Falhou nesta janela: RETROCEDE 1 MINUTO
            horario_final_tentativa -= timedelta(minutes=1)
            
            # Log ocasional para evitar spam
            if tentativas % 10 == 0:
                logger.debug(f"‚è™ Tentativa {tentativas}: retrocedendo para {horario_final_tentativa.strftime('%H:%M')}")

        # N√£o conseguiu alocar em nenhuma janela v√°lida
        minutos_total_retrocedidos = int((fim - (inicio + duracao)).total_seconds() / 60)
        logger.warning(
            f"‚ùå Atividade {id_atividade} (Item {id_item}) n√£o p√¥de ser alocada ap√≥s {tentativas} tentativas "
            f"dentro da janela entre {inicio.strftime('%H:%M')} e {fim.strftime('%H:%M')}. "
            f"Quantidade necess√°ria: {quantidade_gramas}g "
            f"(retrocedeu at√© o limite de {minutos_total_retrocedidos} minutos) [JANELAS SIMULT√ÇNEAS]"
        )
        return False, None, None, None
    
    # ==========================================================
    # üîì Libera√ß√µes (mantidas do original)
    # ==========================================================
    def liberar_por_atividade(self, atividade: "AtividadeModular"):
        """Libera ocupa√ß√µes espec√≠ficas por atividade."""
        id_ordem, id_pedido, id_atividade, _ = self._obter_ids_atividade(atividade)
        for hotmix in self.hotmixes:
            hotmix.liberar_por_atividade(
                id_ordem=id_ordem, 
                id_pedido=id_pedido, 
                id_atividade=id_atividade
            )
    
    def liberar_por_pedido(self, atividade: "AtividadeModular"):
        """Libera ocupa√ß√µes espec√≠ficas por pedido."""
        id_ordem, id_pedido, _, _ = self._obter_ids_atividade(atividade)
        for hotmix in self.hotmixes:
            hotmix.liberar_por_pedido(
                id_ordem=id_ordem, 
                id_pedido=id_pedido
            )

    def liberar_por_ordem(self, atividade: "AtividadeModular"):
        """Libera ocupa√ß√µes espec√≠ficas por ordem."""
        id_ordem, _, _, _ = self._obter_ids_atividade(atividade)
        for hotmix in self.hotmixes:
            hotmix.liberar_por_ordem(id_ordem=id_ordem)
      
    def liberar_ocupacoes_finalizadas(self, horario_atual: datetime):
        """Libera ocupa√ß√µes que j√° finalizaram."""
        for hotmix in self.hotmixes:
            hotmix.liberar_ocupacoes_finalizadas(horario_atual)

    def liberar_todas_ocupacoes(self):
        """Limpa todas as ocupa√ß√µes de todas as HotMixes."""
        for hotmix in self.hotmixes:
            hotmix.liberar_todas_ocupacoes()

    # ==========================================================
    # üìÖ Agenda e Relat√≥rios (mantidos do original)
    # ==========================================================
    def mostrar_agenda(self):
        """Mostra agenda consolidada de todas as HotMixes."""
        logger.info("==============================================")
        logger.info("üìÖ Agenda das Misturadoras com Coc√ß√£o (HotMix) - JANELAS SIMULT√ÇNEAS")
        logger.info("==============================================")
        for hotmix in self.hotmixes:
            hotmix.mostrar_agenda()

    def obter_status_hotmixes(self) -> dict:
        """Retorna o status atual de todas as HotMixes."""
        status = {}
        for hotmix in self.hotmixes:
            ocupacoes_ativas = [
                {
                    'id_ordem': oc[0],
                    'id_pedido': oc[1],
                    'id_atividade': oc[2],
                    'id_item': oc[3],
                    'quantidade': oc[4],
                    'velocidade': oc[5].name,
                    'chama': oc[6].name,
                    'pressoes': [p.name for p in oc[7]],
                    'inicio': oc[8].strftime('%H:%M'),
                    'fim': oc[9].strftime('%H:%M')
                }
                for oc in hotmix.ocupacoes
            ]
            
            status[hotmix.nome] = {
                'capacidade_minima': hotmix.capacidade_gramas_min,
                'capacidade_maxima': hotmix.capacidade_gramas_max,
                'total_ocupacoes': len(hotmix.ocupacoes),
                'ocupacoes_ativas': ocupacoes_ativas
            }
        
        return status

    def verificar_disponibilidade(
        self,
        inicio: datetime,
        fim: datetime,
        id_item: Optional[int] = None,
        quantidade: Optional[int] = None
    ) -> List[HotMix]:
        """
        Verifica quais HotMixes est√£o dispon√≠veis no per√≠odo para um item espec√≠fico.
        üéØ JANELAS SIMULT√ÇNEAS: Considera regras de janelas simult√¢neas.
        """
        disponiveis = []
        
        for hotmix in self.hotmixes:
            if id_item is not None:
                if hotmix.esta_disponivel_para_item_janelas_simultaneas(inicio, fim, id_item):
                    if quantidade is None:
                        disponiveis.append(hotmix)
                    else:
                        # Verifica se pode adicionar a quantidade especificada com janelas simult√¢neas
                        if hotmix.validar_nova_ocupacao_item_simultaneo(id_item, quantidade, inicio, fim):
                            disponiveis.append(hotmix)
            else:
                # Comportamento original para compatibilidade
                if hotmix.esta_disponivel(inicio, fim):
                    if quantidade is None or hotmix.validar_capacidade(quantidade):
                        disponiveis.append(hotmix)
        
        return disponiveis

    def obter_utilizacao_por_item(self, id_item: int) -> dict:
        """
        üìä Retorna informa√ß√µes de utiliza√ß√£o de um item espec√≠fico em todas as HotMixes.
        """
        utilizacao = {}
        
        for hotmix in self.hotmixes:
            ocupacoes_item = [
                oc for oc in hotmix.ocupacoes if oc[3] == id_item
            ]
            
            if ocupacoes_item:
                quantidade_total = sum(oc[4] for oc in ocupacoes_item)
                periodo_inicio = min(oc[8] for oc in ocupacoes_item)
                periodo_fim = max(oc[9] for oc in ocupacoes_item)
                
                utilizacao[hotmix.nome] = {
                    'quantidade_total': quantidade_total,
                    'num_ocupacoes': len(ocupacoes_item),
                    'periodo_inicio': periodo_inicio.strftime('%H:%M'),
                    'periodo_fim': periodo_fim.strftime('%H:%M'),
                    'ocupacoes': [
                        {
                            'id_ordem': oc[0],
                            'id_pedido': oc[1],
                            'quantidade': oc[4],
                            'inicio': oc[8].strftime('%H:%M'),
                            'fim': oc[9].strftime('%H:%M')
                        }
                        for oc in ocupacoes_item
                    ]
                }
        
        return utilizacao

    def calcular_pico_utilizacao_item(self, id_item: int) -> dict:
        """
        üìà Calcula o pico de utiliza√ß√£o de um item espec√≠fico em cada HotMix.
        """
        picos = {}
        
        for hotmix in self.hotmixes:
            ocupacoes_item = [oc for oc in hotmix.ocupacoes if oc[3] == id_item]
            
            if not ocupacoes_item:
                continue
                
            # Usa m√©todo da pr√≥pria HotMix para calcular pico considerando janelas simult√¢neas
            periodo_inicio = min(oc[8] for oc in ocupacoes_item)
            periodo_fim = max(oc[9] for oc in ocupacoes_item)
            
            pico_quantidade = hotmix.obter_quantidade_maxima_item_periodo_simultaneo(
                id_item, periodo_inicio, periodo_fim
            )
            
            if pico_quantidade > 0:
                picos[hotmix.nome] = {
                    'pico_quantidade': pico_quantidade,
                    'periodo_analise': f"{periodo_inicio.strftime('%H:%M')} - {periodo_fim.strftime('%H:%M')}",
                    'percentual_capacidade': (pico_quantidade / hotmix.capacidade_gramas_max) * 100
                }
        
        return picos

    def obter_relatorio_detalhado_item(self, id_item: int) -> dict:
        """
        Gera relat√≥rio detalhado de um item espec√≠fico em todas as HotMixes.
        """
        relatorio = {
            'id_item': id_item,
            'resumo_geral': {
                'total_hotmixes_utilizadas': 0,
                'quantidade_total_alocada': 0,
                'periodo_global': None
            },
            'detalhes_por_hotmix': {}
        }
        
        hotmixes_utilizadas = 0
        quantidade_total = 0
        periodo_global_inicio = None
        periodo_global_fim = None
        
        for hotmix in self.hotmixes:
            ocupacoes_item = [oc for oc in hotmix.ocupacoes if oc[3] == id_item]
            
            if ocupacoes_item:
                hotmixes_utilizadas += 1
                quantidade_hotmix = sum(oc[4] for oc in ocupacoes_item)
                quantidade_total += quantidade_hotmix
                
                periodo_inicio = min(oc[8] for oc in ocupacoes_item)
                periodo_fim = max(oc[9] for oc in ocupacoes_item)
                
                if periodo_global_inicio is None or periodo_inicio < periodo_global_inicio:
                    periodo_global_inicio = periodo_inicio
                if periodo_global_fim is None or periodo_fim > periodo_global_fim:
                    periodo_global_fim = periodo_fim
                
                pico_quantidade = hotmix.obter_quantidade_maxima_item_periodo_simultaneo(
                    id_item, periodo_inicio, periodo_fim
                )
                
                relatorio['detalhes_por_hotmix'][hotmix.nome] = {
                    'quantidade_total': quantidade_hotmix,
                    'pico_simultaneo': pico_quantidade,
                    'num_ocupacoes': len(ocupacoes_item),
                    'periodo': f"{periodo_inicio.strftime('%H:%M')} - {periodo_fim.strftime('%H:%M')}",
                    'percentual_capacidade': (pico_quantidade / hotmix.capacidade_gramas_max) * 100,
                    'capacidade_disponivel': hotmix.capacidade_gramas_max - pico_quantidade
                }
        
        relatorio['resumo_geral'] = {
            'total_hotmixes_utilizadas': hotmixes_utilizadas,
            'quantidade_total_alocada': quantidade_total,
            'periodo_global': f"{periodo_global_inicio.strftime('%H:%M')} - {periodo_global_fim.strftime('%H:%M')}" if periodo_global_inicio else None
        }
        
        return relatorio

    # ==========================================================
    # üÜï M√©todos Adicionais para Compatibilidade e An√°lise
    # ==========================================================
    def obter_detalhes_alocacao_atividade(self, atividade: "AtividadeModular") -> dict:
        """
        üîç Retorna detalhes completos da aloca√ß√£o de uma atividade,
        incluindo informa√ß√µes de m√∫ltiplas HotMixes se aplic√°vel.
        """
        id_ordem, id_pedido, id_atividade, id_item = self._obter_ids_atividade(atividade)
        
        detalhes = {
            'id_atividade': id_atividade,
            'id_item': id_item,
            'alocacao_multipla': len(atividade.equipamentos_selecionados) > 1 if hasattr(atividade, 'equipamentos_selecionados') else False,
            'hotmixes_utilizadas': [],
            'quantidade_total': 0.0
        }
        
        # Coleta informa√ß√µes de todas as HotMixes que processam esta atividade
        for hotmix in self.hotmixes:
            ocupacoes_atividade = [
                oc for oc in hotmix.ocupacoes 
                if oc[0] == id_ordem and oc[1] == id_pedido and oc[2] == id_atividade
            ]
            
            if ocupacoes_atividade:
                quantidade_hotmix = sum(oc[4] for oc in ocupacoes_atividade)
                detalhes['hotmixes_utilizadas'].append({
                    'nome': hotmix.nome,
                    'quantidade': quantidade_hotmix,
                    'ocupacoes': len(ocupacoes_atividade)
                })
                detalhes['quantidade_total'] += quantidade_hotmix
        
        return detalhes

    def listar_alocacoes_multiplas(self) -> List[dict]:
        """
        üìä Lista todas as atividades que utilizaram m√∫ltiplas HotMixes.
        """
        alocacoes_multiplas = []
        atividades_processadas = set()
        
        for hotmix in self.hotmixes:
            for ocupacao in hotmix.ocupacoes:
                id_ordem, id_pedido, id_atividade = ocupacao[0], ocupacao[1], ocupacao[2]
                chave_atividade = (id_ordem, id_pedido, id_atividade)
                
                if chave_atividade not in atividades_processadas:
                    # Conta quantas HotMixes diferentes processam esta atividade
                    hotmixes_atividade = []
                    quantidade_total = 0.0
                    
                    for h in self.hotmixes:
                        ocupacoes_atividade = [
                            oc for oc in h.ocupacoes
                            if oc[0] == id_ordem and oc[1] == id_pedido and oc[2] == id_atividade
                        ]
                        if ocupacoes_atividade:
                            qtd_hotmix = sum(oc[4] for oc in ocupacoes_atividade)
                            hotmixes_atividade.append({
                                'nome': h.nome,
                                'quantidade': qtd_hotmix
                            })
                            quantidade_total += qtd_hotmix
                    
                    if len(hotmixes_atividade) > 1:
                        alocacoes_multiplas.append({
                            'id_ordem': id_ordem,
                            'id_pedido': id_pedido,
                            'id_atividade': id_atividade,
                            'id_item': ocupacao[3],
                            'quantidade_total': quantidade_total,
                            'num_hotmixes': len(hotmixes_atividade),
                            'hotmixes': hotmixes_atividade,
                            'inicio': ocupacao[8].strftime('%H:%M [%d/%m]'),
                            'fim': ocupacao[9].strftime('%H:%M [%d/%m]')
                        })
                    
                    atividades_processadas.add(chave_atividade)
        
        return alocacoes_multiplas