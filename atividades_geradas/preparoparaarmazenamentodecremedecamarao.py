from models.atividade_base import Atividade
from datetime import timedelta, datetime
from enums.tipo_equipamento import TipoEquipamento
from utils.logger_factory import setup_logger

# ü¶ê Logger espec√≠fico para esta atividade
logger = setup_logger('Atividade_Preparo_Armazenamento_Creme_Camarao')


class PreparoParaArmazenamentoDeCremeDeCamarao(Atividade):
    """
    ü¶ê Atividade de preparo para armazenamento do creme de camar√£o.
    ‚úîÔ∏è Equipamentos:
       - ü™µ Bancada (ocupa√ß√£o por fra√ß√µes, exclusiva no tempo por fra√ß√£o)
       - ‚öñÔ∏è Balan√ßa Digital (registro de uso por peso, uso concorrente)
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.tipo_ocupacao = "CAIXAS"
        self.bancada_alocada = None
        self.balanca_alocada = None

    @property
    def quantidade_por_tipo_equipamento(self):
        return {
            TipoEquipamento.BANCADAS: 1,
            TipoEquipamento.BALANCAS: 1
        }

    def calcular_duracao(self):
        q = self.quantidade_produto

        if q < 3000:
            logger.error(f"‚ùå Quantidade {q}g inv√°lida para esta atividade.")
            raise ValueError(f"‚ùå Quantidade {q}g inv√°lida para PreparoParaArmazenamentoDeCremeDeCamarao.")
        elif 3000 <= q <= 20000:
            self.duracao = timedelta(minutes=3)
        elif 20001 <= q <= 40000:
            self.duracao = timedelta(minutes=5)
        elif 40001 <= q <= 60000:
            self.duracao = timedelta(minutes=7)
        else:
            logger.error(f"‚ùå Quantidade {q}g acima do m√°ximo permitido.")
            raise ValueError(f"‚ùå Quantidade {q}g inv√°lida para PreparoParaArmazenamentoDeCremeDeCamarao.")

        logger.info(f"üïí Dura√ß√£o calculada: {self.duracao} para {q}g.")
