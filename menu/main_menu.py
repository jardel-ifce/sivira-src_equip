#!/usr/bin/env python3
"""
Sistema de Menu Principal - Produ√ß√£o - ATUALIZADO
===============================================

Menu interativo para registro e execu√ß√£o de pedidos de produ√ß√£o
com suporte a otimiza√ß√£o PL usando TesteSistemaProducao diretamente.

‚úÖ NOVIDADES:
- Limpeza autom√°tica de logs na inicializa√ß√£o
- M√©todo de limpeza completa adicional
- Feedback melhorado sobre status de logs
- üÜï NOVO: Limpeza autom√°tica de arquivos de erro na inicializa√ß√£o
"""

import os
import sys
import shutil
from typing import Optional

# Adiciona paths necess√°rios
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from menu.gerenciador_pedidos import GerenciadorPedidos
from menu.executor_producao import ExecutorProducao
from menu.utils_menu import MenuUtils


class MenuPrincipal:
    """Menu principal do sistema de produ√ß√£o"""
    
    def __init__(self):
        # ‚úÖ MUDAN√áA: Limpa pedidos anteriores antes de carregar gerenciador
        print("üöÄ Inicializando Sistema de Produ√ß√£o...")
        print("üóëÔ∏è Limpando dados de execu√ß√µes anteriores...")
        
        # üÜï NOVO: Limpa arquivos de erro antes de qualquer outra coisa
        self._limpar_arquivos_erro_inicializacao()
        
        # Limpa arquivo de pedidos salvos antes de inicializar gerenciador
        self._limpar_pedidos_salvos_inicializacao()
        
        # Inicializa gerenciador (que tentar√° carregar pedidos, mas arquivo j√° foi limpo)
        self.gerenciador = GerenciadorPedidos()
        
        # ‚úÖ MUDAN√áA: ExecutorProducao agora limpa logs e pedidos automaticamente na inicializa√ß√£o
        self.executor = ExecutorProducao()  # Limpa logs automaticamente aqui
        self.utils = MenuUtils()
        self.rodando = True
    
    def _limpar_arquivos_erro_inicializacao(self):
        """
        üÜï NOVO: Limpa todos os arquivos da pasta /logs/erros na inicializa√ß√£o do menu.
        Garante que cada execu√ß√£o do menu comece sem arquivos de erro anteriores.
        """
        try:
            diretorio_erros = "/Users/jardelrodrigues/Desktop/SIVIRA/src_equip/logs/erros"
            
            print("üßπ Limpando arquivos de erro anteriores...")
            
            if os.path.exists(diretorio_erros):
                # Lista arquivos antes da limpeza
                arquivos = [f for f in os.listdir(diretorio_erros) if os.path.isfile(os.path.join(diretorio_erros, f))]
                
                if arquivos:
                    print(f"   üìÑ Encontrados {len(arquivos)} arquivo(s) de erro para remover...")
                    
                    # Remove cada arquivo
                    arquivos_removidos = 0
                    for arquivo in arquivos:
                        try:
                            caminho_arquivo = os.path.join(diretorio_erros, arquivo)
                            os.remove(caminho_arquivo)
                            arquivos_removidos += 1
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è Erro ao remover {arquivo}: {e}")
                    
                    if arquivos_removidos > 0:
                        print(f"   ‚úÖ {arquivos_removidos} arquivo(s) de erro removido(s)")
                    
                    # Verifica se ainda h√° arquivos
                    arquivos_restantes = [f for f in os.listdir(diretorio_erros) if os.path.isfile(os.path.join(diretorio_erros, f))]
                    if not arquivos_restantes:
                        print(f"   üéâ Diret√≥rio {diretorio_erros} limpo completamente")
                    else:
                        print(f"   ‚ö†Ô∏è {len(arquivos_restantes)} arquivo(s) n√£o puderam ser removidos")
                        
                else:
                    print("   üî≠ Nenhum arquivo de erro encontrado")
            else:
                print(f"   üìÅ Diret√≥rio {diretorio_erros} n√£o existe")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao limpar arquivos de erro: {e}")
    
    def _limpar_pedidos_salvos_inicializacao(self):
        """
        ‚úÖ NOVO: Limpa arquivo de pedidos salvos na inicializa√ß√£o do menu.
        Garante que cada execu√ß√£o do menu comece sem pedidos anteriores.
        """
        try:
            import json
            arquivo_pedidos = "menu/pedidos_salvos.json"
            
            if os.path.exists(arquivo_pedidos):
                # L√™ arquivo para mostrar quantos pedidos ser√£o removidos
                try:
                    with open(arquivo_pedidos, 'r', encoding='utf-8') as f:
                        dados = json.load(f)
                    
                    total_pedidos = len(dados.get('pedidos', []))
                    if total_pedidos > 0:
                        print(f"   üìã Removendo {total_pedidos} pedido(s) de execu√ß√µes anteriores...")
                    else:
                        print("   üî≠ Arquivo de pedidos vazio, removendo...")
                        
                except (json.JSONDecodeError, KeyError):
                    print(f"   ‚ö†Ô∏è Arquivo de pedidos corrompido, removendo...")
                
                # Remove o arquivo
                os.remove(arquivo_pedidos)
                print(f"   ‚úÖ Pedidos anteriores limpos")
            else:
                print("   üî≠ Nenhum pedido anterior encontrado")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao limpar pedidos salvos: {e}")
    
    def executar(self):
        """Executa o menu principal"""
        self.utils.limpar_tela()
        self.mostrar_banner()
        
        while self.rodando:
            try:
                self.mostrar_menu_principal()
                opcao = self.obter_opcao_usuario()
                self.processar_opcao(opcao)
                
            except KeyboardInterrupt:
                print("\n\nüõë Interrompido pelo usu√°rio...")
                self.rodando = False
            except Exception as e:
                print(f"\n‚ùå Erro inesperado: {e}")
                input("\nPressione Enter para continuar...")
    
    def mostrar_banner(self):
        """Mostra banner do sistema"""
        print("=" * 80)
        print("üè≠ SISTEMA DE PRODU√á√ÉO - MENU INTERATIVO")
        print("=" * 80)
        print("üìã Registre pedidos e execute com TesteSistemaProducao")
        print("üîß Suporte a execu√ß√£o sequencial e otimizada (PL)")
        print("‚úÖ Logs e pedidos limpos automaticamente a cada inicializa√ß√£o")
        print("üÜï Arquivos de erro removidos automaticamente na inicializa√ß√£o")
        print("üö´ Menu independente: N√£o usa pedidos hardcoded do baseline")
        print()
    
    def mostrar_menu_principal(self):
        """Mostra op√ß√µes do menu principal"""
        print("\n" + "‚îÄ" * 60)
        print("üìã MENU PRINCIPAL")
        print("‚îÄ" * 60)
        
        # Status atual
        total_pedidos = len(self.gerenciador.pedidos)
        print(f"üìä Status: {total_pedidos} pedido(s) registrado(s)")
        
        # Debug: verifica duplicatas
        if total_pedidos > 0:
            ids_pedidos = [p.id_pedido for p in self.gerenciador.pedidos]
            ids_unicos = len(set(ids_pedidos))
            if ids_unicos != total_pedidos:
                print(f"‚ö†Ô∏è ATEN√á√ÉO: {total_pedidos - ids_unicos} duplicata(s) detectada(s)")
        
        # ‚úÖ ATUALIZADO: Verifica se h√° logs (com info de limpeza autom√°tica)
        logs_existem = os.path.exists('logs') and os.listdir('logs')
        if logs_existem:
            total_logs = len([f for f in os.listdir('logs') if f.endswith('.log')])
            print(f"üìÑ Logs atuais: {total_logs} arquivo(s) (logs anteriores foram limpos)")
        else:
            print("üßπ Logs: Ambiente limpo (limpeza autom√°tica ativa)")
        
        # üÜï NOVO: Status de arquivos de erro
        diretorio_erros = "/Users/jardelrodrigues/Desktop/SIVIRA/src_equip/logs/erros"
        if os.path.exists(diretorio_erros):
            arquivos_erro = [f for f in os.listdir(diretorio_erros) if os.path.isfile(os.path.join(diretorio_erros, f))]
            if arquivos_erro:
                print(f"‚ö†Ô∏è Arquivos de erro: {len(arquivos_erro)} arquivo(s) (ser√£o limpos automaticamente)")
            else:
                print("üßπ Arquivos de erro: Ambiente limpo (limpeza autom√°tica ativa)")
        else:
            print("üìÅ Diret√≥rio de erros: N√£o existe")
        
        # ‚úÖ NOVO: Status de pedidos salvos
        if total_pedidos == 0:
            print("üóëÔ∏è Pedidos: Ambiente limpo (pedidos anteriores removidos)")
        
        print()
        
        # Op√ß√µes do menu
        print("üìù GEST√ÉO DE PEDIDOS:")
        print("1Ô∏è‚É£  Registrar Novo Pedido")
        print("2Ô∏è‚É£  Listar Pedidos Registrados")
        print("3Ô∏è‚É£  Remover Pedido")
        print("4Ô∏è‚É£  Limpar Todos os Pedidos")
        print()
        print("üöÄ EXECU√á√ÉO:")
        print("5Ô∏è‚É£  Executar Pedidos (SEQUENCIAL)")
        print("6Ô∏è‚É£  Executar Pedidos (OTIMIZADO PL)")
        print()
        print("‚öôÔ∏è SISTEMA:")
        print("7Ô∏è‚É£  Testar Sistema")
        print("8Ô∏è‚É£  Configura√ß√µes")
        print("9Ô∏è‚É£  Limpeza Manual de Logs")
        print("üîü  Limpeza Completa de Logs")
        print("1Ô∏è‚É£1Ô∏è‚É£  Limpeza Completa de Pedidos")
        print("1Ô∏è‚É£2Ô∏è‚É£  Limpeza Manual de Arquivos de Erro")  # üÜï NOVA OP√á√ÉO
        print("0Ô∏è‚É£  Ajuda")
        print("[S]  Sair")
        print("‚îÄ" * 60)
    
    def obter_opcao_usuario(self) -> str:
        """Obt√©m op√ß√£o do usu√°rio"""
        return input("üéØ Escolha uma op√ß√£o: ").strip()
    
    def processar_opcao(self, opcao: str):
        """Processa op√ß√£o escolhida pelo usu√°rio"""
        
        if opcao == "1":
            self.registrar_pedido()
        
        elif opcao == "2":
            self.listar_pedidos()
        
        elif opcao == "3":
            self.remover_pedido()
        
        elif opcao == "4":
            self.limpar_pedidos()
        
        elif opcao == "5":
            self.executar_sequencial()
        
        elif opcao == "6":
            self.executar_otimizado()
        
        elif opcao == "7":
            self.testar_sistema()
        
        elif opcao == "8":
            self.mostrar_configuracoes()
        
        elif opcao == "9":
            self.limpar_logs_manual()
        
        elif opcao == "10":
            self.limpar_logs_completo()
        
        elif opcao == "11":
            self.limpar_pedidos_completo()
        
        elif opcao == "12":
            self.limpar_arquivos_erro_manual()  # üÜï NOVA FUNCIONALIDADE
        
        elif opcao == "0":
            self.mostrar_ajuda()
        
        elif opcao.lower() in ["sair", "s", "quit", "exit"]:
            self.sair()
        
        else:
            print(f"\n‚ùå Op√ß√£o '{opcao}' inv√°lida!")
            input("Pressione Enter para continuar...")
    
    def limpar_arquivos_erro_manual(self):
        """üÜï NOVO: Limpa arquivos de erro manualmente via menu"""
        self.utils.limpar_tela()
        print("üßπ LIMPEZA MANUAL DE ARQUIVOS DE ERRO")
        print("=" * 40)
        print("‚ÑπÔ∏è Nota: Limpeza autom√°tica j√° √© executada na inicializa√ß√£o")
        print()
        
        diretorio_erros = "/Users/jardelrodrigues/Desktop/SIVIRA/src_equip/logs/erros"
        
        # Verifica se diret√≥rio existe
        if not os.path.exists(diretorio_erros):
            print(f"üìÅ Diret√≥rio {diretorio_erros} n√£o existe.")
            input("\nPressione Enter para continuar...")
            return
        
        # Verifica se h√° arquivos de erro
        arquivos_erro = [f for f in os.listdir(diretorio_erros) if os.path.isfile(os.path.join(diretorio_erros, f))]
        
        if not arquivos_erro:
            print("üî≠ Nenhum arquivo de erro encontrado para limpar.")
            print("‚úÖ Diret√≥rio j√° est√° limpo!")
            input("\nPressione Enter para continuar...")
            return
        
        print(f"üìÑ Encontrados {len(arquivos_erro)} arquivo(s) de erro:")
        
        # Lista os primeiros 10 arquivos
        for i, arquivo in enumerate(arquivos_erro[:10]):
            tamanho = os.path.getsize(os.path.join(diretorio_erros, arquivo))
            print(f"   ‚Ä¢ {arquivo} ({tamanho} bytes)")
        
        if len(arquivos_erro) > 10:
            print(f"   ... e mais {len(arquivos_erro) - 10} arquivo(s)")
        
        confirmacao = input(f"\nüéØ Confirma limpeza de {len(arquivos_erro)} arquivo(s) de erro? (s/N): ").strip().lower()
        
        if confirmacao in ['s', 'sim', 'y', 'yes']:
            try:
                arquivos_removidos = 0
                arquivos_com_erro = 0
                
                for arquivo in arquivos_erro:
                    try:
                        caminho_arquivo = os.path.join(diretorio_erros, arquivo)
                        os.remove(caminho_arquivo)
                        arquivos_removidos += 1
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è Erro ao remover {arquivo}: {e}")
                        arquivos_com_erro += 1
                
                print(f"\n‚úÖ {arquivos_removidos} arquivo(s) de erro removido(s)")
                if arquivos_com_erro > 0:
                    print(f"‚ö†Ô∏è {arquivos_com_erro} arquivo(s) n√£o puderam ser removidos")
                
            except Exception as e:
                print(f"\n‚ùå Erro durante limpeza de arquivos de erro: {e}")
        else:
            print("\n‚ÑπÔ∏è Limpeza cancelada.")
        
        input("\nPressione Enter para continuar...")
    
    def limpar_arquivos_erro_completo(self):
        """üÜï NOVO: Limpeza completa de arquivos de erro com remo√ß√£o do diret√≥rio"""
        try:
            diretorio_erros = "/Users/jardelrodrigues/Desktop/SIVIRA/src_equip/logs/erros"
            
            print("üßπ LIMPEZA COMPLETA DE ARQUIVOS DE ERRO")
            print("=" * 40)
            
            if os.path.exists(diretorio_erros):
                # Remove todo o diret√≥rio e recria vazio
                shutil.rmtree(diretorio_erros)
                os.makedirs(diretorio_erros, exist_ok=True)
                print(f"‚úÖ Diret√≥rio {diretorio_erros} completamente limpo e recriado")
            else:
                # Cria o diret√≥rio se n√£o existir
                os.makedirs(diretorio_erros, exist_ok=True)
                print(f"üìÅ Diret√≥rio {diretorio_erros} criado")
            
            print("üéâ Limpeza completa de arquivos de erro finalizada!")
            
        except Exception as e:
            print(f"‚ùå Erro durante limpeza completa de arquivos de erro: {e}")
            import traceback
            traceback.print_exc()
    
    # [Resto dos m√©todos permanecem inalterados...]
    def registrar_pedido(self):
        """Interface para registrar novo pedido"""
        self.utils.limpar_tela()
        print("üìù REGISTRAR NOVO PEDIDO")
        print("=" * 40)
        
        try:
            # Solicita dados do pedido
            dados_pedido = self.utils.coletar_dados_pedido()
            
            if dados_pedido:
                # Registra o pedido
                sucesso, mensagem = self.gerenciador.registrar_pedido(**dados_pedido)
                
                if sucesso:
                    print(f"\n‚úÖ {mensagem}")
                    # Auto-salva pedidos ap√≥s registro
                    self.gerenciador.salvar_pedidos()
                else:
                    print(f"\n‚ùå {mensagem}")
            else:
                print("\n‚ÑπÔ∏è Registro cancelado.")
                
        except Exception as e:
            print(f"\n‚ùå Erro ao registrar pedido: {e}")
        
        input("\nPressione Enter para continuar...")
    
    def listar_pedidos(self):
        """Lista todos os pedidos registrados"""
        self.utils.limpar_tela()
        print("üìã PEDIDOS REGISTRADOS")
        print("=" * 40)
        
        if not self.gerenciador.pedidos:
            print("üî≠ Nenhum pedido registrado ainda.")
            print("\nüí° Use a op√ß√£o '1' para registrar novos pedidos")
        else:
            self.gerenciador.listar_pedidos()
            
            # Mostra estat√≠sticas
            stats = self.gerenciador.obter_estatisticas()
            if stats["total"] > 0:
                print("üìä RESUMO:")
                print(f"   Total: {stats['total']} pedidos")
                print(f"   Produtos: {stats['produtos']} | Subprodutos: {stats['subprodutos']}")
                print(f"   Quantidade total: {stats['quantidade_total']} unidades")
                print(f"   Per√≠odo: {stats['inicio_mais_cedo'].strftime('%d/%m %H:%M')} ‚Üí {stats['fim_mais_tarde'].strftime('%d/%m %H:%M')}")
        
        input("\nPressione Enter para continuar...")
    
    def remover_pedido(self):
        """Remove um pedido espec√≠fico"""
        self.utils.limpar_tela()
        print("üóëÔ∏è REMOVER PEDIDO")
        print("=" * 40)
        
        if not self.gerenciador.pedidos:
            print("üî≠ Nenhum pedido para remover.")
            input("\nPressione Enter para continuar...")
            return
        
        # Lista pedidos primeiro
        self.gerenciador.listar_pedidos()
        
        try:
            pedido_id = input("\nüéØ Digite o ID do pedido para remover (ou Enter para cancelar): ").strip()
            
            if pedido_id:
                pedido_id = int(pedido_id)
                sucesso, mensagem = self.gerenciador.remover_pedido(pedido_id)
                print(f"\n{'‚úÖ' if sucesso else '‚ùå'} {mensagem}")
                
                if sucesso:
                    # Auto-salva ap√≥s remo√ß√£o
                    self.gerenciador.salvar_pedidos()
            else:
                print("\n‚ÑπÔ∏è Remo√ß√£o cancelada.")
                
        except ValueError:
            print("\n‚ùå ID inv√°lido!")
        except Exception as e:
            print(f"\n‚ùå Erro ao remover pedido: {e}")
        
        input("\nPressione Enter para continuar...")
    
    def limpar_pedidos(self):
        """Remove todos os pedidos"""
        self.utils.limpar_tela()
        print("üóëÔ∏è LIMPAR TODOS OS PEDIDOS")
        print("=" * 40)
        
        if not self.gerenciador.pedidos:
            print("üî≠ Nenhum pedido para limpar.")
            input("\nPressione Enter para continuar...")
            return
        
        print(f"‚ö†Ô∏è Isso remover√° TODOS os {len(self.gerenciador.pedidos)} pedidos registrados!")
        confirmacao = input("Digite 'CONFIRMAR' para prosseguir: ").strip()
        
        if confirmacao == "CONFIRMAR":
            self.gerenciador.limpar_pedidos()
            self.gerenciador.salvar_pedidos()  # Salva estado vazio
            print("\n‚úÖ Todos os pedidos foram removidos.")
        else:
            print("\n‚ÑπÔ∏è Opera√ß√£o cancelada.")
        
        input("\nPressione Enter para continuar...")
    
    def executar_sequencial(self):
        """Executa pedidos em modo sequencial"""
        self.utils.limpar_tela()
        print("üìÑ EXECU√á√ÉO SEQUENCIAL")
        print("=" * 40)
        
        if not self.gerenciador.pedidos:
            print("üî≠ Nenhum pedido registrado para executar.")
            print("\nüí° MENU INDEPENDENTE: Este menu funciona apenas com pedidos que voc√™ registrar")
            print("üí° Use a op√ß√£o '1' para registrar pedidos primeiro")
            print("üö´ MENU: N√£o usa pedidos hardcoded do script baseline")
            input("\nPressione Enter para continuar...")
            return
        
        print(f"üìä {len(self.gerenciador.pedidos)} pedido(s) ser√°(√£o) executado(s) em ordem sequencial.")
        print("‚è±Ô∏è Isso pode levar alguns minutos...")
        print("\nüîß M√©todo: TesteSistemaProducao SEQUENCIAL (producao_paes_backup.py)")
        print("üìã SEQUENCIAL: Fluxo = Almoxarifado ‚Üí Pedidos ‚Üí Ordena√ß√£o ‚Üí Execu√ß√£o")
        print("üßπ Logs foram limpos automaticamente para esta execu√ß√£o")
        print("üìã MENU: Usando APENAS pedidos registrados pelo usu√°rio")
        
        # Mostra resumo dos pedidos
        for pedido in self.gerenciador.pedidos:
            print(f"   ‚Ä¢ {pedido.nome_item} ({pedido.quantidade} uni) - Prazo: {pedido.fim_jornada.strftime('%d/%m %H:%M')}")
        
        confirmacao = input("\nüéØ Confirma execu√ß√£o? (s/N): ").strip().lower()
        
        if confirmacao in ['s', 'sim', 'y', 'yes']:
            try:
                sucesso = self.executor.executar_sequencial(self.gerenciador.pedidos)
                if sucesso:
                    print("\nüéâ Execu√ß√£o sequencial conclu√≠da!")
                else:
                    print("\n‚ùå Falha na execu√ß√£o sequencial!")
            except Exception as e:
                print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        else:
            print("\n‚ÑπÔ∏è Execu√ß√£o cancelada.")
        
        input("\nPressione Enter para continuar...")
    
    def executar_otimizado(self):
        """Executa pedidos com otimiza√ß√£o PL"""
        self.utils.limpar_tela()
        print("üöÄ EXECU√á√ÉO OTIMIZADA (PL)")
        print("=" * 40)
        
        if not self.gerenciador.pedidos:
            print("üî≠ Nenhum pedido registrado para executar.")
            print("\nüí° MENU INDEPENDENTE: Este menu funciona apenas com pedidos que voc√™ registrar")
            print("üí° Use a op√ß√£o '1' para registrar pedidos primeiro")
            print("üö´ MENU: N√£o usa pedidos hardcoded do script baseline")
            input("\nPressione Enter para continuar...")
            return
        
        # Verifica OR-Tools primeiro
        ortools_ok, ortools_msg = self.utils.validar_or_tools()
        print(f"üîß OR-Tools: {'‚úÖ' if ortools_ok else '‚ùå'} {ortools_msg}")
        
        if not ortools_ok:
            print("\nüí° Para instalar: pip install ortools")
            input("\nPressione Enter para continuar...")
            return
        
        print(f"\nüìä {len(self.gerenciador.pedidos)} pedido(s) ser√°(√£o) otimizado(s) com Programa√ß√£o Linear.")
        print("‚è±Ô∏è Isso pode levar alguns minutos para encontrar a solu√ß√£o √≥tima...")
        print("\nüîß M√©todo: TesteSistemaProducao OTIMIZADO (producao_paes.py)")
        print("üìã OTIMIZADO: Usa Programa√ß√£o Linear para encontrar solu√ß√£o √≥tima")
        print("üßπ Logs foram limpos automaticamente para esta execu√ß√£o")
        print("üìã MENU: Usando APENAS pedidos registrados pelo usu√°rio")
        
        # Configura√ß√µes de otimiza√ß√£o
        config = self.executor.obter_configuracoes()
        print(f"\n‚öôÔ∏è Configura√ß√µes de Otimiza√ß√£o:")
        print(f"   Resolu√ß√£o temporal: {config['resolucao_minutos']} minutos")
        print(f"   Timeout: {config['timeout_pl']} segundos")
        
        # Mostra resumo dos pedidos
        print(f"\nüìã Pedidos para otimiza√ß√£o:")
        for pedido in self.gerenciador.pedidos:
            print(f"   ‚Ä¢ {pedido.nome_item} ({pedido.quantidade} uni) - Prazo: {pedido.fim_jornada.strftime('%d/%m %H:%M')}")
        
        confirmacao = input("\nüéØ Confirma execu√ß√£o otimizada? (s/N): ").strip().lower()
        
        if confirmacao in ['s', 'sim', 'y', 'yes']:
            try:
                sucesso = self.executor.executar_otimizado(self.gerenciador.pedidos)
                if sucesso:
                    print("\nüéâ Execu√ß√£o otimizada conclu√≠da!")
                else:
                    print("\n‚ùå Falha na execu√ß√£o otimizada!")
            except Exception as e:
                print(f"\n‚ùå Erro durante execu√ß√£o otimizada: {e}")
        else:
            print("\n‚ÑπÔ∏è Execu√ß√£o cancelada.")
        
        input("\nPressione Enter para continuar...")
    
    def testar_sistema(self):
        """Testa componentes do sistema"""
        self.utils.limpar_tela()
        print("üß™ TESTE DO SISTEMA")
        print("=" * 40)
        
        print("Executando diagn√≥stico completo do sistema...\n")
        
        try:
            resultados = self.executor.testar_sistema()
            
            # Resumo final
            print(f"\nüéØ DIAGN√ìSTICO CONCLU√çDO")
            
            testes_ok = sum(1 for r in resultados.values() if isinstance(r, dict) and r.get('ok', False))
            total_testes = sum(1 for r in resultados.values() if isinstance(r, dict) and 'ok' in r)
            
            if testes_ok == total_testes:
                print("‚úÖ Sistema pronto para execu√ß√£o!")
            else:
                print(f"‚ö†Ô∏è {total_testes - testes_ok} problema(s) encontrado(s)")
            
        except Exception as e:
            print(f"‚ùå Erro durante teste: {e}")
        
        input("\nPressione Enter para continuar...")
    
    def mostrar_configuracoes(self):
        """Mostra configura√ß√µes do sistema"""
        self.utils.limpar_tela()
        print("‚öôÔ∏è CONFIGURA√á√ïES DO SISTEMA")
        print("=" * 40)
        
        config = self.executor.obter_configuracoes()
        info_sistema = self.utils.obter_info_sistema()
        
        print(f"üêç Python: {info_sistema['python_version']}")
        print(f"üíª Sistema: {info_sistema['platform']} {info_sistema['platform_version']}")
        print()
        print(f"üìÇ Diret√≥rios:")
        print(f"   Produtos: {self.gerenciador.dir_produtos}")
        print(f"   Subprodutos: {self.gerenciador.dir_subprodutos}")
        print()
        print(f"‚öôÔ∏è Otimiza√ß√£o PL:")
        print(f"   Resolu√ß√£o temporal: {config['resolucao_minutos']} minutos")
        print(f"   Timeout: {config['timeout_pl']} segundos")
        print()
        print(f"üßπ Sistema de Limpeza:")
        print(f"   Limpeza autom√°tica: ‚úÖ Ativa (na inicializa√ß√£o)")
        print(f"   Limpeza manual: ‚úÖ Dispon√≠vel (op√ß√£o 9)")
        print(f"   Limpeza completa: ‚úÖ Dispon√≠vel (op√ß√£o 10)")
        print(f"   Limpeza arquivos erro: ‚úÖ Autom√°tica + Manual (op√ß√£o 12)")
        print()
        print(f"üìã Status:")
        print(f"   OR-Tools: {'‚úÖ Dispon√≠vel' if config['ortools_disponivel'] else '‚ùå N√£o encontrado'}")
        print(f"   Total de pedidos: {len(self.gerenciador.pedidos)}")
        
        # Op√ß√µes de configura√ß√£o
        print(f"\nüîß ALTERAR CONFIGURA√á√ïES:")
        print("1 - Alterar resolu√ß√£o temporal PL")
        print("2 - Alterar timeout PL")
        print("0 - Voltar")
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            try:
                nova_resolucao = int(input("Nova resolu√ß√£o em minutos (30 recomendado): "))
                if nova_resolucao > 0:
                    self.executor.configurar(resolucao_minutos=nova_resolucao)
                else:
                    print("‚ùå Valor deve ser positivo!")
            except ValueError:
                print("‚ùå Valor inv√°lido!")
        
        elif opcao == "2":
            try:
                novo_timeout = int(input("Novo timeout em segundos (300 recomendado): "))
                if novo_timeout > 0:
                    self.executor.configurar(timeout_pl=novo_timeout)
                else:
                    print("‚ùå Valor deve ser positivo!")
            except ValueError:
                print("‚ùå Valor inv√°lido!")
        
        input("\nPressione Enter para continuar...")
    
    def limpar_logs_manual(self):
        """‚úÖ RENOMEADO: Limpa logs manualmente via menu"""
        self.utils.limpar_tela()
        print("üßπ LIMPEZA MANUAL DE LOGS")
        print("=" * 40)
        print("‚ÑπÔ∏è Nota: Limpeza autom√°tica j√° √© executada na inicializa√ß√£o")
        print()
        
        # Verifica se h√° logs
        logs_existem = os.path.exists('logs') and os.listdir('logs')
        
        if not logs_existem:
            print("üî≠ Nenhum log encontrado para limpar.")
            print("‚úÖ Sistema j√° est√° limpo!")
            input("\nPressione Enter para continuar...")
            return
        
        total_logs = len([f for f in os.listdir('logs') if f.endswith('.log')])
        print(f"üìÑ Encontrados {total_logs} arquivo(s) de log")
        
        confirmacao = input("\nüéØ Confirma limpeza manual de logs? (s/N): ").strip().lower()
        
        if confirmacao in ['s', 'sim', 'y', 'yes']:
            try:
                self.executor.limpar_logs_anteriores()
                print("\n‚úÖ Logs limpos manualmente com sucesso!")
            except Exception as e:
                print(f"\n‚ùå Erro ao limpar logs: {e}")
        else:
            print("\n‚ÑπÔ∏è Limpeza cancelada.")
        
        input("\nPressione Enter para continuar...")
    
    def limpar_logs_completo(self):
        """‚úÖ NOVO: Limpeza completa e detalhada de todos os logs"""
        self.utils.limpar_tela()
        print("üßπ LIMPEZA COMPLETA DE LOGS")
        print("=" * 40)
        print("‚ö†Ô∏è Esta op√ß√£o remove TODOS os arquivos de log, comandas e tempor√°rios")
        print("üìÇ Inclui limpeza de diret√≥rios: logs/, comandas/, temp/")
        print()
        
        confirmacao = input("üéØ Confirma limpeza COMPLETA? Digite 'LIMPAR' para confirmar: ").strip()
        
        if confirmacao == "LIMPAR":
            try:
                self.executor.limpar_logs_completo()
                print("\nüéâ Limpeza completa finalizada com sucesso!")
            except Exception as e:
                print(f"\n‚ùå Erro durante limpeza completa: {e}")
        else:
            print("\n‚ÑπÔ∏è Limpeza completa cancelada.")
        
        input("\nPressione Enter para continuar...")
    
    def limpar_pedidos_completo(self):
        """‚úÖ NOVO: Limpeza completa de pedidos salvos"""
        self.utils.limpar_tela()
        print("üóëÔ∏è LIMPEZA COMPLETA DE PEDIDOS")
        print("=" * 40)
        print("‚ö†Ô∏è Esta op√ß√£o remove TODOS os pedidos salvos em arquivos")
        print("üìÇ Remove: menu/pedidos_salvos.json e arquivos relacionados")
        print("üíæ Pedidos em mem√≥ria tamb√©m ser√£o limpos")
        print()
        
        # Mostra pedidos atuais se houver
        if self.gerenciador.pedidos:
            print(f"üìã Pedidos atuais em mem√≥ria: {len(self.gerenciador.pedidos)}")
        else:
            print("üî≠ Nenhum pedido em mem√≥ria atualmente")
        
        confirmacao = input("\nüéØ Confirma limpeza COMPLETA de pedidos? Digite 'LIMPAR' para confirmar: ").strip()
        
        if confirmacao == "LIMPAR":
            try:
                # Limpa pedidos em mem√≥ria
                if self.gerenciador.pedidos:
                    total_memoria = len(self.gerenciador.pedidos)
                    self.gerenciador.limpar_pedidos()
                    print(f"‚úÖ {total_memoria} pedido(s) removido(s) da mem√≥ria")
                
                # Limpa arquivos salvos
                self.executor.limpar_pedidos_completo()
                
                print("\nüéâ Limpeza completa de pedidos finalizada!")
                
            except Exception as e:
                print(f"\n‚ùå Erro durante limpeza completa de pedidos: {e}")
        else:
            print("\n‚ÑπÔ∏è Limpeza completa de pedidos cancelada.")
        
        input("\nPressione Enter para continuar...")
    
    def mostrar_ajuda(self):
        """Mostra ajuda do sistema"""
        self.utils.limpar_tela()
        print("‚ùì AJUDA DO SISTEMA")
        print("=" * 40)
        
        print("üìã COMO USAR:")
        print()
        print("1Ô∏è‚É£ REGISTRAR PEDIDOS:")
        print("   ‚Ä¢ Digite o ID do item (ex: 1001)")
        print("   ‚Ä¢ Escolha PRODUTO ou SUBPRODUTO")
        print("   ‚Ä¢ Informe a quantidade")
        print("   ‚Ä¢ Digite fim da jornada (ex: 07:00:00 11/08/2025)")
        print("   ‚Ä¢ O in√≠cio ser√° calculado automaticamente (3 dias antes)")
        print()
        print("2Ô∏è‚É£ EXECU√á√ÉO SEQUENCIAL:")
        print("   ‚Ä¢ Usa TesteSistemaProducao(usar_otimizacao=False)")
        print("   ‚Ä¢ Executa pedidos em ordem de registro")
        print("   ‚Ä¢ Mais r√°pido, mas pode n√£o ser √≥timo")
        print("   ‚Ä¢ Fluxo: Almoxarifado ‚Üí Pedidos ‚Üí Ordena√ß√£o ‚Üí Execu√ß√£o")
        print()
        print("3Ô∏è‚É£ EXECU√á√ÉO OTIMIZADA:")
        print("   ‚Ä¢ Usa TesteSistemaProducao(usar_otimizacao=True)")
        print("   ‚Ä¢ Usa Programa√ß√£o Linear para otimizar")
        print("   ‚Ä¢ Maximiza pedidos atendidos")
        print("   ‚Ä¢ Minimiza conflitos de equipamentos")
        print("   ‚Ä¢ Requer OR-Tools instalado")
        print()
        print("üßπ SISTEMA DE LIMPEZA:")
        print("   ‚Ä¢ Limpeza autom√°tica: Executada na inicializa√ß√£o")
        print("   ‚Ä¢ Logs limpos automaticamente a cada in√≠cio")
        print("   ‚Ä¢ Pedidos anteriores removidos automaticamente")
        print("   ‚Ä¢ Arquivos de erro removidos automaticamente")
        print("   ‚Ä¢ Limpeza manual: Remove logs atuais (op√ß√£o 9)")
        print("   ‚Ä¢ Limpeza completa logs: Remove todos os arquivos (op√ß√£o 10)")
        print("   ‚Ä¢ Limpeza completa pedidos: Remove arquivos salvos (op√ß√£o 11)")
        print("   ‚Ä¢ Limpeza manual erros: Remove arquivos de erro (op√ß√£o 12)")
        print()
        print("üìÇ ESTRUTURA DE ARQUIVOS:")
        print("   ‚Ä¢ Produtos: /data/produtos/atividades/ID_nome.json")
        print("   ‚Ä¢ Subprodutos: /data/subprodutos/atividades/ID_nome.json")
        print("   ‚Ä¢ Logs: /logs/execucao_pedidos_TIMESTAMP.log")
        print("   ‚Ä¢ Erros: /logs/erros/ (limpos automaticamente)")
        print()
        print("‚ö†Ô∏è REQUISITOS:")
        print("   ‚Ä¢ OR-Tools: pip install ortools")
        print("   ‚Ä¢ Almoxarifado inicializado")
        print("   ‚Ä¢ Funcion√°rios dispon√≠veis")
        print("   ‚Ä¢ TesteSistemaProducao acess√≠vel")
        print()
        print("üîß DIFEREN√áAS DOS MODOS:")
        print("   ‚Ä¢ Sequencial: como producao_paes_backup.py (ordem fixa)")
        print("   ‚Ä¢ Otimizado: como producao_paes.py (Programa√ß√£o Linear)")
        print("   ‚Ä¢ Ambos: limpam logs automaticamente")
        print("   ‚Ä¢ Ambos: usam apenas pedidos do menu")
        print("   ‚Ä¢ Ambos: removem arquivos de erro automaticamente")
        
        input("\nPressione Enter para continuar...")
    
    def sair(self):
        """Sai do sistema"""
        self.utils.limpar_tela()
        print("üëã SAINDO DO SISTEMA")
        print("=" * 40)
        
        if self.gerenciador.pedidos:
            print(f"‚ö†Ô∏è Voc√™ tem {len(self.gerenciador.pedidos)} pedido(s) registrado(s).")
            salvar = input("üíæ Deseja salvar pedidos antes de sair? (S/n): ").strip().lower()
            
            if salvar in ['', 's', 'sim', 'y', 'yes']:
                try:
                    self.gerenciador.salvar_pedidos()
                    print("‚úÖ Pedidos salvos com sucesso!")
                except Exception as e:
                    print(f"‚ùå Erro ao salvar: {e}")
        
        print("\nüéâ Obrigado por usar o Sistema de Produ√ß√£o!")
        print("üîß Baseado em TesteSistemaProducao")
        print("üßπ Logs ser√£o limpos automaticamente na pr√≥xima inicializa√ß√£o")
        print("üóëÔ∏è Arquivos de erro ser√£o removidos automaticamente na pr√≥xima inicializa√ß√£o")
        print("=" * 40)
        self.rodando = False


def main():
    """Fun√ß√£o principal"""
    try:
        menu = MenuPrincipal()
        menu.executar()
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("\nüìö Sistema encerrado.")


if __name__ == "__main__":
    main()