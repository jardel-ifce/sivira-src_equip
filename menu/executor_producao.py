"""
Executor de Produ√ß√£o - CORRIGIDO
=================================

Corrige a inicializa√ß√£o do gestor de almoxarifado para ser id√™ntica ao producao_paes_backup.py
"""

import os
import sys
from datetime import datetime
from typing import List, Dict, Optional

# Adiciona path do sistema
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from menu.gerenciador_pedidos import GerenciadorPedidos, DadosPedidoMenu
from menu.utils_menu import MenuUtils


class ExecutorProducao:
    """Executa produ√ß√£o usando TesteSistemaProducao diretamente"""
    
    def __init__(self):
        self.utils = MenuUtils()
        self.configuracoes = {
            'resolucao_minutos': 30,
            'timeout_pl': 300,
        }
        self.sistema_producao = None
        
        # ‚úÖ NOVO: Limpa logs e pedidos automaticamente na inicializa√ß√£o
        self._limpar_logs_inicializacao()
        self._limpar_pedidos_inicializacao()
        
    def _limpar_pedidos_inicializacao(self):
        """
        ‚úÖ NOVO: Limpa pedidos salvos automaticamente quando ExecutorProducao √© inicializado.
        Remove arquivo de pedidos salvos para garantir in√≠cio limpo.
        """
        try:
            print("üóëÔ∏è Limpando pedidos de execu√ß√µes anteriores...")
            
            # Define caminho do arquivo de pedidos salvos
            arquivo_pedidos = "menu/pedidos_salvos.json"
            
            if os.path.exists(arquivo_pedidos):
                # L√™ arquivo para mostrar quantos pedidos ser√£o removidos
                try:
                    import json
                    with open(arquivo_pedidos, 'r', encoding='utf-8') as f:
                        dados = json.load(f)
                    
                    total_pedidos = len(dados.get('pedidos', []))
                    if total_pedidos > 0:
                        print(f"   üìã Removendo {total_pedidos} pedido(s) de execu√ß√µes anteriores...")
                        
                        # Remove o arquivo
                        os.remove(arquivo_pedidos)
                        print(f"   ‚úÖ Arquivo {arquivo_pedidos} removido")
                    else:
                        print("   üì≠ Nenhum pedido anterior encontrado")
                        # Remove arquivo vazio mesmo assim
                        os.remove(arquivo_pedidos)
                        
                except (json.JSONDecodeError, KeyError):
                    print(f"   ‚ö†Ô∏è Arquivo {arquivo_pedidos} corrompido, removendo...")
                    os.remove(arquivo_pedidos)
                    
            else:
                print("   üì≠ Nenhum arquivo de pedidos anteriores encontrado")
            
            print("‚úÖ Pedidos de execu√ß√µes anteriores limpos automaticamente")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao limpar pedidos na inicializa√ß√£o: {e}")
        
    def _limpar_logs_inicializacao(self):
        """
        ‚úÖ NOVO: Limpa logs automaticamente quando ExecutorProducao √© inicializado.
        Garante ambiente limpo a cada execu√ß√£o do menu.
        """
        try:
            print("üßπ Limpando logs anteriores automaticamente...")
            
            # Importa m√≥dulos de limpeza
            from utils.logs.gerenciador_logs import limpar_todos_os_logs
            from utils.comandas.limpador_comandas import apagar_todas_as_comandas
            
            # Executa limpeza
            limpar_todos_os_logs()
            apagar_todas_as_comandas()
            
            print("‚úÖ Logs e comandas limpos automaticamente")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è M√≥dulos de limpeza n√£o dispon√≠veis: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao limpar logs na inicializa√ß√£o: {e}")
        
    def executar_sequencial(self, pedidos_menu: List[DadosPedidoMenu]) -> bool:
        """
        Executa pedidos em modo sequencial usando TesteSistemaProducao.
        ‚úÖ CORRIGIDO: Usa estrutura EXATA do producao_paes_backup.py (sem otimiza√ß√£o).
        """
        print(f"\nüìÑ INICIANDO EXECU√á√ÉO SEQUENCIAL")
        print("=" * 50)
        
        try:
            # Importa TesteSistemaProducao do backup (sequencial puro)
            from producao_paes_backup import TesteSistemaProducao
            
            # ‚úÖ CORRE√á√ÉO: Cria sistema SIMPLES (como no backup - sem par√¢metros de otimiza√ß√£o)
            print("üîß Inicializando sistema de produ√ß√£o em modo sequencial...")
            self.sistema_producao = TesteSistemaProducao()  # ‚úÖ SEM PAR√ÇMETROS - PURO SEQUENCIAL
            print("‚úÖ Sistema sequencial inicializado (baseado em producao_paes_backup.py)")
            
            # ‚úÖ CORRE√á√ÉO: Configura logging (como no script original)
            log_filename = self.sistema_producao.configurar_log()
            print(f"üìÑ Log ser√° salvo em: {log_filename}")
            
            # ‚úÖ CORRE√á√ÉO: Inicializa almoxarifado ANTES de criar pedidos
            print("üè™ Inicializando almoxarifado...")
            self.sistema_producao.inicializar_almoxarifado()
            
            # ‚úÖ CORRE√á√ÉO: Substitui m√©todo para usar APENAS pedidos do menu (modo sequencial)
            self._substituir_pedidos_sistema_sequencial(self.sistema_producao, pedidos_menu)
            
            # ‚úÖ EXECU√á√ÉO SEQUENCIAL PURA: Usa fluxo EXATO do backup
            sucesso = self._executar_sequencial_puro(self.sistema_producao, log_filename)
            
            if sucesso:
                # Mostra estat√≠sticas simples
                total_pedidos = len(self.sistema_producao.pedidos) if hasattr(self.sistema_producao, 'pedidos') else 0
                print(f"\nüìä Execu√ß√£o sequencial finalizada:")
                print(f"   üìã Total de pedidos processados: {total_pedidos}")
                
            return sucesso
            
        except ImportError as e:
            print(f"‚ùå Erro de importa√ß√£o: {e}")
            print("üí° Verifique se producao_paes_backup.py est√° dispon√≠vel")
            return False
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o sequencial: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def executar_otimizado(self, pedidos_menu: List[DadosPedidoMenu]) -> bool:
        """
        Executa pedidos com otimiza√ß√£o PL usando TesteSistemaProducao.
        ‚úÖ CORRIGIDO: Inicializa almoxarifado corretamente.
        """
        print(f"\nüöÄ INICIANDO EXECU√á√ÉO OTIMIZADA")
        print("=" * 50)
        
        # Verifica OR-Tools
        ortools_ok, ortools_msg = self.utils.validar_or_tools()
        if not ortools_ok:
            print(f"‚ùå {ortools_msg}")
            print("üí° Execute: pip install ortools")
            return False
        
        print(f"‚úÖ {ortools_msg}")
        
        try:
            # Importa TesteSistemaProducao da vers√£o otimizada
            from producao_paes import TesteSistemaProducao  # ‚úÖ USA VERS√ÉO OTIMIZADA
            
            # ‚úÖ CORRE√á√ÉO 1: Cria sistema em modo otimizado
            print("üîß Inicializando sistema de produ√ß√£o em modo otimizado...")
            try:
                # Tenta criar com par√¢metros de otimiza√ß√£o
                self.sistema_producao = TesteSistemaProducao(
                    usar_otimizacao=True,
                    resolucao_minutos=self.configuracoes['resolucao_minutos'],
                    timeout_pl=self.configuracoes['timeout_pl']
                )
                print("‚úÖ Sistema otimizado inicializado (baseado em producao_paes.py)")
            except TypeError:
                # Se vers√£o n√£o suporta par√¢metros, cria simples
                print("‚ö†Ô∏è Vers√£o n√£o suporta par√¢metros de otimiza√ß√£o, usando padr√£o...")
                self.sistema_producao = TesteSistemaProducao()
                print("‚úÖ Sistema inicializado em modo padr√£o (fallback)")
            
            # ‚úÖ CORRE√á√ÉO 2: Configura logging
            log_filename = self.sistema_producao.configurar_log()
            print(f"üìÑ Log ser√° salvo em: {log_filename}")
            print(f"‚öôÔ∏è Configura√ß√£o PL: {self.configuracoes['resolucao_minutos']}min, timeout {self.configuracoes['timeout_pl']}s")
            
            # ‚úÖ CORRE√á√ÉO 3: Inicializa almoxarifado ANTES de criar pedidos
            print("üè™ Inicializando almoxarifado...")
            self.sistema_producao.inicializar_almoxarifado()
            
            # ‚úÖ CORRE√á√ÉO 4: Substitui completamente o m√©todo de cria√ß√£o para usar APENAS pedidos do menu
            self._substituir_pedidos_sistema_corrigido(self.sistema_producao, pedidos_menu)
            
            print("\nüßÆ Iniciando otimiza√ß√£o com Programa√ß√£o Linear...")
            print("‚è±Ô∏è Isso pode levar alguns minutos...")
            
            # Executa sistema completo usando logging duplo (como no script original)
            sucesso = self._executar_com_logging_duplo(self.sistema_producao, log_filename)
            
            if sucesso:
                # Mostra estat√≠sticas
                stats = self.sistema_producao.obter_estatisticas() if hasattr(self.sistema_producao, 'obter_estatisticas') else {}
                self._mostrar_resultado_execucao(stats, "OTIMIZADO")
                
                # Tenta mostrar cronograma (com tratamento de erro)
                try:
                    cronograma = self.sistema_producao.obter_cronograma_otimizado() if hasattr(self.sistema_producao, 'obter_cronograma_otimizado') else {}
                    self._mostrar_cronograma_otimizado(cronograma)
                except Exception as e:
                    print(f"\n‚ö†Ô∏è Erro ao obter cronograma: {e}")
                    print("üìä Execu√ß√£o conclu√≠da, mas cronograma n√£o dispon√≠vel")
                
                return True
            else:
                print("‚ùå Falha na execu√ß√£o otimizada!")
                return False
            
        except ImportError as e:
            print(f"‚ùå Erro de importa√ß√£o: {e}")
            print("üí° Verifique se producao_paes.py e otimizador est√£o dispon√≠veis")
            return False
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o otimizada: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def _substituir_pedidos_sistema_sequencial(self, sistema: 'TesteSistemaProducao', pedidos_menu: List[DadosPedidoMenu]):
        """
        ‚úÖ MODO SEQUENCIAL: Substitui m√©todo para usar APENAS pedidos do menu.
        Estrutura espec√≠fica para execu√ß√£o sequencial pura.
        """
        # ‚úÖ CR√çTICO: Verifica se almoxarifado foi inicializado
        if not hasattr(sistema, 'gestor_almoxarifado') or sistema.gestor_almoxarifado is None:
            raise RuntimeError("‚ùå ERRO CR√çTICO: Sistema n√£o tem gestor_almoxarifado inicializado!")
        
        # ‚úÖ SEQUENCIAL: Verifica se h√° pedidos do menu
        if not pedidos_menu:
            print("‚ö†Ô∏è MODO SEQUENCIAL: Nenhum pedido registrado no menu!")
            print("üí° Dica: Use a op√ß√£o '1' para registrar pedidos antes de executar")
            print("üìã Sistema executar√° com lista vazia de pedidos")
        
        # Converte pedidos do menu para o formato do sistema
        pedidos_convertidos = self._converter_pedidos_menu_para_sistema_corrigido(pedidos_menu, sistema.gestor_almoxarifado)
        
        # Substitui o m√©todo criar_pedidos_de_producao para usar APENAS pedidos do menu
        def criar_pedidos_sequencial():
            print(f"üìã SEQUENCIAL: Carregando {len(pedidos_convertidos)} pedido(s) registrado(s) pelo usu√°rio...")
            print("üö´ SEQUENCIAL: Ignorando pedidos hardcoded do script baseline")
            sistema.pedidos = pedidos_convertidos  # ‚úÖ USA APENAS PEDIDOS DO MENU
            print(f"‚úÖ SEQUENCIAL: {len(sistema.pedidos)} pedido(s) carregado(s) do menu!")
            
            # ‚úÖ DEBUG SEQUENCIAL: Verifica se pedidos t√™m gestor_almoxarifado
            for i, pedido in enumerate(sistema.pedidos):
                has_gestor = hasattr(pedido, 'gestor_almoxarifado') and pedido.gestor_almoxarifado is not None
                print(f"   üîç Pedido {i+1}: gestor_almoxarifado = {'‚úÖ' if has_gestor else '‚ùå'}")
            
            print()
        
        # Substitui o m√©todo no sistema
        sistema.criar_pedidos_de_producao = criar_pedidos_sequencial
    
    def _substituir_pedidos_sistema_corrigido(self, sistema: 'TesteSistemaProducao', pedidos_menu: List[DadosPedidoMenu]):
        """
        ‚úÖ VERS√ÉO CORRIGIDA: Substitui o m√©todo criar_pedidos_de_producao do sistema para usar APENAS pedidos do menu.
        Menu funciona de forma completamente independente do script baseline.
        """
        # ‚úÖ CR√çTICO: Verifica se almoxarifado foi inicializado
        if not hasattr(sistema, 'gestor_almoxarifado') or sistema.gestor_almoxarifado is None:
            raise RuntimeError("‚ùå ERRO CR√çTICO: Sistema n√£o tem gestor_almoxarifado inicializado!")
        
        # ‚úÖ NOVO: Verifica se h√° pedidos do menu
        if not pedidos_menu:
            print("‚ö†Ô∏è ATEN√á√ÉO: Nenhum pedido registrado no menu!")
            print("üí° Dica: Use a op√ß√£o '1' para registrar pedidos antes de executar")
            print("üìã Sistema executar√° com lista vazia de pedidos")
        
        # Converte pedidos do menu para o formato do sistema
        pedidos_convertidos = self._converter_pedidos_menu_para_sistema_corrigido(pedidos_menu, sistema.gestor_almoxarifado)
        
        # Substitui o m√©todo criar_pedidos_de_producao para usar APENAS pedidos do menu
        def criar_pedidos_personalizados():
            print(f"üìã MENU: Carregando {len(pedidos_convertidos)} pedido(s) registrado(s) pelo usu√°rio...")
            print("üö´ MENU: Ignorando pedidos hardcoded do script baseline")
            sistema.pedidos = pedidos_convertidos  # ‚úÖ USA APENAS PEDIDOS DO MENU
            print(f"‚úÖ MENU: {len(sistema.pedidos)} pedido(s) carregado(s) do menu!")
            
            # ‚úÖ DEBUG: Verifica se pedidos t√™m gestor_almoxarifado
            for i, pedido in enumerate(sistema.pedidos):
                has_gestor = hasattr(pedido, 'gestor_almoxarifado') and pedido.gestor_almoxarifado is not None
                print(f"   üîç Pedido {i+1}: gestor_almoxarifado = {'‚úÖ' if has_gestor else '‚ùå'}")
            
            print()
        
        # Substitui o m√©todo no sistema
        sistema.criar_pedidos_de_producao = criar_pedidos_personalizados
    
    def _executar_sequencial_puro(self, sistema: 'TesteSistemaProducao', log_filename: str) -> bool:
        """
        ‚úÖ EXECU√á√ÉO SEQUENCIAL PURA: Usa EXATAMENTE o fluxo do producao_paes_backup.py
        """
        from producao_paes_backup import TeeOutput
        
        # Configura sa√≠da dupla (terminal + arquivo) EXATAMENTE como no backup
        with open(log_filename, 'w', encoding='utf-8') as log_file:
            tee = TeeOutput(log_file)
            sys.stdout = tee
            
            try:
                # ‚úÖ FLUXO EXATO DO BACKUP: producao_paes_backup.py
                
                # Escreve cabe√ßalho (como no backup)
                sistema.escrever_cabecalho_log()
                
                # 1. Configura√ß√£o do ambiente (j√° feito na inicializa√ß√£o)
                print("üè™ SEQUENCIAL: Almoxarifado j√° inicializado")
                
                # 2. Cria√ß√£o dos pedidos (substitu√≠do para usar pedidos do menu)
                sistema.criar_pedidos_de_producao()
                print(f"üìä SEQUENCIAL: {len(sistema.pedidos)} pedido(s) carregado(s)")
                
                # 3. Ordena√ß√£o por prioridade (EXATAMENTE como no backup)
                sistema.ordenar_pedidos_por_prioridade()
                print(f"üìä SEQUENCIAL: {len(sistema.pedidos)} pedido(s) ordenado(s)")
                
                # 4. Execu√ß√£o (EXATAMENTE como no backup)
                sistema.executar_pedidos_ordenados()
                
                # Escreve rodap√© de sucesso (como no backup)
                sistema.escrever_rodape_log(True)
                
                return True
                
            except Exception as e:
                print(f"‚ùå ERRO CR√çTICO NA EXECU√á√ÉO SEQUENCIAL: {e}")
                import traceback
                traceback.print_exc()
                sistema.escrever_rodape_log(False)
                return False
            
            finally:
                # Restaura stdout original (como no backup)
                sys.stdout = tee.stdout
        
        return True
        """
        ‚úÖ VERS√ÉO CORRIGIDA: Substitui o m√©todo criar_pedidos_de_producao do sistema para usar APENAS pedidos do menu.
        Menu funciona de forma completamente independente do script baseline.
        """
        # ‚úÖ CR√çTICO: Verifica se almoxarifado foi inicializado
        if not hasattr(sistema, 'gestor_almoxarifado') or sistema.gestor_almoxarifado is None:
            raise RuntimeError("‚ùå ERRO CR√çTICO: Sistema n√£o tem gestor_almoxarifado inicializado!")
        
        # ‚úÖ NOVO: Verifica se h√° pedidos do menu
        if not pedidos_menu:
            print("‚ö†Ô∏è ATEN√á√ÉO: Nenhum pedido registrado no menu!")
            print("üí° Dica: Use a op√ß√£o '1' para registrar pedidos antes de executar")
            print("üìã Sistema executar√° com lista vazia de pedidos")
        
        # Converte pedidos do menu para o formato do sistema
        pedidos_convertidos = self._converter_pedidos_menu_para_sistema_corrigido(pedidos_menu, sistema.gestor_almoxarifado)
        
        # Substitui o m√©todo criar_pedidos_de_producao para usar APENAS pedidos do menu
        def criar_pedidos_personalizados():
            print(f"üìã MENU: Carregando {len(pedidos_convertidos)} pedido(s) registrado(s) pelo usu√°rio...")
            print("üö´ MENU: Ignorando pedidos hardcoded do script baseline")
            sistema.pedidos = pedidos_convertidos  # ‚úÖ USA APENAS PEDIDOS DO MENU
            print(f"‚úÖ MENU: {len(sistema.pedidos)} pedido(s) carregado(s) do menu!")
            
            # ‚úÖ DEBUG: Verifica se pedidos t√™m gestor_almoxarifado
            for i, pedido in enumerate(sistema.pedidos):
                has_gestor = hasattr(pedido, 'gestor_almoxarifado') and pedido.gestor_almoxarifado is not None
                print(f"   üîç Pedido {i+1}: gestor_almoxarifado = {'‚úÖ' if has_gestor else '‚ùå'}")
            
            print()
        
        # Substitui o m√©todo no sistema
        sistema.criar_pedidos_de_producao = criar_pedidos_personalizados
        
    def _converter_pedidos_menu_para_sistema_corrigido(self, pedidos_menu: List[DadosPedidoMenu], gestor_almoxarifado) -> List:
        """
        ‚úÖ VERS√ÉO CORRIGIDA: Converte pedidos do menu para o formato usado pelo TesteSistemaProducao.
        Agora inclui o gestor_almoxarifado na cria√ß√£o de cada pedido.
        """
        from models.atividades.pedido_de_producao import PedidoDeProducao
        from factory.fabrica_funcionarios import funcionarios_disponiveis
        from enums.producao.tipo_item import TipoItem
        
        print(f"üîç Debug - Convertendo {len(pedidos_menu)} pedido(s) do menu...")
        print(f"üè™ Debug - Gestor almoxarifado dispon√≠vel: {gestor_almoxarifado is not None}")
        
        # Debug: mostra pedidos de entrada
        for i, pedido in enumerate(pedidos_menu):
            print(f"   üìã Pedido {i+1}: ID={pedido.id_pedido}, Item={pedido.nome_item}, Qtd={pedido.quantidade}")
        
        pedidos_convertidos = []
        
        for pedido_menu in pedidos_menu:
            try:
                print(f"   Convertendo pedido {pedido_menu.id_pedido}: {pedido_menu.nome_item} ({pedido_menu.quantidade} uni)...")
                
                # Converte tipo string para enum
                if pedido_menu.tipo_item == "PRODUTO":
                    tipo_enum = TipoItem.PRODUTO
                else:
                    tipo_enum = TipoItem.SUBPRODUTO
                
                # ‚úÖ CORRE√á√ÉO PRINCIPAL: Inclui gestor_almoxarifado (como no script original)
                pedido_producao = PedidoDeProducao(
                    id_ordem=1,  # Fixo para menu
                    id_pedido=pedido_menu.id_pedido,  # Usa ID √∫nico do menu
                    id_produto=pedido_menu.id_item,
                    tipo_item=tipo_enum,
                    quantidade=pedido_menu.quantidade,
                    inicio_jornada=pedido_menu.inicio_jornada,
                    fim_jornada=pedido_menu.fim_jornada,
                    todos_funcionarios=funcionarios_disponiveis,
                    gestor_almoxarifado=gestor_almoxarifado  # ‚úÖ INCLU√çDO!
                )
                
                # ‚úÖ DEBUG: Verifica se gestor foi anexado corretamente
                if hasattr(pedido_producao, 'gestor_almoxarifado') and pedido_producao.gestor_almoxarifado is not None:
                    print(f"   üîç Debug - Gestor anexado corretamente ao pedido {pedido_menu.id_pedido}")
                else:
                    print(f"   ‚ö†Ô∏è Debug - ERRO: Gestor N√ÉO anexado ao pedido {pedido_menu.id_pedido}")
                
                # Monta estrutura (como no script original)
                print(f"   üîß Montando estrutura do pedido {pedido_menu.id_pedido}...")
                pedido_producao.montar_estrutura()
                pedidos_convertidos.append(pedido_producao)
                
                print(f"   ‚úÖ Pedido {pedido_menu.id_pedido} convertido (PedidoProducao.id_pedido={pedido_producao.id_pedido})")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao converter pedido {pedido_menu.id_pedido}: {e}")
                import traceback
                traceback.print_exc()
        
        print(f"üîç Debug - Total convertido: {len(pedidos_convertidos)} pedido(s)")
        
        # Debug: verifica se h√° duplicatas
        ids_convertidos = [p.id_pedido for p in pedidos_convertidos]
        if len(set(ids_convertidos)) != len(ids_convertidos):
            print(f"‚ö†Ô∏è ATEN√á√ÉO: Detectadas duplicatas nos IDs convertidos: {ids_convertidos}")
        
        return pedidos_convertidos
    
    def _executar_com_logging_duplo(self, sistema: 'TesteSistemaProducao', log_filename: str) -> bool:
        """
        Executa o sistema com logging duplo (terminal + arquivo) como no script original.
        ‚úÖ CORRIGIDO: Fluxo adaptado para modo otimizado vs sequencial.
        """
        from producao_paes_backup import TeeOutput  # Importa da vers√£o correta
        
        # Configura sa√≠da dupla (terminal + arquivo) exatamente como no script original
        with open(log_filename, 'w', encoding='utf-8') as log_file:
            tee = TeeOutput(log_file)
            sys.stdout = tee
            
            try:
                # Escreve cabe√ßalho (como no script original)
                sistema.escrever_cabecalho_log()
                
                # ‚úÖ CORRE√á√ÉO CR√çTICA: Adapta fluxo baseado no tipo de execu√ß√£o
                if hasattr(sistema, 'usar_otimizacao') and sistema.usar_otimizacao:
                    print("üöÄ MODO OTIMIZADO DETECTADO")
                    
                    # Fluxo otimizado: criar_pedidos ‚Üí executar_otimizado (sem ordena√ß√£o)
                    sistema.criar_pedidos_de_producao()  # Carrega pedidos do menu
                    print(f"üìä Debug - Pedidos ap√≥s cria√ß√£o: {len(sistema.pedidos)}")
                    
                    # Pula ordena√ß√£o no modo otimizado (otimizador define ordem)
                    if hasattr(sistema, 'executar_pedidos_otimizados'):
                        sucesso_exec = sistema.executar_pedidos_otimizados()
                    else:
                        print("‚ö†Ô∏è M√©todo de otimiza√ß√£o n√£o dispon√≠vel, usando execu√ß√£o sequencial")
                        sistema.ordenar_pedidos_por_prioridade()
                        sistema.executar_pedidos_ordenados()
                        sucesso_exec = True
                        
                else:
                    print("üìÑ MODO SEQUENCIAL DETECTADO")
                    
                    # Fluxo sequencial original: criar_pedidos ‚Üí ordenar ‚Üí executar
                    sistema.criar_pedidos_de_producao()  # Carrega pedidos do menu
                    print(f"üìä Debug - Pedidos ap√≥s cria√ß√£o: {len(sistema.pedidos)}")
                    
                    sistema.ordenar_pedidos_por_prioridade()
                    print(f"üìä Debug - Pedidos ap√≥s ordena√ß√£o: {len(sistema.pedidos)}")
                    
                    sistema.executar_pedidos_ordenados()
                    sucesso_exec = True
                
                # Escreve rodap√© de sucesso
                sistema.escrever_rodape_log(True)
                
                return True
                
            except Exception as e:
                print(f"‚ùå ERRO CR√çTICO NA EXECU√á√ÉO: {e}")
                import traceback
                traceback.print_exc()
                sistema.escrever_rodape_log(False)
                return False
            
            finally:
                # Restaura stdout original (como no script original)
                sys.stdout = tee.stdout
        
        return True
    
    def _mostrar_resultado_execucao(self, stats: Dict, modo: str):
        """Mostra resultado da execu√ß√£o"""
        print(f"\nüìä RESULTADO DA EXECU√á√ÉO {modo}")
        print("=" * 50)
        
        if stats:
            total = stats.get('total_pedidos', 0)
            executados = stats.get('pedidos_executados', 0)
            
            print(f"üìã Total de pedidos: {total}")
            print(f"‚úÖ Pedidos executados: {executados}")
            
            if total > 0:
                taxa = (executados / total) * 100
                print(f"üìà Taxa de sucesso: {taxa:.1f}%")
            
            if modo == "OTIMIZADO" and 'otimizacao' in stats:
                opt_stats = stats['otimizacao']
                print(f"‚è±Ô∏è Tempo otimiza√ß√£o: {opt_stats.get('tempo_total_otimizacao', 0):.2f}s")
                print(f"üéØ Status solver: {opt_stats.get('status_solver', 'N/A')}")
                if 'janelas_totais_geradas' in opt_stats:
                    print(f"üîß Janelas geradas: {opt_stats.get('janelas_totais_geradas', 0):,}")
                if 'variaveis_pl' in opt_stats:
                    print(f"üìä Vari√°veis PL: {opt_stats.get('variaveis_pl', 0):,}")
        else:
            print("‚ùå Estat√≠sticas n√£o dispon√≠veis")
    
    def _mostrar_cronograma_otimizado(self, cronograma: Dict):
        """Mostra cronograma otimizado"""
        if not cronograma:
            print("\nüìÖ CRONOGRAMA OTIMIZADO")
            print("=" * 50)
            print("‚ö†Ô∏è Cronograma n√£o dispon√≠vel ou vazio")
            return
        
        print(f"\nüìÖ CRONOGRAMA OTIMIZADO")
        print("=" * 50)
        
        try:
            # Debug: mostra estrutura do cronograma
            print(f"üîç Debug - Estrutura do cronograma: {list(cronograma.keys())[:3]}...")
            
            # Verifica formato do cronograma
            if not cronograma:
                print("‚ö†Ô∏è Cronograma vazio")
                return
            
            # Pega primeiro item para verificar estrutura
            primeiro_item = next(iter(cronograma.values()))
            print(f"üîç Debug - Chaves dispon√≠veis: {list(primeiro_item.keys())}")
            
            # Ordena por hor√°rio de in√≠cio (adapta para diferentes formatos)
            itens_ordenados = []
            for pedido_id, dados in cronograma.items():
                # Tenta diferentes chaves poss√≠veis
                inicio = None
                fim = None
                duracao = None
                
                # Poss√≠veis chaves para in√≠cio
                for chave_inicio in ['inicio', 'inicio_execucao', 'data_inicio', 'timestamp_inicio']:
                    if chave_inicio in dados:
                        if isinstance(dados[chave_inicio], str):
                            inicio = datetime.fromisoformat(dados[chave_inicio])
                        elif isinstance(dados[chave_inicio], datetime):
                            inicio = dados[chave_inicio]
                        break
                
                # Poss√≠veis chaves para fim
                for chave_fim in ['fim', 'fim_execucao', 'data_fim', 'timestamp_fim']:
                    if chave_fim in dados:
                        if isinstance(dados[chave_fim], str):
                            fim = datetime.fromisoformat(dados[chave_fim])
                        elif isinstance(dados[chave_fim], datetime):
                            fim = dados[chave_fim]
                        break
                
                # Poss√≠veis chaves para dura√ß√£o
                for chave_duracao in ['duracao_horas', 'duracao', 'tempo_execucao']:
                    if chave_duracao in dados:
                        duracao = dados[chave_duracao]
                        break
                
                if inicio:
                    itens_ordenados.append((inicio, pedido_id, dados, fim, duracao))
                else:
                    # Se n√£o encontrou in√≠cio, ainda adiciona mas sem ordenar
                    itens_ordenados.append((datetime.now(), pedido_id, dados, fim, duracao))
            
            # Ordena por hor√°rio de in√≠cio
            itens_ordenados.sort(key=lambda x: x[0])
            
            # Exibe cronograma
            for inicio, pedido_id, dados, fim, duracao in itens_ordenados:
                inicio_str = inicio.strftime('%d/%m %H:%M') if inicio else "N/A"
                fim_str = fim.strftime('%d/%m %H:%M') if fim else "N/A"
                duracao_str = f"({duracao:.1f}h)" if duracao is not None else ""
                
                print(f"üéØ Pedido {pedido_id}: {inicio_str} ‚Üí {fim_str} {duracao_str}")
                
                # Mostra dados extras se dispon√≠veis
                extras = []
                if 'status' in dados:
                    extras.append(f"Status: {dados['status']}")
                if 'equipamento' in dados:
                    extras.append(f"Equip: {dados['equipamento']}")
                if extras:
                    print(f"   üìã {' | '.join(extras)}")
            
        except Exception as e:
            print(f"‚ùå Erro ao exibir cronograma: {e}")
            print(f"üîç Cronograma bruto: {cronograma}")
            # Fallback: mostra dados b√°sicos
            for pedido_id, dados in cronograma.items():
                print(f"üéØ Pedido {pedido_id}: {dados}")
                break  # Mostra s√≥ o primeiro para n√£o poluir
    
    def configurar(self, **kwargs):
        """Configura par√¢metros do executor"""
        for chave, valor in kwargs.items():
            if chave in self.configuracoes:
                self.configuracoes[chave] = valor
                print(f"‚öôÔ∏è {chave} configurado para: {valor}")
    
    def obter_configuracoes(self) -> Dict:
        """Retorna configura√ß√µes atuais"""
        ortools_ok, _ = self.utils.validar_or_tools()
        
        config = self.configuracoes.copy()
        config['ortools_disponivel'] = ortools_ok
        
        return config
    
    def testar_sistema(self) -> Dict:
        """
        Testa componentes do sistema.
        
        Returns:
            Dict com resultados dos testes
        """
        print("üß™ TESTANDO COMPONENTES DO SISTEMA")
        print("=" * 40)
        
        resultados = {}
        
        # Teste 1: OR-Tools
        print("1Ô∏è‚É£ Testando OR-Tools...")
        ortools_ok, ortools_msg = self.utils.validar_or_tools()
        resultados['ortools'] = {'ok': ortools_ok, 'msg': ortools_msg}
        print(f"   {'‚úÖ' if ortools_ok else '‚ùå'} {ortools_msg}")
        
        # Teste 2: TesteSistemaProducao
        print("2Ô∏è‚É£ Testando TesteSistemaProducao...")
        try:
            from producao_paes_backup import TesteSistemaProducao
            resultados['teste_sistema_producao'] = {'ok': True, 'msg': 'TesteSistemaProducao importado'}
            print(f"   ‚úÖ TesteSistemaProducao dispon√≠vel")
        except ImportError as e:
            resultados['teste_sistema_producao'] = {'ok': False, 'msg': str(e)}
            print(f"   ‚ùå TesteSistemaProducao n√£o encontrado: {e}")
        
        # Teste 3: Importa√ß√µes do sistema
        print("3Ô∏è‚É£ Testando importa√ß√µes do sistema...")
        importacoes = [
            ('models.atividades.pedido_de_producao', 'PedidoDeProducao'),
            ('enums.producao.tipo_item', 'TipoItem'),
            ('factory.fabrica_funcionarios', 'funcionarios_disponiveis')
        ]
        
        for modulo, classe in importacoes:
            try:
                exec(f"from {modulo} import {classe}")
                resultados[f'import_{classe}'] = {'ok': True, 'msg': 'OK'}
                print(f"   ‚úÖ {modulo}.{classe}")
            except ImportError as e:
                resultados[f'import_{classe}'] = {'ok': False, 'msg': str(e)}
                print(f"   ‚ùå {modulo}.{classe}: {e}")
        
        # Teste 4: Contagem de arquivos
        print("4Ô∏è‚É£ Testando gerenciador de pedidos...")
        try:
            gerenciador = GerenciadorPedidos()
            
            produtos = gerenciador.listar_itens_disponiveis("PRODUTO")
            subprodutos = gerenciador.listar_itens_disponiveis("SUBPRODUTO")
            
            resultados['arquivos'] = {
                'produtos': len(produtos),
                'subprodutos': len(subprodutos)
            }
            
            print(f"   üì¶ Produtos: {len(produtos)} arquivos")
            print(f"   üîß Subprodutos: {len(subprodutos)} arquivos")
        except Exception as e:
            resultados['arquivos'] = {'ok': False, 'msg': str(e)}
            print(f"   ‚ùå Erro ao testar gerenciador: {e}")
        
        # Resumo
        testes_ok = sum(1 for r in resultados.values() if isinstance(r, dict) and r.get('ok', False))
        total_testes = sum(1 for r in resultados.values() if isinstance(r, dict) and 'ok' in r)
        
        print(f"\nüìä Resultado: {testes_ok}/{total_testes} testes passaram")
        
        return resultados
    
    def limpar_logs_anteriores(self):
        """
        Limpa logs de execu√ß√µes anteriores manualmente.
        ‚úÖ ATUALIZADO: M√©todo mantido para limpeza manual via menu.
        """
        try:
            from utils.logs.gerenciador_logs import limpar_todos_os_logs
            from utils.comandas.limpador_comandas import apagar_todas_as_comandas
            
            print("üßπ Limpando logs anteriores manualmente...")
            limpar_todos_os_logs()
            apagar_todas_as_comandas()
            print("‚úÖ Logs e comandas limpos manualmente")
            
        except ImportError:
            print("‚ö†Ô∏è M√≥dulos de limpeza n√£o dispon√≠veis")
        except Exception as e:
            print(f"‚ùå Erro ao limpar logs: {e}")
    
    def limpar_pedidos_completo(self):
        """
        ‚úÖ NOVO: M√©todo adicional para limpeza completa de pedidos.
        Remove arquivo de pedidos salvos e limpa pedidos em mem√≥ria.
        """
        try:
            print("üóëÔ∏è LIMPEZA COMPLETA DE PEDIDOS")
            print("=" * 40)
            
            # Remove arquivo de pedidos salvos
            arquivo_pedidos = "menu/pedidos_salvos.json"
            if os.path.exists(arquivo_pedidos):
                try:
                    import json
                    with open(arquivo_pedidos, 'r', encoding='utf-8') as f:
                        dados = json.load(f)
                    
                    total_pedidos = len(dados.get('pedidos', []))
                    print(f"üìã Removendo {total_pedidos} pedido(s) salvos...")
                    
                except (json.JSONDecodeError, KeyError):
                    print("üìã Removendo arquivo de pedidos (corrompido)...")
                
                os.remove(arquivo_pedidos)
                print(f"‚úÖ Arquivo {arquivo_pedidos} removido")
            else:
                print("üì≠ Nenhum arquivo de pedidos salvos encontrado")
            
            # Remove outros arquivos relacionados se existirem
            arquivos_relacionados = [
                "menu/backup_pedidos.json",
                "menu/temp_pedidos.json",
                "pedidos.json",
                "pedidos_backup.json"
            ]
            
            for arquivo in arquivos_relacionados:
                if os.path.exists(arquivo):
                    os.remove(arquivo)
                    print(f"‚úÖ Arquivo {arquivo} removido")
            
            print("\nüéâ Limpeza completa de pedidos finalizada!")
            
        except Exception as e:
            print(f"‚ùå Erro durante limpeza completa de pedidos: {e}")
            import traceback
            traceback.print_exc()
    
    def limpar_logs_completo(self):
        """
        ‚úÖ NOVO: M√©todo adicional para limpeza completa e detalhada.
        Remove todos os arquivos de log e comandas com feedback detalhado.
        """
        try:
            import shutil
            from pathlib import Path
            
            print("üßπ LIMPEZA COMPLETA DE LOGS")
            print("=" * 40)
            
            # Lista diret√≥rios a limpar
            diretorios_logs = ['logs', 'comandas', 'temp']
            
            for diretorio in diretorios_logs:
                if os.path.exists(diretorio):
                    arquivos = os.listdir(diretorio)
                    if arquivos:
                        print(f"üìÅ Limpando {diretorio}/: {len(arquivos)} arquivo(s)")
                        for arquivo in arquivos:
                            caminho_arquivo = os.path.join(diretorio, arquivo)
                            try:
                                if os.path.isfile(caminho_arquivo):
                                    os.remove(caminho_arquivo)
                                elif os.path.isdir(caminho_arquivo):
                                    shutil.rmtree(caminho_arquivo)
                            except Exception as e:
                                print(f"   ‚ö†Ô∏è Erro ao remover {arquivo}: {e}")
                        print(f"   ‚úÖ {diretorio}/ limpo")
                    else:
                        print(f"üìÅ {diretorio}/ j√° est√° vazio")
                else:
                    print(f"üìÅ {diretorio}/ n√£o existe")
            
            # Chama tamb√©m os m√©todos espec√≠ficos do sistema
            try:
                from utils.logs.gerenciador_logs import limpar_todos_os_logs
                from utils.comandas.limpador_comandas import apagar_todas_as_comandas
                
                limpar_todos_os_logs()
                apagar_todas_as_comandas()
                print("‚úÖ Limpeza espec√≠fica do sistema executada")
                
            except ImportError:
                print("‚ö†Ô∏è M√≥dulos espec√≠ficos de limpeza n√£o dispon√≠veis")
            
            print("\nüéâ Limpeza completa finalizada!")
            
        except Exception as e:
            print(f"‚ùå Erro durante limpeza completa: {e}")
            import traceback
            traceback.print_exc()

    def obter_sistema_producao(self):
        """Retorna a inst√¢ncia atual do sistema de produ√ß√£o"""
        return self.sistema_producao