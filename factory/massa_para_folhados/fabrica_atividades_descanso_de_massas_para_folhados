# ============================================
# üì¶ Imports
# ============================================
import sys
from datetime import datetime

# üîß Ajuste de path conforme seu ambiente
sys.path.append("/Users/jardelrodrigues/Desktop/SIVIRA/src_equip/")

from utils.logger_factory import setup_logger
from utils.conversores_ocupacao import gramas_para_caixas

from factory.fabrica_equipamentos import (
    camara_refrigerada_1,
    freezer_2
)
from models.atividades.subproduto.massa_para_folhados.descanso_de_massas_para_folhados import (
    DescansoDeMassasParaFolhados,
)
from enums.tipo_atividade import TipoAtividade
from enums.tipo_profissional import TipoProfissional
from services.gestor_refrigeracao_congelamento import GestorRefrigeracaoCongelamento


# ============================================
# üî• Logger
# ============================================
logger = setup_logger(
    "SimulacaoDescansoMassasFolhados",
    arquivo="logs/simulacao_descanso_massas_folhados.log"
)


# ============================================
# ‚è∞ Jornada de Produ√ß√£o
# ============================================
inicio_jornada = datetime(2025, 5, 25, 8, 0)
fim_jornada = datetime(2025, 5, 25, 17, 0)


# ============================================
# üõ†Ô∏è Instanciar Gestores
# ============================================
gestor_refrigeracao = GestorRefrigeracaoCongelamento(camara_refrigerada_1)


# ============================================
# üì¶ Quantidades simuladas
# ============================================
quantidades = [5000, 12000, 18000, 40000, 60000]


# ============================================
# üèóÔ∏è Criar Atividades
# ============================================
atividades = []

for i, quantidade in enumerate(quantidades):
    atividade = DescansoDeMassasParaFolhados(
        id=i + 1,
        tipo_atividade=TipoAtividade.DESCANSO_DE_MASSAS_PARA_FOLHADOS,
        tipos_profissionais_permitidos=[
            TipoProfissional.CONFEITEIRO,
            TipoProfissional.AUXILIAR_DE_CONFEITEIRO
        ],
        quantidade_funcionarios=1,
        equipamentos_elegiveis=[
            camara_refrigerada_1,
            freezer_2
        ],
        quantidade_produto=quantidade,
        fips_equipamentos={
            camara_refrigerada_1: 1,
            freezer_2: 2,
        },
    )
    atividade.calcular_duracao()
    atividades.append(atividade)

logger.info(f"üõ†Ô∏è {len(atividades)} atividades de descanso de massas para folhados criadas.")


# ============================================
# üî• Tentar Alocar e Iniciar Atividades
# ============================================
for atividade in atividades:
    logger.info(
        f"üöÄ Tentando alocar atividade {atividade.id} com {atividade.quantidade_produto}g."
    )

    sucesso = atividade.tentar_alocar_e_iniciar(
        gestor_refrigeracao=gestor_refrigeracao,
        inicio_jornada=inicio_jornada,
        fim_jornada=fim_jornada
    )

    if sucesso:
        logger.info(
            f"‚úÖ Atividade {atividade.id} alocada com sucesso: "
            f"{atividade.equipamento_alocado.nome} de {atividade.inicio_real.strftime('%H:%M')} at√© {atividade.fim_real.strftime('%H:%M')}."
        )
    else:
        logger.warning(
            f"‚ùå Atividade {atividade.id} n√£o p√¥de ser alocada dentro da janela "
            f"entre {inicio_jornada.strftime('%H:%M')} e {fim_jornada.strftime('%H:%M')}."
        )


# ============================================
# üìÖ Mostrar Agendas Finais
# ============================================
gestor_refrigeracao.mostrar_agenda()
